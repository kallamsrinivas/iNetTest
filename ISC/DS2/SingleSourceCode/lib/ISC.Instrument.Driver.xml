<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ISC.Instrument.Driver</name>
    </assembly>
    <members>
        <member name="T:ISC.Instrument.Driver.HeaderReasons">
            <summary>
            
            </summary>
            
        </member>
        <member name="T:ISC.Instrument.Driver.ICalStationDriver">
            <summary>
            All drivers for calibration stations implemement this interface.
            </summary>
            <seealso cref="T:ISC.Instrument.Driver.CalPlusDriver"/>
            <seealso cref="T:ISC.Instrument.Driver.Mx4CalStationDriver"/>
            <seealso cref="T:ISC.Instrument.Driver.VCalSixUnitCalStationDriver"/>
        </member>
        <member name="M:ISC.Instrument.Driver.ICalStationDriver.downloadCalAndBumpData(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Downloads then clears all Calibration and Bump Test data from the calibration station.
            </summary>
            <param name="calList">
            For each calibration record read from the calibration station, this method will add an
            <see cref="T:ISC.Instrument.Driver.DriverInstrumentBumpRecord"/> instance (or a subclass instance) to the passed-in ArrayList.
            </param>
            <param name="bumpList">
            For each bump test record read from the calibration station, this method will add an
            <see cref="T:ISC.Instrument.Driver.DriverInstrumentBumpRecord"/> instance (or a subclass instance) to the passed-in ArrayList.
            </param>
            <returns>
            And empty string is returned if everything is successful.
            An error string is returned if an error occurs when trying to download 
            or clear the data from the cal station.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ICalStationDriver.setCalSerialPort(System.String)">
            <summary>
            Specify the serial port that should be used to communicate with the calibration station.
            </summary>
            <param name="comPort">The serial port that should be used to communicate with the calibration station. e.g. "COM3".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.ICalStationDriver.SetDateTime(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Sets the date and time on the calibration station's RTC.
            </summary>
            <param name="inMonth"></param>
            <param name="inDay"></param>
            <param name="inYear"></param>
            <param name="inHour"></param>
            <param name="inMin"></param>
            <returns>Communications error value. Zero if there was no error.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ICalStationDriver.SetLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the calibrations station's language.
            </summary>
            <param name="inLanguage"></param>
            <returns>Communications error value. Zero if there was no error.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ICalStationDriver.SetModbusRegister(System.UInt16,System.UInt16)">
            <summary>
            THIS SHOULD ONLY BE USED BY MX-Cal SETUP SOFTWARE.
            </summary>
            <remarks>
            2010-05-13 INT-164 R.Ambrose - 
            Added method to expose modbus register writes to the MX-Cal setup software.
            </remarks>
            <param name="register"></param>
            <param name="value"></param>
            <returns>Communications error value. Zero if there was no error.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ICalStationDriver.GetModbusRegister(System.UInt16)">
            <summary>
            THIS SHOULD ONLY BE USED BY MX-Cal SETUP SOFTWARE.
            </summary>
            <remarks>
            2010-05-13 INT-164 R.Ambrose - 
            Added method to expose modbus register writes to the MX-Cal setup software.
            </remarks>
            <param name="register"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.M40ProFactoryDriver">
            <summary>
            For use with the M40 Pro instrument's factory &amp; service software.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.M40ProDriver">
            <summary>
            Driver for the "M40 Pro" multigas instrument.
            </summary>
            <remarks>
            This driver is <b>not</b> used for the M40, M40m, or M40ma instruments.
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4Driver">
            <summary>
            Driver for the MX4 multigas instruments (iQuad, Ventis, Ventis LS, and Scout).
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.InstrumentDriver">
            <summary>
            This is an abstract class that all individual drivers for each specific instrument type 
            inherit from.
            </summary>
            <remarks>
            An instance of an InstrumentDriver is intended to be used for a single instrument.
            Applications should instantiate a driver, communicate with the particular instrument to do
            what needed, then dispose of the driver.
            <example>
            A recommended way to connect to an instrument is as follows...
            <code>
            using ( InstrumentDriver myDriver = new Mx6Driver(...) )
            {  
                driver.setPortSpeed( ... );
                driver.connect(true);
            
                ...
                // do stuff
                ...
            }
            </code>
            Alternatively...
            <code>
            InstrumentDriver myDriver = new Mx6Driver(...);
            try
            {     
                driver.setPortSpeed( ... );
                driver.connect(true);
                
                ...
                // do stuff
                ...
            }
            finally
            {
                myDriver.Dispose()
            }
            </code>
            </example>
            <para>
            Note that the InstrumentDriver's base class implements <see cref="T:System.IDisposable"/>. All driver
            instances must be disposed of when no longer needed.  This can be done either implicitly via
            "using" statement as shown above, or explicitly by calling the public Dispose() method
            as also shown above.
            </para>
            <para>
            It is recommended to not re-use the same driver instance for multiple instruments,
            because the driver will cache information about an instrument. Because the driver caches data, it is
            very important that a different instance of the driver is used for each different instrument that an
            application needs to connect to, so that the cache is discarded away between instruments. 
            </para>
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.ModbusDriver">
            <summary>
            This is the base class for all drivers that communicate using the Modbus protocol.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.#ctor(ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="modbusMaster"></param>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.#ctor(ISC.Instrument.Driver.ModbusMaster,System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            </summary>
            <param name="modbusMaster"></param>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.Finalize">
            <summary>
            Finalizing destructor.
            Calls virtual Dispose method as part of standard IDisposable design pattern.
            </summary>
            <remarks>Makes sure COM port is closed during garbage collection.</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.Dispose">
            <summary>
            Implementation of IDisposable. Disposes of serial port resources
            used to communicate with the instrument, and suppresses finalization.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.NullAbortRequest">
            <summary>
            Default AbortRequest delegate.
            Always called unless overridden via
            with a different delegate via SetAbortRequester.  
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.SetModbusTracer(ISC.Instrument.Driver.IModbusTracer)">
            <summary>
            Set tracer.  A 'tracer' can be set such that during instrument communications, messages
            will be sent to the tracer that can aid in debugging.  Depending on how the tracer
            is implemented, it may send the messages to a serial port (for hyperterminal logging), 
             or to a text file, etc.
            </summary>
            <seealso cref="T:ISC.Instrument.Driver.IModbusTracer"/>
            <param name="modbusTracer"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.SetModbusMaxRawAttempts(System.Int32)">
            <summary>
            Allows the number of raw attempts in Modbus to be set.
            </summary>
            <param name="attempts">The number of attempts.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.WriteError(System.String)">
            <summary>
            Send an error message to the tracer (if a tracer has been specified).
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.WriteWarning(System.String)">
            <summary>
            Send a warning message to the tracer (if a tracer has been specified).
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.WriteDebug(System.String)">
            <summary>
            Send an debug message to the tracer (if a tracer has been specified).
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.SetAbortRequester(ISC.Instrument.Driver.AbortRequest)">
            <summary>
            Specify a delegate that can be used by the driver to determine if if should abort communications.
            Whenever the driver encounters a communications error, it will immediately 
            call the specified AbortRequest delegate.
            <para>
            See the <see cref="T:ISC.Instrument.Driver.AbortRequest">documentation for the AbortRequest delegate</see> for more details
            on how to use.
            </para>
            </summary>
            <param name="abortRequest">If null is passed, then a NullAbortRequest is used.</param>
            <seealso cref="T:ISC.Instrument.Driver.AbortRequest"/>
            <seealso cref="T:ISC.Instrument.Driver.CommunicationAbortedException"/>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.setSerialPort(System.String)">
            <summary>
            Specify COM port to be used for communicating with the instrument.
            </summary>
            <param name="comPort">e.g "COM1:"</param>
            This is for non-GBPlus instruments (like M40)
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.setCommunicationModuleType(ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            If not called, default (as defined by ModbusLibrary) is DataLink
            </summary>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.GetModbusRegister(System.UInt16)">
            <summary>
            FOR DEBUGGING UTILITIES ONLY. SUBJECT TO CHANGE OR DISAPPEAR. DO NOT CALL THIS.
            </summary>
            <param name="registerNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.SetModbusRegister(System.UInt16,System.UInt16)">
            <summary>
            FOR DEBUGGING UTILITIES ONLY. SUBJECT TO CHANGE OR DISAPPEAR. DO NOT CALL THIS.
            </summary>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusDriver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used to communicate with the instrument.
            </summary>
            <remarks>Intended to be called during initialization of the driver.</remarks>
            <param name="baudRate"></param>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusDriver.TxRxCount">
            <summary>
            Returns a count of how many times TxRx has been called. 
            (i.e., basically, a count of the number of modbus registers have been read or written.)
            </summary>
             <seealso cref="P:ISC.Instrument.Driver.ModbusDriver.TxRxRetries"/>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusDriver.TxRxRetries">
            <summary>
            Returns a count of how many times TxRx failed and had to retry.
            </summary>
            <remarks>
            Note that for the docking station, the value returned comes from the ModbusLibrary DLL.
            The value is cumulative; i.e., it never resets back to zero and will only continually
            increment as the docking station continues to run.
            </remarks>
            <returns></returns>
            <seealso cref="P:ISC.Instrument.Driver.ModbusDriver.TxRxCount"/>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusDriver.Name">
            <summary>
            Returns a simple name for the driver.
            e.g. "Mx6Driver".
            The name returned is the class's simple name minus all the prepended namespace info.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusDriver.ModbusAddress">
            <summary>
            The modbus ID to use for communicating with the instrument.
            If never specified, the default is 1,
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusDriver.DriverVersion">
            <summary>
            Returns the file version of the instrument driver DLL in a displayable format.
            e.g. "X.X.X.X".
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDriver._resolutionCache">
            <summary>cache of Resolutions for each installed sensor</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDriver._englishCulture">
            <summary>
            Used internally by routines that need an EN-us (0x0409) culture object.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDriver.Y2K">
            <summary>
            January 1st, 2000.
            </summary>
            <remarks>
            Used internally for determining number of seconds since 1/1/2000, and sometimes used
            as an baseline for adding/subtracting a number of years to the year 2000.
            <para>
            (Dates returned by the instruments (such as setup date) are often all relative to 1/1/2000.)
            </para>
            <para>
            NOTE / TODO: Don't know if hardcoding of year 2000 will work on
            OS's that are not using Gregorian calender (such as Windows running Saudi
            Arabia local)!
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.#ctor(ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="modbusMaster"></param>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.#ctor(ISC.Instrument.Driver.ModbusMaster,System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            </summary>
            <param name="modbusMaster"></param>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.ValidateAlphanumeric(System.String,System.String)">
            <summary>
            Verifies that every character in passed in string is a letter or a digit.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <exception cref="T:System.ArgumentException">Thrown if passed in field contains a character that is neither a letter nor a digit.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.raiseProgressEvent(System.Int32,System.Int32,System.String)">
            <summary>
            Calling this method raises an event to any handlers, indicating some level
            of progress in a long driver call, such as hygiene download.
            </summary>
            <param name="current">Current step in the process</param>
            <param name="total">Total number of steps in the process</param>
            <param name="description">Translatable code for Description of what is happening</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.connect(System.Boolean)">
            <summary>
            Establishes communication with the instrument.
            </summary>
            <param name="batching">If true is specified, then this method will initiate a "batch connection".
            <para>If false is specified, then non-batched connection is performed.</para>
            <note>
            Note that many of the overrides of this abstract method that are in the various InstrumentDriver
            subclasses completely ignore this parameter. Please check documentation for each override for specifics.
            </note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.disconnect">
            <summary>
            Intended to be called by Dispose.  Does a BatchDisconnect (if necessary), or any other
            logic that needs to be done to 'disconnect' from an instrument before we close the serial port.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.shutdown">
            <summary>
            Turns off (powers down) the instrument.
            <remarks>If the instrument does not have the ability to be turned off,
            then this method will do nothing.</remarks>
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            Only instrument settings need to be explicitly saved by calling this.
            <para>
            Changing sensor settings happens immediately, and this does not need to be called for sensors.
            </para>
            <para>
            Clearing instrument logs is also immediate, and this does not need to be called for them.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            Commands the instrument to power on/off its sensors.
            </summary>
            <remarks><para>This is not the same as enabling/disabling or pausing/unpausing sensors.
            This is telling the instrument to actually send/kill power to the sensors to activate/stop them.
            </para>
            <para>Only some instruments allow their sensors to be powered on or off.
            For those instruments that do not, this method will do nothing.</para>
            </remarks>
            <param name="on">True to turn on the sensors; False to turn them off.</param>
            <param name="wait">Only applies if "on" parameter is true; otherwise, it is ignored.
            <para>If this paramter is True, then after the the instrument is commanded to warmup its
            sensors, it will wait for the warmup to complete before returning.</para>
            <para>If this paramter is False, then after the instrument is commanded to warmup its
            sensors, this method will immediately return; i.e., it will not wait for the warmup to complete.
            The intention is to to have the instrument warm up its sensors in "the background" while
            the calling application continues to communicate with the instrument for other things.
            </para>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getEquipmentType">
            <summary>
            Returns the type of equipment that the driver is communicating with.
            The returned type is what the device claims it is when it is queried by this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getEquipmentSubType">
            <summary>
            Returns the instrument's sub-type.
            i.e., some instruments of a specific type can be of a different "sub type".
            For example, a 5-gas VentisPro, versus a 4-gas VentisPro. Or a standard MX6, versus a Benzene (Garcia) MX6. 
            </summary>
            <returns>
            Some instruments do not have "sub types". This default implementation, used for those instruments,
            always just returns <see cref="F:ISC.Instrument.TypeDefinition.EquipmentSubType.None"/>.
            </returns>
            <seealso cref="T:ISC.Instrument.TypeDefinition.EquipmentSubType"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getOperatingMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.enablePump(System.Boolean)">
            <summary>
            Turn on (or off) the instrument's attached pump.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.isAccessoryPumpInstalled"/>
            <param name="enabled">True to enable the pump; False to disable it.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isAccessoryPumpInstalled">
            <summary>
            Returns whether or not this instrument has a currently attached pump.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.enablePump(System.Boolean)"/>
            <returns>True if pump is attached; else false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getProfiles">
            <summary>
            Returns this instrument's profiles.
            </summary>
            <returns>If this instrument does not support Profiles, then an empty array is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            Replaces the instrument's stored profiles with the passed-in list of Profiles.
            </summary>
            <returns>If this instrument does not support Profiles, then an empty array is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getFactoryProfile">
            <summary>
            Returns this instrument's factory (default) profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getFavoritePidFactors">
            <summary>
            Returns a list of the "Favorite PID Response Factors" that the user 
            has created.
            </summary>
            <remarks>The list of "Favorite PIDs" is intended to be a list of
            response factors that the user commonly uses on a day-to-day basis.
            </remarks>
            <returns>Returned array contains gas codes. e.g. "G0091".
            If the instrument does not support "favorites", then an empty array is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setFavoritePidFactors(System.String[])">
            <summary>
            Replaces the instrument's list of "Favorite PID Response Factors" with the passed-in
            ones.
            </summary>
            <remarks>The list of "Favorite PIDs" is intended to be a list of
            response factors that the user commonly uses on a day-to-day basis.
            </remarks>
            <param name="pidFactors">Array is expected to contain gas codes.  e.g. "G0091".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getCustomPidFactors">
            <summary>
            Returns a list of the instrument's "Custom Response Factors" that the user has created.
            </summary>
            <returns>
            If the instrument does not support Custom Response Factors, then an empty array is returned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setCustomPidFactors(ISC.Instrument.Driver.CustomResponseFactor[])">
            <summary>
            Replaces the instrument's list of "Favorite PID Response Factors" with the passed-in
            ones.
            </summary>
            <param name="customFactors"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getAlarmEvents">
            <summary>
            Returns this instrument's stored AlarmEvents.
            </summary>
            <returns>If the instrument does not support AlarmEvents, an empty array is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getAlarmEvent(ISC.Instrument.Driver.AlarmEvent)">
            <summary>
            </summary>
            <remarks>
            This is made virtual to allow subclasses to override it and then add addition information 
            to the GasOperation. i.e., the intention is that subclassing driver would override this method,
            and its overridden implementation would first call this base-class implementation, and then 
            add additional information to the GasOperation, perhaps by reading addition registers that 
            are specific to that driver's instrument type. e.g...
            </remarks>
            <param name="alarmEvent"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.clearAlarmEvents">
            <summary>
            Deletes this instruments stored AlarmEvents.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getAlarmEvents"/>
            <seealso cref="T:ISC.Instrument.Driver.AlarmEvent"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getGasOperations">
            <summary>
            Returns this instrument's logged manual gas operations.
            </summary>
            <returns>If the instrument does not support logging of manual operations, an empty array is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getGasOperation(ISC.Instrument.Driver.GasOperation)">
            <summary>
            </summary>
            <remarks>
            This is made virtual to allow subclasses to override it and then add addition information 
            to the GasOperation. i.e., the intention is that subclassing driver would override this method,
            and its overridden implementation would first call this base-class implementation, and then 
            add additional information to the GasOperation, perhaps by reading addition registers that 
            are specific to that driver's instrument type. e.g...
            </remarks>
            <param name="go"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.clearGasOperations">
            <summary>
            Deletes this instruments logged manual gas operations.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getGasOperations"/>
            <seealso cref="T:ISC.Instrument.Driver.GasOperation"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBaseUnitInfos">
            <summary>
            For area monitor modules, this method returns the log of base unit information that the module has recorded.
            </summary>
            <returns>If the instrument type does not support logging of base unit info, then an empty array is returned.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.clearBaseUnitInfos"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.clearBaseUnitInfos">
            <summary>
            For area monitor modules,this method clears the log of base unit information that the module has recorded.
            <para>Will do nothing for instrument types that don't have a base unit log.</para>
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getBaseUnitInfos"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isInstrumentIscProperty">
            <summary>
            Indicates whether or not this instrument is owned by ISC (such as a rental unit).
            </summary>
            <returns>Not all instrument support this feature. For those that don't, False is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Normally returns true for all sensors, except Oxygen, Hydrogen, and combustibles.
            See derived classes for specifics.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Normally returns true for all sensors, except Oxygen, Hydrogen, and combustibles.
            See derived classes for specifics.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorSetupDate(System.Int32)">
            <summary>
            Returns this sensor's Setup timestamp.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getHygiene">
            <summary>
            Returns all of this instrument's stored hygiene data.
            </summary>
            <returns>Returned ArrayList contains DriverInstrumentDatalogSession objects</returns>
            <seealso cref="T:ISC.Instrument.Driver.DriverInstrumentDatalogSession"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.clearHygiene">
            <summary>
            Deletes all of this instrument's stored hygiene data.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorGasReading(System.Int32)">
            <summary>
            Takes a gas reading from the specified sensor.
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorSpanReserve(System.Int32)">
            <summary>
            Returns the span reserve for the specified sensor that was calculated
            the last time it was calibrated.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getPeakReading(System.Int32)">
            <summary>
            Returns the peak gas reading the specified sensor has taken.
            This will be the maximum peak for toxic sensors,
            and the minimum (depletion) peak for O2.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorHighReading(System.Int32)">
            <summary>
            Returns the highest gas reading the specified sensor has taken.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorHighReading(System.Int32,System.Double)">
            <summary>
            Sets the highest gas reading the specified sensor has taken
            to the specified value.
            </summary>
            <remarks>Not sure how this differs from getPeakReading?</remarks>
            <param name="sensorPos"></param>
            <param name="reading"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorLowReading(System.Int32)">
            <summary>
            Returns the lowest gas reading the specified sensor has taken.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorLowReading(System.Int32,System.Double)">
            <summary>
            Sets the lowest gas reading the specified sensor has taken
            to the specified value.
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorPositions">
            <summary>
            Returns an array of SensorPositions that indicate the installation
            status (istalled or not) of all sensor positions in the instrument.
            </summary>
            <returns>The returned array will always be equal to the sensor capacity of the instrument</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensitivityHiLimit(System.Int32)">
            <summary>
            Returns a sensor's "Sensitivity High Limit" value.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensitivityLoLimit(System.Int32)">
            <summary>
            Returns a sensor's "Sensitivity Low Limit" value.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting.
            </summary>
            <remarks>
            This is an alarm for a gas level that is lower than the low alarm.
            <para>
             This method should only be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGasAlertFeature"/> returns true.
            </para>
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Alert alarm.</returns>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGasAlertFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting.
            </summary>
            <remarks>
            This is an alarm for a gas level that is lower than the low alarm.
            <para>
             This method should only be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGasAlertFeature"/> returns true.
            </para>
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Alert alarm.</param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGasAlertFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns sensor's current STEL Alarm setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Changes sensor's current TWA Alarm setting.
            </summary>
            <param name="sensorPos"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorBaseline(System.Int32)">
            <summary>
            Returns sensor's current Baseline.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorSensitivity(System.Int32)">
            <summary>
            Returns sensor's 'sensitivity'. a.k.a. 'span coefficient'.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTWATimeBase">
            <summary>
            Returns instrument's TWA TimeBase.
            </summary>
            <returns>Value is in number of hours.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setTWATimeBase(System.Int32)">
            <summary>
            Sets instrument's TWA TimeBase.
            </summary>
            <param name="twaBaseHours">Number of hours</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTwaReading(System.Int32)">
            <summary>
            Returns sensor's current TWA level.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getStelReading(System.Int32)">
            <summary>
            Returns sensor's current STEL level.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns>Degrees celsius</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns>Degrees celsius</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTime">
            <summary>
            Returns the instrument's current date/time from its RTC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setTime(System.DateTime)">
            <summary>
            Sets the instrument's RTC to specified date/time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatteryRunTime">
            <summary>
            Returns the amount of run time for the currently installed battery.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTotalRunTime">
            <summary>
            Returns the total amount of run time for the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTotalAlarmTime">
            <summary>
            Returns the total amount of alarm time for the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.clearInstrumentErrors">
            <summary>
            Clears the log of errors that the instrument has recorded.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentDiagnostics">
            <summary>
            Returns instrument's diagnostic information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getChargePhase">
            <summary>
            Returns the instrument's charging status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getDeadbandValue(System.Int32)">
            <summary>
            TODO - need a definition.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getFilterAlgorithm(System.Int32)">
            <summary>
            TODO - need a definition.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getFilterBand(System.Int32)">
            <summary>
            TODO - need a definition.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getFilterLevel(System.Int32)">
            <summary>
            The current-to-voltage resistance value in the DAS signal amp circuit.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getHardwareVersion">
            <summary>
            Retrieves the instrument's hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTemperatureCompensation(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <param name="tableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getMeasurementRange(System.Int32)">
            <summary>
            Returns a sensor's maximum possible reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getMfgLocation">
            <summary>
            Returns the manufacturing location of the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Returns the calibration gas concentration that a sensor is currently
            set to.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorSupportedCalGasConc(System.Int32)">
            <summary>
            For sensors allowing only particular cal gas concentrations (e.g. only 25 or 50),
            this method returns the concentrations that the sensor supports, otherwise null.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            The values in the returned array are the only concentrations allowed
            for the specified sensor.
            <para>
            A null will be returned if the specified sensor has no limitation
            on what concentration is allowed.
            </para>
            <para>
            Note that for most instrument types, this method will return null.
            </para>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe/allowable to call setSensorCalGasCode for
            the specified sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <param name="concentration"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getTemperature">
            <summary>
            Returns the instrument's current temperature reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getMinTemperature">
            <summary>
            Returns the instrument's highest seen temperature reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getMaxTemperature">
            <summary>
            Returns the instrument's lowest seen temperature reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBumpThreshold">
            <summary>
            Returns the instrument's current Bump Threshold.
            </summary>
            <remarks>
            'Bump Threshold' is the percentage of gas the instrument needs 
            to see in order to pass a bump test.
            </remarks>
            <returns>Returned value is a percentage.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setBumpThreshold(System.Int32)">
            <summary>
            Sets the instrument's current bump threshold.
            </summary>
            <remarks>
            'Bump Threshold' is the percentage of gas the instrument needs 
            to see in order to pass a bump test.
            </remarks>
            <param name="threshold">Value must be a percentage</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBumpTimeoutSeconds">
            <summary>
            Returns the instrument's current bump bimeout setting.
            </summary>
            <remarks>
            'Bump Timeout' is the maximum amount of time a bump test
            is allowed to run before it times out and fails.
            </remarks>
            <returns>Returned value is in seconds..</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Sets the instrument's current bump bimeout setting.
            </summary>
            <remarks>
            'Bump Timeout' is the maximum amount of time a bump test
            is allowed to run before it times out and fails.
            </remarks>
            <returns>Value is in seconds..</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBumpInterval">
            <summary>
            Returns the instrument's current bump interval setting.
            </summary>
            <remarks>
            'Bump Interval' is how often the instrument must be bumped.
            Similar to 'cal interval'.
            </remarks>
            <returns>Returned value is in days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setBumpInterval(System.Double)">
            <summary>
            Sets the instrument's current bump interval setting.
            </summary>
            <remarks>
            'Bump Interval' is how often the instrument must be bumped.
            Similar to 'cal interval'.
            </remarks>
            <returns>Value is in days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's maintenance indicator interval
            </summary>
            <remarks>
            Number of minutes between the sounding of the bump,cal or dock overdue indicators
            </remarks>
            <returns>Returned value is in minutes.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's maintenance indicator interval
            </summary>
            <remarks>
            Number of minutes between the sounding of the bump,cal or dock overdue indicators.
            </remarks>
            <returns>Value is in minutes.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getZeroLimit(System.Int32)">
            <summary>
            Returns the number of display counts for which the sensor can be 
            successfully zeroed at the current sensitivity
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensors previous overrange flag.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.pauseSensor(System.Int32,System.Boolean)">
            <summary>Pause/unpause the specified sensor.</summary>
            <remarks>When paused, sensor does not read gas.</remarks>
            <param name="sensorPos"></param>
            <param name="paused">True to pause, False to un-pause.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a specific sensor.
            </summary>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isSensorEnabled(System.Int32)">
            <summary>
            Determine if a specific sensor is enabled or disabled.
            </summary>
            <param name="sensorPos"></param>
            <returns>True if enabled, else false.
            If instrument does
            not support enabling/disabling its sensors, then will always return true.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.beginInstrumentZeroing">
            <summary>
            Begin zeroing of instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.endInstrumentZeroing">
            <summary>
            End zeroing of instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isInstrumentZeroing">
            <summary>
            Indicates if instrument is currently zeroing any sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isSensorZeroing(System.Int32)">
            <summary>
            Indicates if specified sensor is currently zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of Last zeroing operation on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done in driver prior to bump testing an
            instrument, it should be done here.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done in driver after to bump testing an
            instrument, it should be done here.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.beginSensorBump(System.Int32)">
            <summary>
            Begin Bump Test on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to bump.</param>
            <remarks>Does nothing at the base class.</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.beginInstrumentCalibration">
            <summary>
            Put instrument into calibration mode.  
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.endInstrumentCalibration">
            <summary>
            Take instrument out of calibration mode.  This routine should be called
            either at the end of calibrating all sensors, or to abort calibration
            mode while in the middle of calibrating a particular sensor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on specified sensor.
            </summary>
            <param name="sensorPositions">The positions of the sensors to calibrate.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.beginSensorCalibration(System.Int32)">
            <summary>
            Begin calibration on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to calibrate.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.endSensorCalibration(System.Int32)">
            <summary>
            End calibration on specified sensor.
            </summary>
            <param name="sensorPos">Sensor currently calibrating.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operation on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operation on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getLastCalibrationTime(System.Int32)">
            <summary>
            Returns the last date/time the specified sensor was calibrated.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatteryManufacturer">
            <summary>
            Returns the battery's manufacturer.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If this instrument does not have a smart battery.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSmartBatteryFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatteryPartNumber">
            <summary>
            Returns the battery's part number.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If this instrument does not have a smart battery.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSmartBatteryFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatterySerialNumber">
            <summary>
            Returns the battery's serial number.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If this instrument does not have a smart battery.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSmartBatteryFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatterySetupTech">
            <summary>Return's the initials of the instrument's setup technician.</summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If this instrument does not have a smart battery.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSmartBatteryFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatterySetupDate">
            <summary>Return's the timestamp for when this instrumnt was originally setup at the factory.</summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If this instrument does not have a smart battery.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSmartBatteryFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatteryType">
            <summary>
            Returns the battery's type code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatteryVoltage">
            <summary>
            Returns the battery's last known voltage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBatterySoftwareVersion">
            <summary>
            Returns the battery's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If this instrument does not have a smart battery.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSmartBatteryFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentPartNumber">
            <summary>Return's the instrument's part number.</summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getJobNumber">
            <summary>Return's the instrument's setup Job number.</summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the type of gas this sensor is configured to detect.
            </summary>
            <remarks>
            Usually only applicable to LEL sensors that have configurable
            correlationf factors, and PID sensors that have configurable 
            response factors.
            <para>
            It is only safe to call this if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </para>
            </remarks>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            This is typically only callable for combustible sensors that have "correlation factors", 
            or PID sensors that have "response factors".
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0091"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorMeasurementType(System.Int32)">
            <summary>
            Get the sensor's measurement units.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSoftwareVersion">
            <summary>
            Retrieves the instrument's software version.
            </summary>
            <returns>Formatted software version.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns>Formatted software version.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the instrument to a specific language.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getLanguage">
            <summary>
            Returns the language that the instrument is currently set to.
            </summary>
            <returns>
            LanguageId.None will be returned by instrument types
            that have no language setting.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBacklightOption">
            <summary>
            Returns this instrument's current backlight setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            Change instrument's current backlight setting.
            </summary>
            <param name="inBLO"></param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasBacklightConfigFeature"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getRecordingInterval">
            <summary>
            Returns the instrument's current recording interval.
            </summary>
            <returns>Number of seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setRecordingInterval(System.Int32)">
            <summary>
            Changes the instrument's recording interval.
            </summary>
            <param name="intervalSeconds">Number of seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSecurityCode">
            <summary>
            Returns the instrument's current security code. e.g. "access code" or "password".
            </summary>
            <returns>Empty string if instrument currently has no security code
            or does not support a security code feature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSecurityCode(System.String)">
            <summary>
            Changes the instrument's current security code.
            </summary>
            <param name="securityCode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getActiveSite">
            <summary>
            Return the currently 'active' site name.
            </summary>
            <returns>An empty string is returned if the instrument currently has no active site,
            or if the instrument does not support having an active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setActiveSite(System.String)">
            <summary>
            Set the currently 'active' site to the specified string.
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSites">
            <summary>
            Returns the instrument's list of site names.
            </summary>
            <returns>An empty array is returned if the instrument does not support having a list of sites.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSites(System.String[])">
            <summary>
            Changes the instrument's list of site names.
            </summary>
            <param name="sites">Array of strings. Pass an empty array to delete all sites.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getActiveUser">
            <summary>
            Return the currently 'active' user name.
            </summary>
            <returns>An empty string is returned if the instrument currently has no active user,
            or if the instrument does not support having an active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setActiveUser(System.String)">
            <summary>
            Set the currently 'active' user to the specified string.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getUsers">
            <summary>
            Returns the instrument's list of user names.
            </summary>
            <returns>An empty array is returned if the instrument does not support having a list of users.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setUsers(System.String[])">
            <summary>
            Changes the instrument's list of user names.
            </summary>
            <param name="users">Array of strings. Pass an empty array to delete all users.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getActiveCompany">
            <summary>
            Return's the instrument's current "company" name..
            </summary>
            <returns>Empty string if not specified or instrument does not have this field.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setActiveCompany(System.String)">
            <summary>
            Changes the instrument's current "company" name.
            </summary>
            <param name="company"></param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxCompanyLength"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getCompanyMessage"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxCompanyMessageLines"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxCompanyMessageLineLength"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxCompanyMessageLines"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxCompanyMessageLineLength"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <remarks>
            SGF  Aug-04-2009  DSW-331 (rev. 2) - "GBPlus may reset when docked and under test; DS needs to be able to detect this"
            </remarks>
            <returns>True if instrument is resetting; else false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <remarks>
            SGF  Aug-04-2009  DSW-331 (rev. 2) - "GBPlus may reset when docked and under test; DS needs to be able to detect this"
            </remarks>
            <param name="isFault"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument current error code.
            </summary>
            <returns>Instrument Current Error Code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout.
            </summary>
            <returns>Interval in seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout.
            </summary>
            <param name="timeout">Interval in seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.GetResolution(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorResolution(System.Int32)">
            <summary>
            Retrieves the sensor resolution.
            </summary>
            <param name="sensorPos">Sensor position. Not used in GBPlus instrument.</param>
            <returns>A 'Resolution' object representing the sensor's resolution.
            Resolution.DecimalPlaces property returns the number of decimal places the sensor is
            programmed for.  e.g. "2".
            Resolution.Decimals property returns a double (e.g. 0.001) that can be applied to an 
            integer value to convert it to decimal.
            e.g. 25000 * 0.001 = 2.5
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getCountryOfOrigin">
            <summary>
            Returns the instrument's current "Country of Origin" setting.
            </summary>
            <returns>
            This default implementation returns <see cref="F:ISC.Instrument.TypeDefinition.Country.Undefined"/>.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version. a.k.a. the "hardware platform".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Sets the wireless module's transmission interval.
            </summary>
            <remarks>
            <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasWirelessTransmissionIntervalConfigFeature"/> should be called first
            to determine if it is safe to call this method.
            </remarks>
            <param name="interval">Interval, usually in seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessNetworkDisconnectDelay"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <remarks>
            Each time the message hops from one instrument to the next the value is decremented
            until the value is 0 - then the message is no longer forwarded.
            </remarks>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessMessageHops"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <remarks>
            Each time the message hops from one instrument to the next the value is decremented
            until the value is 0 - then the message is no longer forwarded.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessMessageHops(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessMaximumPeers"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessMaximumPeers(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band;
            value will correspond to bit number in active channel mask.
            </remarks>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band;
            value will correspond to bit number in active channel mask.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band.
            </remarks>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessActiveChannelMask">
            <summary>
            Returns a mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns>
            Each bit of this returned value is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Bits are set to 1 for the allowed channels, or are set to 0 for the disallowed channels.
            </para>
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessActiveChannelMask(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasWirelessListeningPostChannelMaskFeature"/> returns false.
            </remarks>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessListeningPostChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasWirelessListeningPostChannelMaskFeature"/> returns false.
            </remarks>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Bits are set to 1 for the allowed channels, or are set to 0 for the disallowed channels.
            </para>
            </param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessListeningPostChannelMask(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>
            This is also known as "Teammate Lost."
            </remarks>
            <param name="seconds">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessPeerLostThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>
            This is also known as "Teammate Lost."
            </remarks>
            <returns>Number of seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessPeerLostThreshold(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessNetworkLostThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns>Number of seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessNetworkLostThreshold(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessReadingsDeadband"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessReadingsDeadband(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessFeatures"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessFeatures(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessAlarmMask">
            <summary>
            Returns the Wireless Alarm Mask
            </summary>
            <returns>The bits that are currently set.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessBindingTimeout(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessBindingTimeout"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth scripts version number.
            </summary>
            <returns>The bluetooth software version containing the version and the build number</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getBluetoothLoneWorkerOkMessageInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.enableWirelessFeature(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.isWirelessFeatureEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.enableBluetoothFeature(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.isBluetoothFeatureEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.enableBluetoothFeature(System.Boolean)"/>        
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.isBluetoothFeatureEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getMagneticFieldDuration">
            <summary>
            Returns the instrument's current "Magnetic field duration" setting.
            </summary>
            <remarks>
            If the instrument detects no Modbus communications within this number of seconds after its
            reed switch indicates it's been docked, then the instrument disregards the reed switch indication
            as a "false docking".  This is to avoid problems where reed switch sometimes closes when usser
            carries the instrument into an environment with a strong magnetic field.
            then the instrument considers the dock.
            <para>
            <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxMagneticFieldDuration"/> should be called first
            to determine if it is safe to call this method.
            </para>
            </remarks>
            <returns>Value is in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setMagneticFieldDuration(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setMagneticFieldDuration(System.Int32)">
            <summary>
            Changes the instrument's "Magnetic field duration" setting.
            </summary>
            <remarks>
            If the instrument detects no Modbus communications within this number of seconds after its
            reed switch indicates it's been docked, then the instrument disregards the reed switch indication
            as a "false docking".  This is to avoid problems where reed switch sometimes closes when a user
            carries the instrument into an environment with a strong magnetic field.
            then the instrument considers the dock.
            <para>
            <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxMagneticFieldDuration"/> should be called first
            to determine if it is safe to call this method.
            </para>
            </remarks>
            <param name="duration">Value is in seconds and must be within range defined by 
            MinMagneticFieldDuration"/&gt; and MaxMagneticFieldDuration.
            Otherwise, specified value will be auto-adjusted to the correct value
            (either MinMagneticFieldDuration or MaxMagneticFieldDuration).
            adjusted to be within the range.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getMagneticFieldDuration"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinMagneticFieldDuration"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxMagneticFieldDuration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <remarks>
            This method should only be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/> returns a value greater than zero.
            </remarks>
            <param name="alarmMessages">
            The passed-in array should not exceed <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxSensorCapacity"/>.
            If the array exceeds MaxSensorCapacity, then the extra elements will be ignored.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getAlarmActionMessages"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessageLineLength"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <remarks>
            This method should only be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/> returns a value greater than zero.
            </remarks>
            <returns></returns>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.MakeAlarmActionModbusString(System.Collections.Generic.List{System.String})">
            <summary>
            Helper method for setAlarmActionMessages(). Appends the strings of the passed-in list
            together into a single string that is correctly padded with spaces for writing
            to the modbus registers.
            </summary>
            <param name="messageList"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.MakeAlarmActionMessageFromString(System.String)">
            <summary>
            Helper method for getAlarmActionMessages(). Breaks the passed-in string up into multiple
            strings and returns them in a List. The string is broken up based on MaxAlarmActionMessageLineLength.
            </summary>
            <param name="str"></param>
            <returns>
            The returned list is guaranteed to return a number of strings equal to 
            MaxAlarmActionMessageLines, even if those strings are all empty.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getOomWarningInterval">
            <summary>
            The amount of time to will elapse from when no motion is first detected, until the OOM ("Out-of-Motion") Warning is initiated.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasOomWarningIntervalConfigFeature"/> returns false.
            </remarks>
            <returns>Returned value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasOomWarningIntervalConfigFeature"/> returns false.
            </remarks>
            <param name="interval">Value is in seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets a custom encryption key for the wireless network.
            </summary>
            <param name="key">A hexadecimal string representing the encryption key's bytes.</param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if passed-in array is not of the correct length.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the custom encryption key for the wireless network.
            </summary>
            <returns>A hexadecimal string representing the encryption key's bytes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setWirelessCustomEncryptionKey(System.String)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGpsFeature"/> returns false.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setGpsReadingInterval(System.Int32)"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGpsFeature"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinGpsReadingInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxGpsReadingInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGpsFeature"/> returns false.
            </remarks>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getGpsReadingInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGpsFeature"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinGpsReadingInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxGpsReadingInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getSensorBiasStatus">
            <summary>
            Indicates if all the sensors that need to be biased are, and the instrument is
            ready for gas operations (zero, calibrate, bump, etc.).
            </summary>
            <remarks>
            Some sensors, such as VentisPro's lead-free O2 sensors, are biased sensors that require constant power to get accurate readings.
            If the instrument's battery dies, then when the instrument is charged enough that the sensors can be turned on again,
            the biased sensors will likely be in OR for some time. Once the readings are low enough that the sensor is no longer
            in OR, it will still require some additional time before the readings are accurate enough where a reliable
            calibration or bump can be performed. Calibrating a biased sensor too soon can result in an improper calibration.
            <para>
            Docking stations needing to perform a gas operation (bump test, zeroing, calibration, etc.), should first call this getSensorBiasMethod
            before to determine if any sensors need biasing.  If the method indicates that biasing is currently in progress, then
            this method should be repeated called until the biasing either completed, or it fails.
            </para>
            <note>
            This method can be called for all instrument types.  It will merely return SensorBiasStatus.Ready for instruments that do
            not use biased sensors.
            </note>
            <note>
            BEFORE CALLING THIS METHOD, IT IS IMPORTANT TO FIRST CALL <see cref="M:ISC.Instrument.Driver.InstrumentDriver.turnOnSensors(System.Boolean,System.Boolean)"/>,
            IN ORDER TO FIRST FULLY WARM UP THE SENSORS.
            </note>
            </remarks>
            <returns>
            Docking stations should continually call this method while InProgress is returned.
            <para>Once Ready is returned, then the gas operation can proceed.</para>
            <para>If Failed is returned, then the gas operation should not proceed.</para>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentOption(System.String)">
            <summary>
            Returns an InstrumentOption for the specified option code,
            as it is currently set on the instrument.
            </summary>
            <param name="code">Code specifying which option to return.
            e.g. "CBEEP" for Confidence Beep option.</param>
            <returns>If instrument does not support the specified option, then
            a null is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentOptions">
            <summary>
            Returns all options for for the instrument, as they are currently set on the instrument.
            </summary>
            <returns>Options in the hashtable are keyed on their code.
            e.g. "CBEEP" for Confidence Beep option."</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.GetInstrumentOption(System.String)">
            <summary>
            Returns the current setting for the specified option.
            </summary>
            <param name="code">Code specifying which option to return.
            e.g. "CBEEP" for Confidence Beep. option</param>
            <returns>If instrument does not support the specified option, then
            a null is returned.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.GetInstrumentOptions">
            <summary>
            Returns the instrument's CURRENT options' settings.
            </summary>
            <returns>The returned list will be a mixture of InstrumentBooleanOptions
            and InstrumentMultiOptions.  It is up to the caller to check the type
            of each object in the list and handle them appropiately</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.LoadMultiOption(ISC.Instrument.TypeDefinition.InstrumentMultiOption,System.UInt16)">
            <summary>
            </summary>
            <param name="multiOption"></param>
            <param name="registerOffset"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.SetInstrumentOptions(System.Collections.ICollection)">
            <summary>
            Set this instrument's options to be equal to the passed-in list of
            options.
            </summary>
            <param name="options">Collection of InstrumentBooleanOptions and
            InstrumentMultiOptions.  The best way to get this list before calling
            this method it to first call getInstrumentOptions().</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.SetOptions(System.Collections.ICollection,System.UInt16)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="registerOffset"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.setInstrumentOption(ISC.Instrument.TypeDefinition.InstrumentOption)">
            <summary>
            Writes the passed-in InstrumentOption's settings to the instrument.
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.SetOption(ISC.Instrument.TypeDefinition.InstrumentOption,System.UInt16)">
            <summary>
            Writes the passed-in InstrumentOption's settings to the instrument.
            </summary>
            <param name="option"></param>
            <param name="registerOffset">Used for profile options.  0 for instrument options</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.SetBooleanOption(ISC.Instrument.TypeDefinition.InstrumentBooleanOption,System.UInt16)">
            <summary>
            Writes the passed-in BooleanOption's settings to the instrument.
            </summary>
            <param name="option"></param>
            <param name="registerOffset">Used for profile options.  0 for instrument options</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriver.SetMultiOption(ISC.Instrument.TypeDefinition.InstrumentMultiOption,System.UInt16)">
            <summary>
            Writes the passed-in MultiOption's settings to the instrument.
            </summary>
            <param name="multiOption"></param>
            <param name="registerOffset">Used for profile options.  0 for instrument options</param>
        </member>
        <member name="E:ISC.Instrument.Driver.InstrumentDriver.Progress">
            <summary>
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDriver.Definition">
            <summary>
            Returns an <see cref="T:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition"/> that can be used to obtain "definition" information about the instrument./&gt;
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDriver.HygieneCorrupt">
            <summary>
            Indicates whether hygiene information was found to be corrupt.
            Reset to false everytime getHygiene is called.  May be set to true upon completion of that routine.
            </summary>
            <remarks>
            Dev note: As of 4/2012, this property seems to only be used by DS2 but not by iNetDS or ISAS.
            Why does DS2 need this but other software does not? Or perhaps they should be looking at it too?
            There seems to be lot of underlying code trying to manage when this property needs set to true.
            Would be nice to eliminate it if only DS2 needs it and make DS2 work like other software.
            </remarks>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDriver.DateTimeProvider">
            <summary>
            By default, this property is set to return a DefaultDateTimeProvider.
            Applications can override this, though, and set there own DateTimeProvider.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDriver.HasShutdownFeature">
            <summary>
            Indicates whether or not the instrument can be turned off.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.shutdown"/>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDriver.TemperatureCompensationTableSize">
            <summary>
            Returns number of Temperature Compensation values for the instrument.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getTemperatureCompensation(System.Int32,System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 9600 or 115200 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.connect(System.Boolean)">
            <summary>
            For this instrument type, this method verifies that the instrument
            is able to communicate. It does NOT turn on the instrument, though, as the instrument
            automatically powers on when it's docked and charged enough, and it cannot be
            powered off when it is docked.
            </summary>
            <remarks>
            This instrument type will communicate without being "turned on" when it knows it is docked.
            This method merely verifies that the instrument is able to communicate. (The instrument would
            fail to communicate, for example, if its battery is dead.)
            </remarks>
            <param name="batching">Ignored by this instrument type.  For this instrument type, a "batched connection" is <b>always</b> established.
            <note>We can get away with always doing "batched connections", for this instrument type because once
            the instrument is set to a high baud rate, we don't have to worry about it "timing out" and reverting
            to a slower baud rate if nothing talks to it for a while.  i.e., once it goes to higher baud rate, it will stay at that baud rate.
            </note>
            <note>Additional caveat: The instrument may revert to a slow baud rate if sees "garbage" Irda
            packets being sent to it, as it assumes the garbage data might be something trying to talk to it
            at a slow baud rate. When this happens (rarely), the driver is able to recover and re-connect relatively quickly.
            </note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.shutdown">
            <summary>
            </summary>
            <remarks>
            This instrument type cannot be commanded to power down when it's docked.
            Instead, for this instrument type, this method tells the instrument to go to 
            <see cref="F:ISC.Instrument.Driver.OperatingMode.Charging"/> mode, which should cause the instrument
            to turn of its sensors (if they've been turned on) so that it will charge faster.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.turnOnSensors(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            For this instrument type, this method doesn't do anything, since the instrument automatically
            saves any changed settings to flash when it is undocked.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            Commands the instrument to power on/off its sensors.
            </summary>
            <remarks>
            When called, this method tells the instrument to power on its sensor by setting
            its operating mode <see cref="F:ISC.Instrument.Driver.OperatingMode.Running"/>.
            <para>
            It powers off the sensors by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Charging"/>.
            </para>
            </remarks>
            <param name="on">Specify true to turn on, false to turn off.</param>
            <param name="wait">Only applies if "on" parameter is true; otherwise, it is ignored.
            <para>If this paramter is True, then after the the instrument is commanded to warmup its
            sensors, it will wait for the warmup to complete before returning.</para>
            <para>If this paramter is False, then after the instrument is commanded to warmup its
            sensors, this method will immediately return; i.e., it will not wait for the warmup to complete.
            The intention is to to have the instrument warm up its sensors in "the background" while
            the calling application continues to communicate with the instrument for other things.
            </para>
            </param>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">Thrown if instrument fails to warmup.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enables/disables a sensor.
            </summary>
            <remarks>
            This method does nothing for this instrument type
            since the instrument does not support enabling/disabling of 
            sensors. They are always enabled.
            </remarks>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isSensorEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true. Sensors in this instrument type cannot be
            enabled or disabled; they're always enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getEquipmentSubType">
            <summary>
            Returns the instrument's sub-type.
            </summary>
            <returns>
            The "sub type" of an MX4 is determined by what version of firmware it is running.
            This method looks at the instrument's (<see cref="M:ISC.Instrument.Driver.Mx4Driver.getSoftwareVersion">software version</see>/&gt;)
            and returns an <see cref="T:ISC.Instrument.TypeDefinition.EquipmentSubType"/> value based on what that software version is.
            <para>
            Possible MX4 sub-types are as follows...
            </para>
            <list type="bullet">
            <item><see cref="F:ISC.Instrument.TypeDefinition.EquipmentSubType.Mx4iQuad"/></item>
            <item><see cref="F:ISC.Instrument.TypeDefinition.EquipmentSubType.Mx4Ventis"/></item>
            <item><see cref="F:ISC.Instrument.TypeDefinition.EquipmentSubType.Mx4VentisLs"/></item>
            <item><see cref="F:ISC.Instrument.TypeDefinition.EquipmentSubType.Mx4Scout"/></item>
            </list>
            </returns>
            <seealso cref="T:ISC.Instrument.TypeDefinition.EquipmentSubType"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSoftwareVersion">
            <summary>
            Retrieves the instrument software version.
            </summary>
            <returns>Formatted software version</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getHardwareVersion">
            <summary>
            Returns the instrument's hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument's serial number
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getInstrumentPartNumber">
            <summary>
            Returns the instrument's part number.
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getJobNumber">
            <summary>
            Returns the instrument's job number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getMfgDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSetupDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSetupTech">
            <summary>
            Retrieves the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setOperatingMode(ISC.Instrument.Driver.OperatingMode,System.Int32)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled">Ignored.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            For this instrument type, the maximum size of the returned array is 30.
            An empty array is returned if the instrument has no logged errors.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting
            for TWA calculations.
            </summary>
            <returns>Time base setting (in hours)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting used for TWA calculations
            </summary>
            <param name="timeBaseHours">Time base setting (in hours)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Access code</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getMinTemperature">
            <summary>
            Get minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getTime">
            <summary>
            Get the instrument's current time (year, month, day, hour, seconds).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setTime(System.DateTime)">
            <summary>
            Set fixed monitor's sensors to current time (year, month, day, hour, minutes)
            to the passed-in time.
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. 21.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.beginInstrumentZeroing">
            <summary>
            Begin zeroing of specified sensor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.endInstrumentZeroing">
            <summary>
            End Zering of instrument
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isInstrumentZeroing">
            <summary>
            Indicates if instrument is currently zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isSensorZeroing(System.Int32)">
            <summary>
            Indicates if specified sensor is currently zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            </param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.beginInstrumentCalibration">
            <summary>
            Intended to put instrument into calibration mode.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on the specified sensor.
            </summary>
            <param name="sensorPositions">The sensor position to calibrate.
            (For this instrument type, only the first element in the passed-in eenumerable is used.)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.endInstrumentCalibration">
            <summary>
            Intended to End/abort calibration mode on instrument.
            On the MX4, this places the instrument back in "charging" mode.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by this instrument type since instrument only has 1 sensor</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by GBPlus since instrument only has 1 sensor</param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getLastBumpTime(System.Int32)">
            <summary>
            Returns the last time the sensor was bumped, either by hand or via DS2/cal station.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>
            For iQuad only, this method does nothing.
            For other MX4 instrument types, this method
            puts the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.Bumping">bump mode</see>.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>
            This method does nothing for this instrument type.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getPeakReading(System.Int32)">
            <summary>
            Returns a sensor's peak reading
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Gas Alert alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Gas Alert alarm. Must not exceed the low alarm threshold.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCalGasString(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getTwaReading(System.Int32)">
            <summary>
            Get the TWA Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getStelReading(System.Int32)">
            <summary>
            Get the STEL Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorPartNumber(System.Int32)">
            <summary>
            Retrieves the sensor part number.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Sensor part number. Max of 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorRawSerialNumber(System.Int32)">
            <summary>
            Returns a sensor module's serial number.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorSpanReserve(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getMeasurementRange(System.Int32)">
            <summary>
            Maximum allowable gas reading of the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getConfigurationVersion">
            <summary>
            Get the Instrument Configuration Map Version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getMfgLocation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBumpTimeoutSeconds">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="threshold"></param>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="seconds">
            Value must be between MinBumpTimeout and MaxBumpTimeout.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpTimeout or MaxBumpTimeout).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold">
            A percentage value that must be between MinBumpThreshold and MaxBumpThreshold.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpThreshold or MaxBumpThreshold).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <returns>Returned value will be in 0.5 day increments.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setBumpInterval(System.Double)">
            <summary>
            Set the Bump Interval for the instrument.
            </summary>
            <param name="interval">Number of days, inn 0.5 day increments.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>BatteryVoltage</item>
            <item>BatteryStatus</item>
            <item>Speaker1Voltage</item>
            <item>VibratingAlarmVoltage</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorConfigVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getCalTimeoutSeconds(System.Int32)">
            <summary>
            Get Calibration timeout for specified sensor
            </summary>
            <param name="sensorPos">The position of the sensor to check.</param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorMeasurementType(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.GetSensorMode(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorPositions">
            <summary>
            
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>false for Oxygen, Hydrogen, and combustibles.  Otherwise, true is returned.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>false for Oxygen, Hydrogen, and combustibles.  Otherwise, true is returned.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval.
            </summary>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval. Not supported by this instrument.
            </summary>
            <param name="intervalSeconds">Ignored.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBacklightOption">
            <summary>
            Returns this instrument's current backlight configuraiton option
            </summary>
            <returns>Always returns 'Timed' for this instrument.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            
            </summary>
            <param name="inBLO"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getLanguage">
            <summary>
            Returns the language that the instrument is currently set to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the instrument to a specific language.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getHygiene">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.clearHygiene">
            <summary>
            Clears the datalog.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensitivityHiLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensitivityLoLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorSensitivity(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorPreconditionTime(System.Int32)">
            <summary>
            Get the Precondition Time for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Number of seconds.
            Zero is returned if sensor should not be preconditioned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            Get the Precondition Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            Get the Calibration Flow Rate for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            Get the Bump Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getZeroLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorSetupDate(System.Int32)">
            <summary>
            Gets the sensors setup date.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorBaseline(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBatteryRunTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getTotalAlarmTime">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getFilterLevel(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns zero for this instrument type.  Filtering is always a simple average.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBatteryType">
            <summary>
            Return this instrument's battery type code.  
            </summary>
            <returns>
            A code with format "BP00xx" code.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBatteryVoltage">
            <summary>
            Returns the battery's voltage.
            </summary>
            <remarks>
            The MX6 monitors the battery voltage and has a running buffer with the last few readings averaged,
            so the value returned is close to real time, but not exactly.
            </remarks>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSensorHardwareVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns 0 since this instrument's sensors don't support a "hardware version".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <remarks>
            Note that there is no "getSensorBumpFault"
            that reads the same register that this "set" function writes to.  In order to determine if
            a sensor is in bump fault, the SensorMode for the sensor should be looked at.
            </remarks>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument's current error code
            </summary>
            <returns>Instrument's current error code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns>Timeout in seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessSoftwareVersion">
            <summary>
            Returns wireless module's software version in format "version.revision".  e.g. "1.2".
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Thrown if instrument is not a Ventis-LS.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if instrument is not a Ventis-LS.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if instrument is not a Ventis-LS.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Changes the wireless module's transmission interval.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type,
            because this is a factory-only setting for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets a custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessCustomEncryptionKey(System.String)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessMessageHops"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessMessageHops(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessMaximumPeers"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessMaximumPeers(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessActiveChannelMask">
            <summary>
            Returns a mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessPeerLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessPeerLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessNetworkLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessNetworkLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessReadingsDeadband"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessReadingsDeadband(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessFeatures"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessNetworkDisconnectDelay"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth software version number.
            </summary>
            <returns>The bluetooth software version and build number</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessBindingTimeout(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getWirelessBindingTimeout"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessAlarmMask">
            <summary>
            Returns the wireless module's alarm mask
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getBluetoothLoneWorkerOkMessageInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.enableWirelessFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.isWirelessFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.enableBluetoothFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.enableBluetoothFeature(System.Boolean)"/>        
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setWirelessFeatures(System.UInt16)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval
            </summary>
            <returns>Interval in minutes</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setMaintenanceIndicatorInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <param name="interval">Interval in minutes</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getMaintenanceIndicatorInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.setGpsReadingInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Driver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4Driver.getGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.Mx4Driver.HasShutdownFeature">
            <summary>
            Indicates if the instrument can be turned off or not, via a modbus command.
            </summary>
            <remarks>
            Always returns false.  But, actually, the instrument CAN be turned off.  But it was decided that
            datalink should not be allowed to, so this property lies, and returns false even when the real
            answer is true.
            <note>
            Making this return false just for the Accessory Software when the instrument
            can actually shutdown was the wrong thing to do.  It causes the property to be specific
            to the Accessory Software, and useless to all other software.
            If the Accessory Software didn't like
            this property returning "the truth", then we should have made the Accessory Software
            deal with that problem in its own code. - JMP - 3/2012.
            </note>
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4Driver.Mx4LelMode">
            <summary>
            Defines LEL modes for the MX4 instrument.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4Driver.WirelessStatus">
            <summary>
            Ventis-LS wireless statuses.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getEquipmentSubType">
            <summary>
            Returns the sub-type of the instrument.
            </summary>
            <returns>
            Always returns <see cref="F:ISC.Instrument.TypeDefinition.EquipmentSubType.None"/> for this instrument type.
            </returns>
            <seealso cref="T:ISC.Instrument.TypeDefinition.EquipmentSubType"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled">Ignored.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProDriver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.reset">
            <summary>
            Forces the instrument to reset itself.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="partNum">More than 8 chars gets truncated. Specify Empty string to blank out.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setSensorPartNumber(System.Int32,System.String)">
            <summary>
            Sets the sensor's Part number
            </summary>
            <param name="sensorPos"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setJobNumber(System.String)">
            <summary>
            </summary>
            <param name="jobNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setSetupTech(System.String)">
            <summary>
            Sets the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Set the instrument's setup date.
            </summary>
            <param name="dateTime">setup date</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Set the Instrument Configuration Map Version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Sets the instrument hardware version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            Sets the instrument manufacturing location.
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Writes the instrument's minimum temperature reading.
            </summary>
            <param name="temp">Celsius.  To initialize, it's recommended to write a value of 100.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Writes the instrument's maximum temperature reading.
            </summary>
            <param name="temp">Celsius.  To initialize, it's recommended to write a value of -100.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.beginConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.InitConfiguration">
            <summary>
            This method is called by beginConfiguration write after the instrument reports in
            in FactoryUnitialized mode.
            The intent of this method is to all the driver to do some preliminary factory
            initialization of the instrument that application developers shouldn't have to
            worry about, such as zeroing certain registers, etc.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.endConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryBarThreshold(System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryLoThreshold">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryLoThreshold(System.Int16)">
            <summary>
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryFailThreshold">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary></summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.GetHygieneSession(System.Int32,System.String)">
            <summary>
            FOR DEBUGGING ONLY.
            </summary>
            <param name="sessionNum"></param>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            Set whether or not the instrument is owned by ISC (i.e., is a rental instrument).
            </summary>
            <param name="isIscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.SetLelModeLock(System.Boolean)">
            <summary>
            
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryDockedPowerThreshold">
            <summary>
            Returns the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This parameter used by the instrument to determine at what voltage
            to allow Modbus communication immediately at instrument startup.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryDockedPowerThreshold(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryDockedPowerThreshold(System.Int16)">
            <summary>
            Sets the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This parameter used by the instrument to determine at what voltage
            to allow Modbus communication immediately at instrument startup.
            </remarks>
            <param name="threshold"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryDockedPowerInterval">
            <summary>
            Returns the instruments "Battery Docked Power Interval".
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryDockedPowerInterval(System.Int16)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setBatteryDockedPowerInterval(System.Int16)">
            <summary>
            Sets the instruments "Battery Docked Power Interval".
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryDockedPowerInterval"/>
            <seealso cref="M:ISC.Instrument.Driver.M40ProFactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setAutoZeroClearingLimit(System.Int32)">
            <summary>
            Sets the autozero clearing limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setAutoZeroInstantLimit(System.Int32)">
            <summary>
            Sets the autozero instant limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setAutoZeroCalLimit(System.Int32)">
            <summary>
            Sets the autozero cal limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setAutoZeroMode(System.Boolean)">
            <summary>
            Turns on/off the autozero functionality on the instrument used
            for any installed LEL sensors.
            </summary>
            <remarks>
            Note that this should always be enabled for all customers' instruments.
            </remarks>
            <param name="on">
            If true,then autozero mode is turned On. False turns it off Off.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ProFactoryDriver.setPumpFlowSetPoint(System.Int32)">
            <summary>
            Sets the pump control set point for a Ventis instrument.
            </summary>
            <remarks>
            <para>
            Pump flow set point is a mV reading that pump has to get within 5% of
            in order to run at proper flow.
            </para>
            <para>
            It is also set for Ventis LS even though it does not have a pump.
            </para>
            This method will do nothing if an attempt is made to set it for a non-Ventis.
            </remarks>
            <param name="setPoint"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDriverException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="P:ISC.Instrument.Driver.SystemAlarmException.ErrorCode">
            <summary>
            The error code reported by the instrument.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SafeCoreFactoryDriver">
            <summary>
            For use with the SafeCore module's factory software.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SafeCoreDriver">
            <summary>
            For use with the SafeCore module.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 115200 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.connect(System.Boolean)">
            <summary>
            Establishes communication with the instrument.
            </summary>
            <param name="batching">Ignored by this instrument type. For this instrument type,
            a "batched connection" is <b>always</b> established.
            <note>We can get away with always doing "batched connection" for this instrument type
            because its baud rate is locked at 115200.</note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.shutdown">
            <summary>
            Prepares the instrument to be undocked.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            Only instrument settings need to be explicitly saved by calling this.
            <para>
            Changing sensor settings happens immediately, and this does not need to be called for sensors.
            </para>
            <para>
            Clearing instrument logs is also immediate, and this does not need to be called for them.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isInstrumentZeroing">
            <summary>
            Indicates if instrument is currently undergoing zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSoftwareVersion">
            <summary>
            Retrieves the instrument software version.
            </summary>
            <returns>Formatted software version</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getConfigurationVersion">
            <summary>
            Get the instrument's "configuration map" version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getLanguage">
            <summary>
            Returns the language that the instrument is currently set to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the instrument to a specific language.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument's serial number
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getInstrumentPartNumber">
            <summary>
            Returns the instrument's part number.
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getJobNumber">
            <summary>
            Returns the instrument's job number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSetupDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getMfgDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSetupTech">
            <summary>
            Retrieves the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval.
            </summary>
            <returns>Seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval.
            </summary>
            <param name="intervalSeconds">Seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting
            for TWA calculations.
            </summary>
            <returns>Time base setting (in hours)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting used for TWA calculations
            </summary>
            <param name="timeBaseHours">Time base setting (in hours)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getMinTemperature">
            <summary>
            Get minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getTime">
            <summary>
            Returns the instrument's current time (year, month, day, hour, seconds).
            </summary>
            <returns>The returned DateTime is assumed to be 'local time,
            so its Kind property is set to DateTimeKind.Local.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setTime(System.DateTime)">
            <summary>
            Set fixed monitor's sensors to current time (year, month, day, hour, minutes)
            to the passed-in time.
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getTotalAlarmTime">
            <summary>
            Returns the total amount of time this instrument has been in an alarm state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. 21.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setUsers(System.String[])">
            <summary>
            
            </summary>
            <param name="users"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSites">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSites(System.String[])">
            <summary>
            
            </summary>
            <param name="sites"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code, in Base36 format.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Access code. Format is assumed to be in Base36 or an empty string.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getFavoritePidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setFavoritePidFactors(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getCustomPidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setCustomPidFactors(ISC.Instrument.Driver.CustomResponseFactor[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getProfiles">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getFactoryProfile">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getMfgLocation">
            <summary>
            Returns the instrument's manufacturing location. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getHardwareVersion">
            <summary>
            Returns the instrument's hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBumpTimeoutSeconds">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="seconds">
            Value must be between MinBumpTimeout and MaxBumpTimeout.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpTimeout or MaxBumpTimeout).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <returns>Returned value will be in 0.5 day increments.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setBumpInterval(System.Double)">
            <summary>
            Set the Bump Interval for the instrument.
            </summary>
            <param name="interval">Number of days, inn 0.5 day increments.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval
            </summary>
            <returns>Interval in minutes</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setMaintenanceIndicatorInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <param name="interval">Interval in minutes</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getMaintenanceIndicatorInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            Sets the instrument's current backlight configuration option.
            </summary>
            <param name="bo"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBacklightOption">
            <summary>
            Returns the instrument's current backlight configuration option.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns>Timeout in seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument's current error code.
            </summary>
            <returns>Instrument's current error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getResetCount">
            <summary>
            Returns the number of times that an instrument has reset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>Speaker1Voltage</item>
            <item>VibratingAlarmVoltage</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold">
            A percentage value that must be between MinBumpThreshold and MaxBumpThreshold.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpThreshold or MaxBumpThreshold).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlgorithmReadingExponent">
            <summary>
            Returns the Algorithm's reading exponent, "N".
            </summary>
            <returns>An integer value with range 5 to 9.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlgorithmReadingExponent(System.Int32)">
            <summary>
            Writes the Algorithm's reading exponent, "N".
            </summary>
            <param name="exponent"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlgorithmO2ReadingDiff">
            <summary>
            Returns the Algorithm's maximum difference allowed, |e|, for readings between oxygen sensors.
            </summary>
            <returns>Floating point value with 2 decimal places, representing %Vol of O2.  e.g. "2.55". </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlgorithmO2ReadingDiff(System.Double)">
            <summary>
            Writes the Algorithm's maximum difference allowed, |e|, for readings between oxygen sensors.
            </summary>
            <param name="difference">Floating point value representing %Vol of O2, with max of 2 decimal places.  e.g. 2.55. but not 2.551.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlgorithmBumpResponseTimeDiff">
            <summary>
            Returns the Algorithm's maximum allowed difference in response times between a pair of sensors.
            for a successful bump test.
            </summary>
            <remarks>A percentage value.  e.g., 30 for "30%".</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlgorithmBumpResponseTimeDiff(System.Int16)">
            <summary>
            Write the Algorithm's maximum allowed difference in response times between a pair of sensors.
            </summary>
            <param name="difference">A percentage value.  e.g., 30 for "30%".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlgorithmToxicReadingDiff">
            <summary>
            Returns the Algorithm's maximum allowed difference for readings between toxic sensors.
            </summary>
            <returns>A percentage value with range 20% to 30%.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlgorithmToxicReadingDiff(System.Int32)">
            <summary>
            Writes the Algorithm's maximum allowed difference for readings between toxic sensors.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlgorithmMinCalPassSpan">
            <summary>
            Returns the Algorithm's minimum span reserve that each sensor is required to have to pass calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlgorithmMinCalPassSpan(System.Int32)">
            <summary>
            Writes the Algorithm's minimum span reserve that each sensor is required to have to pass calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlgorithmMaxCalPassSpan">
            <summary>
            Returns the Algorithm's maximum span reserve that each sensor is allowed to have to pass calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlgorithmMaxCalPassSpan(System.Int32)">
            <summary>
            Writes the Algorithm's maximum span reserve that each sensor is allowed to have to pass calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getCountryOfOrigin">
            <summary>
            Returns the instrument's "Country of Origin".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <param name="alarmMessages">
            The passed-in array should not exceed <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/>.
            If the array exceeds MaxAlarmActionMessages, then the extra elements will be ignored.
            <para>
            To clear all alarm messages, pass in an empty array.
            </para>
            </param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessageLineLength"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getAlarmActionMessages"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument
            displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <returns>
            If the instrument does not currently have any alarm messages configured in it,
            then an empty array will be returned. i.e., this method will never return null.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getAlarmEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.clearAlarmEvents">
            <summary>
            Deletes all alarm events currently stored on the instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            For this instrument type, the maximum size of the returned array is 30.
            An empty array is returned if the instrument has no logged errors.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatteryType">
            <summary>
            Returns the battery type code.
            </summary>
            <returns>Empty string. This instrument type's batteries have no battery code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatteryVoltage">
            <summary>
            Returns the battery's voltage.
            </summary>
            <returns>Zero. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatterySerialNumber">
            <summary>
            Retrieve the instrument battery pack serial number.
            </summary>
            <returns>Empty string. This instrument type's batteries have no serial number.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatteryPartNumber">
            <summary>
            </summary>
            <returns>Always returns "N/A". This instrument type's batteries have no part number.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatteryManufacturer">
            <summary>
            </summary>
            <returns>Always return <see cref="F:ISC.Instrument.Driver.Manufacturer.IndustrialScientific"/> for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatterySetupTech">
            <summary>
            Returns the setup tech's initials.
            </summary>
            <returns>Always returns an empty string. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatterySetupDate">
            <summary>
            Returns the time that this battery pack was setup.
            </summary>
            <returns>Always returns DateTime.MinValue. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatterySoftwareVersion">
            <summary>
            Returns the battery pack's software version.
            </summary>
            <returns>Always returns an empty string. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBatteryRunTime">
            <summary>
            </summary>
            <returns>Not supported by this instrument.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getChargePhase">
            <summary>
            </summary>
            <returns>Always returns ChargePhase.ChargeOff for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setOperatingMode(ISC.Instrument.Driver.OperatingMode,System.Int32)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.beginInstrumentCalibration">
            <summary>
            Intended to put instrument into calibration mode.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.endInstrumentCalibration">
            <summary>
            Take instrument out of calibration mode.  This routine should be called
            either at the end of calibrating all sensors, or to abort calibration
            mode while in the middle of calibrating a particular sensor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>
            This method does nothing for this instrument type.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on specified sensors.
            </summary>
            <param name="sensorPos">The positions of the sensors to calibrate.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.beginInstrumentZeroing">
            <summary>
            Begin zeroing of instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.endInstrumentZeroing">
            <summary>
            End Zeroing of instrument
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            Commands the instrument to power on/off its sensors.
            </summary>
            <remarks>
            When called, this method powers on the sensors by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Running"/>.
            It powers off the sensors by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Charging"/>.
            </remarks>
            <param name="on">Specify true to turn on, false to turn off.</param>
            <param name="wait">Only applies if "on" parameter is true; otherwise, it is ignored.
            <para>If this paramter is True, then after the the instrument is commanded to warmup its
            sensors, it will wait for the warmup to complete before returning.</para>
            <para>If this paramter is False, then after the instrument is commanded to warmup its
            sensors, this method will immediately return; i.e., it will not wait for the warmup to complete.
            The intention is to to have the instrument warm up its sensors in "the background" while
            the calling application continues to communicate with the instrument for other things.
            </para>
            </param>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">
            Thrown if instrument fails to warmup after a sufficient amount of time waiting for it to do.</exception>
            <exception cref="T:ISC.Instrument.Driver.SystemAlarmException">
            When commanded to "warm up", this instrument type will run a self test.
            The self test may result in the instrument entering a SystemAlarm state that it will never leave until undocked.
            If this alarm state is detected, SystemAlarmException will be thrown. Its ErrorCode property will
            contain the error code that the instrument has reported.
            </exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.GetSensorMode(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorPositions">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            For this instrument type, this method is used for setting a PID sensor's "response factor"
            or an LEL sensor's "correlation factor".
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0091"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getPeakReading(System.Int32)">
            <summary>
            Returns a sensor's peak reading
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Gas Alert alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Gas Alert alarm. Must not exceed the low alarm threshold.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalGasString(System.Int32)">
            <summary>
            For this instrument type, this method merely returns the cal gas code.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalGasCode(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getZeroLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensitivityHiLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensitivityLoLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getTwaReading(System.Int32)">
            <summary>
            Get the TWA Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getStelReading(System.Int32)">
            <summary>
            Get the STEL Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSensitivity(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorBaseline(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSpanReserve(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getFilterAlgorithm(System.Int32)">
            <summary>
            Filtering algorithm used for sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns>0 means no filtering for the sensor.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getFilterLevel(System.Int32)">
            <summary>
            Retrieves the level of filtering for the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getMeasurementRange(System.Int32)">
            <summary>
            Maximum allowable gas reading of the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorConfigVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorPartNumber(System.Int32)">
            <summary>
            Retrieves the sensor part number.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Sensor part number. Max of 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getCalTimeoutSeconds(System.Int32)">
            <summary>
            Get Calibration timeout for specified sensor
            </summary>
            <param name="sensorPos">The position of the sensor to check.</param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorMeasurementType(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorMfgTime(System.Int32)">
            <summary>
            Returns the sensor's manfucturing date.
            </summary>
            <remarks>
            This is NOT returning the same date that <see cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSetupDate(System.Int32)"/> returns.
            <para>Not sure what the difference between the to dates is.</para>
            </remarks>
            <param name="sensorPos"></param>
            <returns>The returned date will have a valid year, date, month.  The time portion will always be midnight, though.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSetupDate(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSetupDate(System.Int32)">
            <summary>
            Returns the sensor's setup date.
            </summary>
            <remarks>
            This is NOT returning the same date that <see cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorMfgTime(System.Int32)"/> returns.
            <para>Not sure what the difference between the to dates is.</para>
            </remarks>
            <param name="sensorPos"></param>
            <returns>The returned date will have a valid year, date, month.  The time portion will always be midnight, though.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorMfgTime(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorPreconditionTime(System.Int32)">
            <summary>
            Get the Precondition Time for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Number of seconds.
            Zero is returned if sensor should not be preconditioned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            Get the Precondition Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            Get the Calibration Flow Rate for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            Get the Bump Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by this instrument type since instrument only has 1 sensor</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isSensorZeroing(System.Int32)">
            <summary>
            Returns whether or not specified sensor is currently zeroing or not.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <remarks>
            Note that there is no "getSensorBumpFault"
            that reads the same register that this "set" function writes to.
            In order to determine if
            a sensor is in bump fault, the SensorMode for the sensor should be looked at.
            </remarks>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getLastBumpTime(System.Int32)">
            <summary>
            Returns the last time the sensor was bumped, either by hand or via DS2/cal station.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns zero for this instrument type.  Filtering is always a simple average.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a specific sensor.
            </summary>
            <param name="sensorPos"></param>
            <param name="enabled">True to enable the sensor, false to disable it.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isSensorEnabled(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorHardwareVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns 0 since this instrument's sensors don't support a "hardware version".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <remarks>
            For this instrument type, this method reads a bit that's programmed into
            the sensors that indicates if the sensor should have STEL calcualted.
            </remarks>
            <param name="sensorPos"></param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <remarks>
            For this instrument type, this method reads a bit that's programmed into
            the sensors that indicates if the sensor should have TWA calcualted.
            </remarks>
            <param name="sensorPos"></param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            </param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operating on specified sensor.
            </summary>
            <param name="sensorPos">
            Sensor to query status on.
            </param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getHygiene">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.clearHygiene">
            <summary>
            Clears the recorded datalog.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBaseUnitInfos">
            <summary>
            Returns the log of base unit information that the module has recorded.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.clearBaseUnitInfos"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.clearBaseUnitInfos">
            <summary>
            Clears the log of base unit information that the module has recorded.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getBaseUnitInfos"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getLastDockTime">
            <summary>
            Returns the instrument's last dock time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessMacAddress">
            <summary>
            Returns the Synapse wireless module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless transmission interval.
            </summary>
            <remarks>
            This is the time between message transmission from instrument to Wireless device.
            </remarks>
            <returns>Number of seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
             Changes the wireless transmission interval.
            </summary>
            <remarks>
            This is the time between message transmission from instrument to Wireless device.
            </remarks>
            <param name="interval">Set to 1 or 2 seconds only.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper hardware version of the radio (a.k.a. "hardware platform").
            This value is used by the intrument to identify if it has the proper script for the radio platform.
            </summary>
            <returns>
            <list type="bullet">
            <item><description>0 = Synapse RF100 SNAP Engine</description></item>
            <item><description>1 = reserved</description></item>
            <item><description>2 = reserved</description></item>
            <item><description>3 = CEL ZIC2410 (CEL's MessConnect wireless/ZigBee radio module)</description></item>
            <item><description>4 = reserved</description></item>
            <item><description>5 = MC1321x (Freescale ZigBee PiP)</description></item>
            <item><description>6 = ATmega128RFA1 (Atmel)</description></item>
            <item><description>7 = SNAPcom</description></item>
            <item><description>8 = Si100x (Silicon Labs 100-series wireless MCU)</description></item>
            <item><description>9 = MC1322x (Freescale ZigBee PiP)</description></item>
            <item><description>10 = reserved</description></item>
            <item><description>11 = Si100x KADEX (Silicon Labs 100-series wireless MCU)</description></item>
            <item><description>12 = reserved</description></item>
            <item><description>13 = Synapse RF300 SNAP Engine</description></item>
            <item><description>14 = Synapse RF200 SNAP Engine</description></item>
            <item><description>15 = Synapse SM300 Surface Mount Module</description></item>
            <item><description>16 = Synapse SM301 Surface Mount Module</description></item>
            <item><description>17 = Synapse SM200 Surface Mount Module</description></item>
            <item><description>18 = reserved</description></item>
            <item><description>19 = Synapse RF266</description></item>
            <item><description>20 = STM32W108xB (STMicroelectronics)</description></item>
            <item><description>27 = SM220</description></item>
            <item><description>Others = Unknown</description></item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessOsVersion">
            <summary>
            Returns Whisper OS version number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessSoftwareVersion">
            <summary>
            Returns Whisper scripts version number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets the wireless module's custom encryption key.
            </summary>
            <param name="key">
            A hexadecimal string representing the encryption key's bytes. e.g. Maximum of 32 hex characters.
            (The encryption key is 128 bits. That equates to 16 bytes. 16 bytes represented as hex equates to 32 characters.)
            <para>If the passed-in string is longer than 32 characters, then the extra characters will be ignored.</para>
            <para>If a null or empty string is passed in, then the module's custom encryption key will be set to all zeroes.</para>
            </param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">If the passed-in string contains any non-hexadecimal characters.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the wireless module's custom encryption key.
            </summary>
            <returns>A hexadecimal string representing the encryption key's bytes.
            <para>If the encryption key is all zeroes, then an empty string is returned.</para>
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessCustomEncryptionKey(System.String)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <remarks>
            Each time the message hops from one instrument to the next the value is decremented
            until the value is 0 - then the message is no longer forwarded.
            </remarks>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessMessageHops"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <remarks>
            Each time the message hops from one instrument to the next the value is decremented
            until the value is 0 - then the message is no longer forwarded.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessMessageHops(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers">An integer value from 0 - 254.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessMaximumPeers"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns>An integer value from 0 - 254.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessMaximumPeers(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band;
            value will correspond to bit number in active channel mask.
            </remarks>
            <param name="channel">Value from 0 to 15.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band;
            value will correspond to bit number in active channel mask.
            </remarks>
            <returns>A value from 0 to 15.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band.
            </remarks>
            <param name="channel">
            Value from 0 to 15. If no secondary channel used, set to 255.
            The value (if not 255) will correspond to bit number in active channel mask.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band.
            </remarks>
            <returns>
            A value from 0 to 15. If no secondary channel used, then 255.
            The value (if not 255) will correspond to bit number in active channel mask.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessActiveChannelMask">
            <summary>
            Returns a  mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns>
            Each bit of this returned value is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Bits are set to 1 for the allowed channels, or are set to 0 for the disallowed channels.
            </para>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.HasWirelessListeningPostChannelMaskFeature"/> returns false.
            </remarks>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
            <exception cref="T:System.NotSupportedException">Thrown if firmare version is less than 3.00.</exception>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessListeningPostChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.HasWirelessListeningPostChannelMaskFeature"/> returns false.
            </remarks>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
            <exception cref="T:System.NotSupportedException">Thrown if firmare version is less than 3.00.</exception>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessListeningPostChannelMask(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>
            This is also known as "Teammate Lost."
            </remarks>
            <param name="seconds">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessPeerLostThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>
            This is also known as "Teammate Lost."
            </remarks>
            <returns>Number of seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessPeerLostThreshold(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessNetworkLostThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns>Number of seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessNetworkLostThreshold(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessReadingsDeadband"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessReadingsDeadband(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessFeatures"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessFeatures(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessNetworkDisconnectDelay"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth software version number.
            </summary>
            <returns>The bluetooth software version and build number</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessBindingTimeout(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessBindingTimeout"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getWirelessAlarmMask">
            <summary>
            Returns the wireless module's alarm mask
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getBluetoothLoneWorkerOkMessageInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.enableWirelessFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.isWirelessFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.enableBluetoothFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.enableBluetoothFeature(System.Boolean)"/>        
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGpsFeature"/> returns false.
            </remarks>
            <returns>Value is in minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.setGpsReadingInterval(System.Int32)"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.HasGpsFeature"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.MinGpsReadingInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.MaxGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Thrown if instrument's firmware version does not support the GPS feature.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDriver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval">Value is in minutes.</param>
            <remarks>
            This method should not be called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGpsFeature"/> returns false.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreDriver.getGpsReadingInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.HasGpsFeature"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.MinGpsReadingInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.SafeCoreDefinition.MaxGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Thrown if instrument's firmware version does not support the GPS feature.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.SafeCoreDriver.HasShutdownFeature">
            <summary>
            Indicates if the instrument can be turned off or not, via a modbus command.
            </summary>
            <remarks>
            Always returns false for this instrument type.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.beginConfiguration">
            <summary>
            Placed the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </summary>
            <exception cref="T:ISC.Instrument.Driver.ConfigurationException">
            Thrown if instrument will not enter <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.endConfiguration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.endConfiguration">
            <summary>
            This method should be called at the end of configuring the instrument.
            The methods waits for the instrument to exit <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </summary>
            <remarks>
            The instrument is considered configured if its mode changes
            to <see cref="F:ISC.Instrument.Driver.OperatingMode.Docked"/>.  The instrument will change to
            this mode after being successfully configured.
            </remarks>
            <exception cref="T:ISC.Instrument.Driver.ConfigurationException">
            Thrown if instrument remains stuck in <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode
            or enters an unexpected mode.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.beginConfiguration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="serialNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="partNum">More than 8 chars gets truncated. Specify Empty string to blank out.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setJobNumber(System.String)">
            <summary>
            Writes the manufacuring "job number" field.
            </summary>
            <param name="jobNum">
            Must be 8 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setSetupTech(System.String)">
            <summary>
            Sets  the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Writes the date of manufacture.  i.e., the "setup date".
            </summary>
            <param name="dateTime">Only the month, day, and year are used. The time-portion of the DateTime is ignored.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Writes the instrument's minimum temperature reading.
            </summary>
            <param name="temp">Celsius. e.g. "21". To initialize, it's recommended to set a value of 100.0.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Writes the instrument's maximum temperature reading.
            </summary>
            <param name="temp">Celsius.  e.g. "21". To initialize, it's recommended to write a value of -100.0.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.clearPeerEvents">
            <summary>
            Deletes all peer alarm events currently stored on the instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum">Value must be 1 through 4.</param>
            <returns>Millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setBatteryBarThreshold(System.Int32,System.Int16)">
            <summary>
            Sets maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum">Value must be 1 through 4.</param>
            <param name="threshold">Millivolts.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setTotalRunTime(System.TimeSpan)">
            <summary>
            Sets the amount of time this instrument has been in operation.
            The value is stored as number of seconds.
            </summary>
            <param name="totalRunTime">Pass in <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see> to initialize this field on the instrument.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setTotalAlarmTime(System.TimeSpan)">
            <summary>
            Sets the total amount of time this instrument has been in an alarm state.
            The value is stored as number of seconds.
            </summary>
            <param name="totalAlarmTime">Pass in <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see> to initialize this field on the instrument.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setSelfTestInterval(System.Int32)">
            <summary>
            Sets the instrument's self test interval.
            </summary>
            <remarks>
            The unit performs a periodic self test after this interval,
            if it is kept ON for more than this number of hours,
            to make sure different peripherals are working fine.
            </remarks>
            <param name="interval">Number of hours.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getSelfTestInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getSelfTestInterval">
            <summary>
            Sets the instrument's self test interval setting.
            </summary>
            <remarks>
            The unit performs a periodic self test after this interval,
            if it is kept ON for more than this number of hours,
            to make sure different peripherals are working fine.
            </remarks>
            <returns>Number of hours.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setSelfTestInterval(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Writes the instrument's "Configuration Map Version" number.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAutoZeroClearingLimit(System.Int32)">
            <summary>
            Sets the autozero clearing limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit">
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAutoZeroInstantLimit(System.Int32)">
            <summary>
            Sets the autozero instant limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAutoZeroCalibrationLimit(System.Int32)">
            <summary>
            Sets the autozero cal limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAutoZeroMode(System.Boolean)">
            <summary>
            Turns on/off the autozero functionality on the instrument used
            for any installed LEL sensors.
            </summary>
            <remarks>
            Note that this should always be enabled for all customers' instruments.
            </remarks>
            <param name="on">
            If true,then autozero mode is turned On. False turns it off Off.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAutoZeroInterval(System.Int32)">
            <summary>
            </summary>
            <param name="interval">Number of hours.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAutoZeroInterval">
            <summary>
            
            </summary>
            <returns>Number of hours.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            Writes the instrument's manufacturing location.
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Writes the instrument's hardware version number.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            Set whether or not the instrument is owned by ISC (i.e., is a rental instrument).
            </summary>
            <param name="isIscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMaxSpeakerPower(System.Int32)">
            <summary>
            Power that the speaker must be less than, in order to pass self-diagnostics.
            </summary>
            <param name="voltage">Value is in milliwatts (mW).</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMaxSpeakerPower">
            <summary>
            Power that the speaker must be less than, in order to pass self-diagnostics.
            </summary>
            <returns>Value is in milliwatts (mW).</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinSpeakerPower(System.Int32)">
            <summary>
            Power that the speaker must be greater than, in order to pass self-diagnostics.
            </summary>
            <param name="power">Value is in milliwatts (mW).</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinSpeakerPower">
            <summary>
            Power that the speaker must be greater than, in order to pass self-diagnostics.
            </summary>
            <returns>Value is in milliwatts (mW).</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.configureSensors">
            <summary>
            Configures the duel sensors' settings so that they are in sync with each other.
            </summary>
            <remarks>
            Calling this method causes the instrument to read the settings for its installed duel sensors,
            determine any differences between the pairs, then modifying (if necessary) any settings on them 
            in order to make the settings the same between them.
            <para>
            The sensors "settings" are fields such as Low, High, STEL, and TWA alarms and, also, the peak
            reading.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinLedPower(System.Int32)">
            <summary>
            Wattage that the LED must be greater than, in order to pass self-diagnostics.
            </summary>
            <param name="wattage">A milliwatts value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinLedPower">
            <summary>
            Wattage that the LED must be greater than, in order to pass self-diagnostics.
            </summary>
            <returns>A milliwatts value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMaxLedPower(System.Int32)">
            <summary>
            Wattage that the LED must be less than, in order to pass self-diagnostics.
            </summary>
            <param name="wattage">A milliwatts value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMaxLedPower">
            <summary>
            Wattage that the LED must be less than, in order to pass self-diagnostics.
            </summary>
            <returns>A milliwatts value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setPumpFlowSetPoint(System.Int32)">
            <summary>
            Sets the pump control set point.
            </summary>
            <remarks>
            Pump flow set point is a mV reading that pump has to get within some percentage of
            in order to run at proper flow.
            </remarks>
            <param name="setPoint">Value is in millivolts (mV).</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getPumpFlowSetPoint"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getPumpFlowSetPoint">
            <summary>
             Sets the pump control set point.
            </summary>
            <remarks>
            Pump flow set point is a mV reading that pump has to get within some percentage of
            in order to run at proper flow.
            </remarks>
            <returns>Value is in millivolts (mV).</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setPumpFlowSetPoint(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setPumpLowFlowSetPoint(System.Int32)">
            <summary>
            Sets the pump "low flow" point.
            </summary>
            <remarks>
            A mV reading that pump has to be above in order to not be considered "low flow".
            </remarks>
            <param name="setPoint">Value is in millivolts (mV).</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getPumpLowFlowSetPoint"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getPumpLowFlowSetPoint">
            <summary>
            Sets the pump control "low flow" point.
            </summary>
            <remarks>
            A mV reading that pump has to be above in order to not be considered "low flow".
            </remarks>
            <returns>Value is in millivolts (mV).</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setPumpLowFlowSetPoint(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setCountryOfOrigin(ISC.Instrument.TypeDefinition.Country)">
            <summary>
            Writes the instrument's "Country of Origin" instrument.
            </summary>
            <param name="country"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdLowT1S1">
            <summary>
            Low battery threshold  &lt;= -10C, Low power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdLowT1S1(System.UInt16)">
            <summary>
            Low battery threshold  &lt;= -10C, Low power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdLowT2S1">
            <summary>
            Low battery threshold  &gt; -10C and  &lt;= 0C, Low power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdLowT2S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; -10C and  &lt;= 0C, Low power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdLowT3S1">
            <summary>
            Low battery threshold  &gt;> 0 C and &lt;= 10 C, Low power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdLowT3S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt;> 0 C and &lt;= 10 C, Low power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdLowT4S1">
            <summary>
            Low battery threshold  &gt; 10 C and &lt;= 20 C, Low power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdLowT4S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 10 C and &lt;= 20 C, Low power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdLowT5S1">
            <summary>
            Low battery threshold &gt; 20 C, Low power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdLowT5S1(System.UInt16)">
            <summary>
            Low battery threshold &gt; 20 C, Low power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdMedT1S1">
            <summary>
            Low battery threshold  &gt;= -10C, Medium power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdMedT1S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt;= -10C, Medium power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdMedT2S1">
            <summary>
            Low battery threshold  &gt; -10C and  &lt;= 0C, Medium power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdMedT2S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; -10C and  &lt;= 0C, Medium power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdMedT3S1">
            <summary>
            Low battery threshold  &gt; 0 C and &lt;= 10 C, Medium power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdMedT3S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 0 C and &lt;= 10 C, Medium power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdMedT4S1">
            <summary>
            Low battery threshold  &gt; 10 C and &lt;= 20 C, Medium power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdMedT4S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 10 C and &lt;= 20 C, Medium power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdMedT5S1">
            <summary>
            Low battery threshold  &gt; 20 C, Medium power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdMedT5S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 20 C, Medium power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdHighT1S1">
            <summary>
            Low battery threshold  &lt;= -10C, High power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdHighT1S1(System.UInt16)">
            <summary>
            Low battery threshold  &lt;= -10C, High power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdHighT2S1">
            <summary>
            Low battery threshold  &gt; -10C and  &lt;= 0C, High power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdHighT2S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; -10C and  &lt;= 0C, High power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdHighT3S1">
            <summary>
            Low battery threshold  &gt; 0 C and &lt;= 10 C, High power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdHighT3S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 0 C and &lt;= 10 C, High power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdHighT4S1">
            <summary>
            Low battery threshold  &gt; 10 C and &lt;= 20 C, High power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdHighT4S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 10 C and &lt;= 20 C, High power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdHighT5S1">
            <summary>
            Low battery threshold  &gt; 20 C, High power sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdHighT5S1(System.UInt16)">
            <summary>
            Low battery threshold  &gt; 20 C, High power sensors.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdT1">
            <summary>
            Battery shutoff threshold  &lt;= -10C.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdT1(System.UInt16)">
            <summary>
            Battery shutoff threshold  &lt;= -10C.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdT2">
            <summary>
            Battery shutoff threshold  &gt; -10C and  &lt;= 0C.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdT2(System.UInt16)">
            <summary>
            Battery shutoff threshold  &gt; -10C and  &lt;= 0C.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdT3">
            <summary>
            Battery shutoff threshold  &gt; 0 C and &lt;= 10C.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdT3(System.UInt16)">
            <summary>
            Battery shutoff threshold  &gt; 0 C and &lt;= 10C.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdT4">
            <summary>
            Battery shutoff threshold  &gt; 10C and &lt;= 20C.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdT4(System.UInt16)">
            <summary>
            Battery shutoff threshold  &gt; 10C and &lt;= 20C.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinBatteryThresholdT5">
            <summary>
            Battery shutoff threshold  &gt; 20C.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinBatteryThresholdT5(System.UInt16)">
            <summary>
            Battery shutoff threshold  &gt; 20C.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.enableWirelessEncryption(System.Boolean)">
            <summary>
            Completely enables/disables the wireless encryption.
            </summary>
            <param name="enabled">true to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.isWirelessEncryptionEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.isWirelessEncryptionEnabled">
            <summary>
            Returns whether or not the instrument's wireless encryption is enabled or not.
            </summary>
            <returns>true is wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.enableWirelessEncryption(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setSensorPartNumber(System.Int32,System.String)">
            <summary>
            Sets the sensor's Part number
            </summary>
            <param name="sensorPos"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getDualSenseCalRequestedFlag">
            <summary>
            Returns the instrument's "cal requested" flag.
            </summary>
            <remarks>
            When the two sensors in dual sense mode have huge differences in their individual readings,
            the instrument assumes they need to be calibrated - because maybe one is bad - so, the
            instrument set's a flag for itself.
            It causes the Cal Due alert when set.
            </remarks>
            <returns>True if the flag is set; else false.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setDualSenseCalRequestedFlag(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setDualSenseCalRequestedFlag(System.Boolean)">
            <summary>
            Sets the instrument's "cal requested" flag.
            </summary>
            <remarks>
            When the two sensors in dual sense mode have huge differences in their individual readings,
            the instrument assumes they need to be calibrated - because maybe one is bad - so, the
            instrument set's a flag for itself.
            It causes the Cal Due alert when set.
            <para>
            This method allows an the flag the be set externally by an application;
            this is necessary and only intended for configuring the instrument.
            </para>
            </remarks>
            <param name="flag">True to set the flag, false to clear the flag</param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getDualSenseCalRequestedFlag"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setResetCount(System.Int32)">
            <summary>
            Sets the number of times that an instrument has reset.
            </summary>
            <remarks>
            Intended to be used when configuring the instrument (to set it to zero), 
            and for restoring the value during firmware upgrades.
            </remarks>
            <param name="totalResets"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.disableAlarms(System.Boolean)">
            <summary>
            Turn on/off alarms for the remainder of time that the instrument is docked.
            The instrument will automatically enable them when it is undocked, or if this
            method is called with a parameter of false.
            </summary>
            <param name="disabled"></param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.isAlarmsDisabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.isAlarmsDisabled">
            <summary>
            Indicates whether or not docked alarms are currently disabled.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.disableAlarms(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdSO2">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for SO2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdSO2(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for SO2.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdNO2">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for NO2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdNO2(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for NO2.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdCO">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for CO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdCO(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for CO.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdH2S">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for H2S.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdH2S(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for H2S.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdLEL">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for LEL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdLEL(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for LEL.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdNH3">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for LEL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdNH3(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for LEL.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdCL2">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for CL2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdCL2(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for CL2.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdH2">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for H2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdH2(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for H2.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdHCL">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for HCL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdHCL(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for HCL.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdHCN">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for HCN.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdHCN(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for HCN.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdNO">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for NO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdNO(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for NO.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdPH3">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for PH3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdPH3(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for PH3.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getAlgorithmReadingThresholdCOH2">
            <summary>
            Returns the Dualsense Algorithm's reading threshold for COH2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setAlgorithmReadingThresholdCOH2(System.Int32)">
            <summary>
            Writes the Dualsense Algorithm's reading threshold for COH2.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.enableDualSense(System.Boolean)">
            <summary>
            Enables/disables dual-sense mode on the instrument.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinCalibrationTime">
            <summary>
            Minimum time that the sensor has to calibrate in order to pass.
            </summary>
            <remarks>
            SafeCore v3.0 and newer.
            </remarks>
            <returns>Seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinCalibrationTime(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.setMinCalibrationTime(System.Int32)">
            <summary>
            Minimum time that the sensor has to calibrate in order to pass.
            </summary>
            <remarks>
            SafeCore v3.0 and newer.
            </remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.SafeCoreFactoryDriver.getMinCalibrationTime"/>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6Profiler">
            <summary>
            Summary description for Mx6Profiler.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.#ctor(ISC.Instrument.Driver.InstrumentDriver,ISC.Instrument.Driver.ModbusMaster)">
            <summary>
            
            </summary>
            <param name="driver"></param>
            <param name="modbusMaster"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.GetProfileRegisterNumber(System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="baseRegister"></param>
            <param name="profilePos">one-based</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.GetSensorProfileRegisterNumber(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="baseRegister"></param>
            <param name="profilePos"></param>
            <param name="sensorPos">one-based</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.GetProfiles">
            <summary>
            Return a list of Profiles for this instrument.  If this instrument
            has no saved profiles, an empty list is returned.
            </summary>
            <returns>Empty if instrument has none.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.SetProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            Store the passed in array of Profiles to the instrument
            </summary>
            <param name="profiles"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.SetProfile(System.UInt16,ISC.Instrument.Driver.InstrumentProfile)">
            <summary>
            
            </summary>
            <param name="profilePos"></param>
            <param name="profile"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.GetProfile(System.UInt16)">
            <summary>
            
            </summary>
            <param name="profilePos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.GetSensorProfile(System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="profilePos">Sensor position (1-6)</param>
            <param name="sensorPos">Sensor position (1-6)</param>
            <returns>null if no SensorProfile is found at the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Profiler.SetSensorProfile(System.UInt16,System.UInt16,ISC.Instrument.Driver.SensorProfile)">
            <summary>
            </summary>
            <param name="profilePos">Profile position</param>
            <param name="sensorPos"></param>
            <param name="sensorProfile"></param>
        </member>
        <member name="T:ISC.Instrument.Driver.IModbusTracer">
            <summary>
            A 'tracer' can be set such that during modbus communications, messages
            will be sent to the tracer that can aid in debugging.  Where messages actually go
            to is dependent on how the tracer is implemented. e.g., a tracer may may perhaps
            send messages to a serial port (for hyperterminal logging), or to a text log file, etc.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.IDateTimeProvider">
            <summary>
            When the InstrumentDriver is used on a CompactFramework device, DateTime.Now, 
            DateTime.UtcNow, etc. should not be used due to problems in the framework's implementation
            of the DateTime class dealing with time zones and DST.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.IDateTimeProvider.LocalNow">
            <summary>
            Gets a DateTime that is set to the current date and time, expressed as local time.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.IDateTimeProvider.LocalToday">
            <summary>
            Gets the current date, with the time component set to 00:00:00.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DefaultDateTimeProvider">
            <summary>
            The driver uses this implementation by default, which 
            merely passes through to the framework's DateTime class.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DefaultDateTimeProvider.LocalNow">
            <summary>
            Gets a DateTime that is set to the current date and time, expressed as local time.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DefaultDateTimeProvider.LocalToday">
            <summary>
            Gets the current date, with the time component set to 00:00:00.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4DriverInstrumentCalibrationRecord">
            <summary>
            Stores data for a calibration record retrieved from an instrument.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverInstrumentCalibrationRecord">
            <summary>
            For the calibration records, the 
            span reserve, 
            instrument serial number, 
            sensor type, 
            sensor status (which gives the pass/fail), 
            date, and 
            time. 
            This is the data that is printed out. I also read the cal gas type, 
            cal gas high limit, and the cal gas value to determine some of the pass/fail 
            for the bump test. It would be nice to pass the sensor serial number back too.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Tx1Datalogger">
            <summary>
            Summary description for Tx1Datalogger.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.#ctor(ISC.Instrument.Driver.InstrumentDriver,ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            
            </summary>
            <param name="driver"></param>
            <param name="modbusMaster"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.DownloadSession(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.CommitPeriod(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.DownloadSessionPackets(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParseSessionHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParseSessionFooter(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParseSensorSessionHeaders(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParseCustomResponseFactorHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParseSensorStatus(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParsePeriod(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.ParseReading(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Datalogger.BytesToString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.SafeCoreDatalogger">
            <summary>
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.#ctor(ISC.Instrument.Driver.InstrumentDriver,ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            
            </summary>
            <param name="driver"></param>
            <param name="modbusMaster"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.DownloadSession(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.CommitPeriod(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.DownloadSessionPackets(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParseSessionHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParseSessionFooter(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParseSensorSessionHeaders(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParseCustomResponseFactorHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParseSensorStatus(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParsePeriod(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.ParseReading(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogger.BytesToString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6FactoryDriver">
            <summary>
            For use with the MX6 instrument's factory software.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6Driver">
            <summary>
            For use with the MX6 iBrid instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.InitSupportedInstrumentOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.InitSupportedProfileOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 9600 or 115200 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.shutdown">
            <summary>
            Turns off the instrument.
            Any communication port, etc. being used to communicate with the instrument are
            (intended to be ) left open.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            For this instrument type, this method doesn't do anything, since the instrument automatically
            saves any changed settings to flash when it is undocked.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the instrument to a specific language.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getLanguage">
            <summary>
            Returns the language that the instrument is currently set to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTotalAlarmTime">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTime">
            <summary>
            Get the instrument's current time (year, month, day, hour, seconds)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setTime(System.DateTime)">
            <summary>
            Set instrument's current time ( year, month, day, hour, secomds)
            to the time as specified in passed-in 'newTime'
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorPositions">
            <summary>
            
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.GetSensorMode(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.connect(System.Boolean)">
            <summary>
            Establishes communication with the instrument.
            </summary>
            <param name="batching">If true is specified, then this method will initiate a "batch connection".
            <para>If false is specified, then non-batched connection is performed.</para>
            <note>It's recommended to use baud rate of 9600 for non-batched connections.</note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            Commands the instrument to power on/off its sensors.
            </summary>
            <remarks>
            When called, this method tells the instrument to power on its sensor by setting
            its operating mode <see cref="F:ISC.Instrument.Driver.OperatingMode.Running"/>.
            <para>
            It powers off the sensors by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Charging"/>.
            </para>
            </remarks>
            <param name="on">Specify true to turn on, false to turn off.</param>
            <param name="wait">Only applies if "on" parameter is true; otherwise, it is ignored.
            <para>If this paramter is True, then after the the instrument is commanded to warmup its
            sensors, it will wait for the warmup to complete before returning.</para>
            <para>If this paramter is False, then after the instrument is commanded to warmup its
            sensors, this method will immediately return; i.e., it will not wait for the warmup to complete.
            The intention is to to have the instrument warm up its sensors in "the background" while
            the calling application continues to communicate with the instrument for other things.
            </para>
            </param>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">Thrown if instrument fails to warmup.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSoftwareVersion">
            <summary>
            Retrieves the instrument software version.  Format is "Version.SubVersion.BuildNumber";
            e.g. "1.20.10".
            </summary>
            <returns>Formatted software version</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getHardwareVersion">
            <summary>
            Retrieves the instrument hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument's serial number
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getInstrumentPartNumber">
            <summary>
            Returns the instrument's part number.
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getJobNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSetupTech">
            <summary>
            Retrieves the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSetupDate">
            <summary>
            Retrieves the instrument's set-up date (and time).
            </summary>
            <returns>Setup date (and time)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getMfgDate">
            <summary>
            Gets the instrument's MFG date and time.
            </summary>
            <returns>MFG date and time</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getConfigurationVersion">
            <summary>
            Get the Instrument Configuration Map Version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorMeasurementType(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getMeasurementRange(System.Int32)">
            <summary>
            Maximum allowable gas reading of the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval.
            </summary>
            <returns>Seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval.
            </summary>
            <param name="intervalSeconds">Seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getMfgLocation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            Sets the instrument's current backlight configuration option
            </summary>
            <param name="bo"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBacklightOption">
            <summary>
            Returns the instrument's current backlight configuration option.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatteryManufacturer">
            <summary>
            Returns the manufacturer of the battery pack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatteryPartNumber">
            <summary>
            Returns the part number of the battery pack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatterySerialNumber">
            <summary>
            Returns the serial number of the battery pack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatteryType">
            <summary>
            Return this instrument's battery type code.  
            </summary>
            <returns>
            A code with format "BP000x" code.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatteryVoltage">
            <summary>
            Returns the battery's voltage.
            </summary>
            <remarks>
            The MX6 monitors the battery voltage and has a running buffer with the last few readings averaged,
            so the value returned is close to real time, but not exactly.
            </remarks>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatteryRunTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatterySetupTech">
            <summary>
            Returns the setup tech's initials.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatterySetupDate">
            <summary>
            Returns the time that this battery pack was setup.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBatterySoftwareVersion">
            <summary>
            Returns the battery pack's software version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getChargePhase">
            <summary>
            
            </summary>
            <returns>1 if charging, 0 if not charging, -1 if there's charging problem</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting
            for TWA calculations.
            </summary>
            <returns>Time base setting (in hours)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting used for TWA calculations
            </summary>
            <param name="timeBaseHours">Time base setting (in hours)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getMinTemperature">
            <summary>
            Get minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. 21.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <remarks>
            Supported by 3.50 or newer instruments.
            </remarks>
            <returns>
            A "number of days" interval in half day increments.
            e.g. 0.5 if bump interval is twice a day or 1.0 if once per day.
            </returns>
            <exception cref="T:System.NotSupportedException">If instrument firmware version does not support this field.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasBumpIntervalConfigFeature"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setBumpInterval(System.Double)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setBumpInterval(System.Double)">
            <summary>
            Sets the Bump Interval (in days) for the instrument.
            </summary>
            <remarks>
            Supported by 3.50 or newer instruments.
            </remarks>
            <param name="interval">Valid range is from 0.5 to 7 in increments of 0.5 days.</param>
            <exception cref="T:System.NotSupportedException">If instrument firmware version does not support this field.</exception>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasBumpIntervalConfigFeature"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getBumpInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxBumpInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinBumpInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>BatteryVoltage</item>
            <item>BatteryStatus</item>
            <item>Speaker1Voltage</item>
            <item>Speaker2Voltage</item>
            <item>VibratingAlarmVoltage</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.ReadCalibrationSettings">
            <summary>
            Read and return Calibration Settings register
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.WriteCalibrationSettings(System.UInt16)">
            <summary>
            Write specified settings to Calibration Settings register
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.ReadAlarmSettings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.WriteAlarmSettings(System.UInt16)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.ReadDisplaySettings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.WriteDisplaySettings(System.UInt16)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            For this instrument type, this method is used for setting a PID sensor's "response factor"
            or an LEL sensor's "correlation factor".
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0091"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorPartNumber(System.Int32)">
            <summary>
            Retrieves the sensor part number.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Sensor part number. Max of 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorRawSerialNumber(System.Int32)">
            <summary>
            Returns a sensor module's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorConfigVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorManufacturer(System.Int32)">
            <summary>
            Retrieves the sensor manufacturer.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Sensor manufacturer</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorHardwareVersion(System.Int32)">
            <summary>
            Get the Sensor Hardware Version.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorMfgTime(System.Int32)">
            <summary>
            Gets the sensors Manufactur time.
            </summary>
            <remarks>who uses this?  internal software?</remarks>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorSetupDate(System.Int32)">
            <summary>
            Gets the sensors setup date.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorInstallationTime(System.Int32)">
            <summary>
            Gets the sensors installation time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorPreconditionTime(System.Int32)">
            <summary>
            Get the Precondition Time for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Number of seconds.
            Zero is returned if sensor should not be preconditioned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            Get the Precondition Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            Get the Calibration Flow Rate for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            Get the Bump Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getPeakReading(System.Int32)">
            <summary>
            Returns a sensor's peak reading
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Gas Alert alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Gas Alert alarm. Must not exceed the low alarm threshold.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCalGasString(System.Int32)">
            <summary>
            Calgas string is displayed on the instrument during calibration.
            </summary>		
            <returns>Sensor string. Max of 4 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getZeroLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensitivityHiLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensitivityLoLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorSensitivity(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <remarks>
            For this instrument type, this method reads a bit that's programmed into
            the sensors that indicates if the sensor should have STEL calcualted.
            </remarks>
            <param name="sensorPos"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <remarks>
            For this instrument type, this method reads a bit that's programmed into
            the sensors that indicates if the sensor should have TWA calcualted.
            </remarks>
            <param name="sensorPos"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorBaseline(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getFilterAlgorithm(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getFilterLevel(System.Int32)">
            <summary>
            Retrieves the sensor filtering magnitude value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTwaReading(System.Int32)">
            <summary>
            Get the TWA Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getStelReading(System.Int32)">
            <summary>
            Get the STEL Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getTemperatureCompensation(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="tableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorSpanReserve(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getCalTimeoutSeconds(System.Int32)">
            <summary>
            Get Calibration timeout for specified sensor
            </summary>
            <param name="sensorPos">The position of the sensor to check.</param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Must be either empty, or else 3 - 10 alphanumeric characters.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setOperatingMode(ISC.Instrument.Driver.OperatingMode,System.Int32)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.beginInstrumentZeroing">
            <summary>
            Begin zeroing of instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.endInstrumentZeroing">
            <summary>
            End Zeroing of instrument
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isInstrumentZeroing">
            <summary>
            Indicates if instrument is currently undergoing zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isSensorZeroing(System.Int32)">
            <summary>
            Returns whether or not specified sensor is currently zeroing or not.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operation on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a specific sensor.
            </summary>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isSensorEnabled(System.Int32)">
            <summary>
            Determine if a specific sensor is enabled or disabled.
            </summary>
            <param name="sensorPos"></param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.beginInstrumentCalibration">
            <summary>
            Put instrument into calibration mode.  Once instrument is in calibration
            mode, it's expected that beginSensorCalibration will be subsequently
            called for each sensor to calibrate.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.endInstrumentCalibration">
            <summary>
            Take instrument out of calibration mode.  This routine should be called
            either at the end of calibrating all sensors, or to abort calibration
            mode while in the middle of calibrating a particular sensor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>This method does nothing for this instrument type.</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>MX6 Override. Set all sensors to run mode. v4.4</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.beginSensorBump(System.Int32)">
            <summary>
            Begin Bump Test on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to bump.</param>
            <remarks>MX6 override. v4.4</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on specified sensor.  Requires that beginInstrumentCalibration
            be called previously to put instrument into calibration mode.
            </summary>
            <param name="sensorPositions">The sensor position to calibrate.
            (For this instrument type, only the first element in the passed-in eenumerable is used.)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.endSensorCalibration(System.Int32)">
            <summary>
            End calibration on specified sensor.  Requires that 
            beginCalibration be called previously to put
            instrument/sensor into calibration mode.
            </summary>
            <param name="sensorPos">Sensor currently calibrating.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operation on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getFavoritePidFactors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setFavoritePidFactors(System.String[])">
            <summary>
            
            </summary>
            <param name="pidFactors"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getCustomPidFactors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setCustomPidFactors(ISC.Instrument.Driver.CustomResponseFactor[])">
            <summary>
            
            </summary>
            <param name="customFactors"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getProfiles">
            <summary>
            Return a list of Profiles for this instrument.  If this instrument
            has no saved profiles, an empty list is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            Store the passed in array of Profiles to the instrument
            </summary>
            <param name="profiles">Collection of InstrumentProfile instances</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getFactoryProfile">
            <summary>
            Returns this instrument's factory profile.
            </summary>
            <returns></returns>
            <exception cref="T:ISC.Instrument.Driver.CommunicationException">If instrument has no current factory profile</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            For this instrument type, the maximum size of the returned array is 30.
            An empty array is returned if the instrument has no logged errors.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.clearInstrumentErrors">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setUsers(System.String[])">
            <summary>
            
            </summary>
            <param name="users"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSites">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSites(System.String[])">
            <summary>
            
            </summary>
            <param name="sites"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.Mx6Definition.MaxCompanyLength"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold">
            A percentage value that must be between MinBumpThreshold and MaxBumpThreshold.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpThreshold or MaxBumpThreshold).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBumpTimeoutSeconds">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="seconds">
            Value must be between MinBumpTimeout and MaxBumpTimeout.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpTimeout or MaxBumpTimeout).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorHighReading(System.Int32)">
            <summary>
            Get the Sensor Hi Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorHighReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorLowReading(System.Int32)">
            <summary>
            Get the Sensor Low Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorLowReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getHygiene">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.clearHygiene">
            <summary>
            Clears the datalog.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getAlarmEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.clearAlarmEvents">
            <summary>
            Deletes all alarm events currently stored on the instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isAccessoryPumpInstalled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getSystemAlarmErrorCode">
            <summary>
            Returns the instrument's current system error code.
            </summary>
            <returns>
            For the MX6, this method always returns 0 since the MX6 doesn't provide a way to obtain this value.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns>Timeout in seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getLastBumpTime(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns DateTime.MinValue for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Changes the wireless module's transmission interval.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type,
            because this is a factory-only setting for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets a custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessCustomEncryptionKey(System.String)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessMessageHops"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessMessageHops(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessMaximumPeers"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessMaximumPeers(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessActiveChannelMask">
            <summary>
            Returns a mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessPeerLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessPeerLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessNetworkLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessNetworkLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessReadingsDeadband"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessReadingsDeadband(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessFeatures"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessFeatures(System.UInt16)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessNetworkDisconnectDelay"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth software version number.
            </summary>
            <returns>The bluetooth software version and build number</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setWirelessBindingTimeout(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getWirelessBindingTimeout"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getWirelessAlarmMask">
            <summary>
            Returns the wireless module's alarm mask
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getBluetoothLoneWorkerOkMessageInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.enableWirelessFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.isWirelessFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.enableBluetoothFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.enableBluetoothFeature(System.Boolean)"/>        
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval
            </summary>
            <returns>Interval in minutes</returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setMaintenanceIndicatorInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <param name="interval">Interval in minutes</param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getMaintenanceIndicatorInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.setGpsReadingInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Driver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6Driver.getGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.Mx6Driver.TemperatureCompensationTableSize">
            <summary>
            Returns number of Temperature Compensation values for this instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.Mx6Driver.HasShutdownFeature">
            <summary>
            Indicates if the instrument can be turned off or not, via a modbus command.
            </summary>
            <remarks>
            Always returns false.  But, actually, the instrument CAN be shutdown.  But it was decided that
            datalink should not be allowed to, so this property lies, and returns false even when the real
            answer is true.
            <note>
            Making this return false just for the ISAS software when the instrument
            can actually shutdown was the wrong thing to do.  It makes the method specific
            to the ISAS software and useless to all other software.  If ISAS didn't like
            it returning "the truth", then we should have made ISAS deal with that problem
            in its own code. - JMP - 3/2012.
            </note>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.reset">
            <summary>
            Forces the instrument to reset itself.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.shutdownBattery">
            <summary>
            Opens the ground FET on the battery board. Once opened, there is no reply.
            The instrument and battery turn off.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.beginConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.InitConfiguration">
            <summary>
            This method is called by beginConfiguration write after the instrument reports in
            in FactoryUnitialized mode.
            The intent of this method is to all the driver to do some preliminary factory
            initialization of the instrument that application developers shouldn't have to
            worry about, such as zeroing certain registers, etc.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.endConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="serialNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="partNum">More than 8 chars gets truncated. Specify Empty string to blank out.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setJobNumber(System.String)">
            <summary>
            </summary>
            <param name="jobNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSetupTech(System.String)">
            <summary>
            Sets the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Sets the instrument's set-up date (and time).
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Set the Instrument Configuration Map Version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Sets the instrument hardware version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setMfgDate(System.DateTime)">
            <summary>
            Sets the instrument's Mfg date and time.
            </summary>
            <param name="dateTime">Mfg date and time</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            </summary>
            <param name="mfgLocation">1=US, 2=China, 3=Unknown</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Set minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Set maxiumum temperature reading
            </summary>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setDisplayedSensors(System.Int16)">
            <summary>
            Specify selected Sensor to Display;
            </summary>
            <param name="position">1 - 6 to display one sensor; or 100 (?) to display all.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setTemperature(System.Int16)">
            <summary>
            Sets current temperature reading.  For this instrument, throws NotSupportedException
            as the temperature is a read-only value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <returns>Millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatteryBarThreshold(System.Int32,System.Int16)">
            <summary>
            Sets maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <param name="threshold">Millivolts</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getBatteryLoThreshold">
            <summary>
            Voltage at which "battery low" is displayed.
            </summary>
            <returns>Millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatteryLoThreshold(System.Int16)">
            <summary>
            Voltage at which "battery low" is displayed.
            </summary>
            <returns>Millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getBatteryFailThreshold">
            <summary>
            Voltage at which "battery fail" is displayed.
            </summary>
            <returns>Millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary>
            Voltage at which "battery fail" is displayed.
            </summary>
            <param name="threshold">Millivolts.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            
            </summary>
            <param name="iscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getGainResistor(System.Int32)">
            <summary>
            Resistor value in ohms for current to voltage converter gain resistor.
            </summary>
            <remarks>
            <note>Does any software call this?</note>
            </remarks>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setGainResistor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="gainResistance"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorType(System.Int32,ISC.Instrument.Driver.SensorType)">
            <summary>
            Set 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setGasDecimalPlaces(System.Int32,ISC.Instrument.Driver.Resolution,ISC.Instrument.Driver.GasType)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="resolution"></param>
            <param name="gasType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setZeroLimit(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="zeroLimit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setPgaGainFactor(System.Int16)">
            <summary>
            Unsupported; does nothing.
            </summary>
            <param name="gainFactor"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setDeadbandValue(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensPos"></param>
            <param name="deadbandValue"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setFilterAlgorithm(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensPos"></param>
            <param name="filterAlgae"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setFilterLevel(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensPos"></param>
            <param name="filterLevel"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setFilterBand(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensPos"></param>
            <param name="filterBand"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensitivityHiLimit(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensitivityHiLimit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensitivityLoLimit(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensitivityLoLimit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensitivity(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensitivity"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorSerialNumber(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorPartNumber(System.Int32,System.String)">
            <summary>
            Sets the sensor's Part number
            </summary>
            <param name="sensorPos"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorMfgLocation(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorMeasurementType(System.Int32,ISC.Instrument.Driver.MeasurementType)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="type"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setTemperatureCompensation(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="tableIndex"></param>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorHardwareVersion(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="hardwareVersion"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorMfgTime(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="mfgTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorSetupDate(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="setupTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorInstallationTime(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="installTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setCalTimeoutSeconds(System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorPreconditionTime(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorPreconditionFlowrate(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorFlow"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorCalibrationFlowrate(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorFlow"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorBumpFlowrate(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorFlow"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorBaseline(System.Int32,System.Int32)">
            <summary>
            baseline is in nanoAmps, therefore resolution is not applied
            it is read only value.
            </summary>
            <param name="sensPos"></param>
            <param name="baseline"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's type code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Sxxxx" where 'x' is digits 0 or greater. e.g. "S0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorMaxTemperature(System.Int32,System.Int16)">
            <summary>
            Set the Sensor Max Temperature.
            </summary>
            <param name="sensorPos"></param>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setSensorMinTemperature(System.Int32,System.Int16)">
            <summary>
            Set the Sensor Min Temperature.
            </summary>
            <param name="sensorPos"></param>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setFactoryProfile(ISC.Instrument.Driver.InstrumentProfile)">
            <summary>
            Write's the specified profile to the instrument as its "factory profile".
            Note that once a factory profile is written, it can't be deleted; it can
            be updated, however, be calling this function again.
            </summary>
            <param name="factoryProfile"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.selectProfile(System.Int32)">
            <summary>
            
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.GetHygieneSession(System.Int32,System.String)">
            <summary>
            FOR DEBUGGING ONLY.
            </summary>
            <param name="sessionNum"></param>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.beginBatteryConfiguration">
            <summary>
            Places the battery pack into configuration mode.
            </summary>
            <remarks>
            To configure the battery, we must first place it into configuration mode.
            Then need to program the battery mode, serial number, part number, setup date,
            tech initials, and manufacturer.
            To configure the battery the battery mode must be set to a 0x10 then the five parameters set. 
            Once all five are set, the battery pack will automatically exit configuration mode.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.endBatteryConfiguration">
            <summary>
            Takes the battery pack out of configuration mode.  
            </summary>
            <remarks>
            Theoretically, the battery
            pack should automatically come out of configuration mode on its own once all
            required parameters are set.  This routine can be used to force it, though,
            should the board ever stay 'stuck' in configuration mode.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.isBatteryConfigured">
            <returns>
            True if instrument reports battery has been configured; else returns False.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatteryManufacturer(ISC.Instrument.Driver.Manufacturer)">
            <summary>
            Sets the manufacturer of the battery pack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatterySerialNumber(System.String)">
            <summary>
            Sets the serial number of the battery pack. 18 characters max.
            </summary>
            <param name="serialNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatteryPartNumber(System.String)">
            <summary>
            Sets the serial number of the battery pack. 8 characters max.
            </summary>
            <param name="partNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatterySetupTech(System.String)">
            <summary>
            Sets setup tech's initials. 4 characters max.
            </summary>
            <param name="setupTech"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatterySetupDate(System.DateTime)">
            <summary>
            Sets the time that this battery pack was setup.
            </summary>
            <param name="setupDate"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setBatteryType(System.String)">
            <summary>
            Writes the battery type to the battery pack
            </summary>
            <param name="batteryTypeCode">inet/ds2 code in the format "BP00x" where 'x' is battery type.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setAutoZeroClearingLimit(System.Int32)">
            <summary>
            Sets the autozero clearing limit on the instrument used for any installed LEL sensors.
            </summary>
            <remarks>
            This setting was introduced in 3.00.05.
            </remarks>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setAutoZeroInstantLimit(System.Int32)">
            <summary>
            Sets the autozero instant limit on the instrument used for any installed LEL sensors.
            </summary>
            <remarks>
            This setting was introduced in 3.00.05.
            </remarks>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setAutoZeroCalLimit(System.Int32)">
            <summary>
            Sets the autozero cal limit on the instrument used for any installed LEL sensors.
            </summary>
            <remarks>
            This setting was introduced in 3.00.05.
            </remarks>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setAutoZeroMode(System.Boolean)">
            <summary>
            Turns on/off the autozero functionality on the instrument used
            for any installed LEL sensors.
            </summary>
            <remarks>
            <para>
            Note that this should always be enabled for all customers' instruments.
            </para>
            <para>
            This setting was introduced in 3.00.05.
            </para>
            </remarks>
            <param name="on">
            If true,then autozero mode is turned On. False turns it off Off.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setDisplayContrast(System.Int16)">
            <summary>
            Set the contrast of the LCD.
            </summary>
            <param name="contrast"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getDisplayContrast">
            <summary>
            Get the current contrast setting of the LCD.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getProfilesSlots">
            <summary>
            Returns a flags field used to identify which profiles are defined for use.
            </summary>
            <returns>flags field containing information about which profiles are defined for use</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setProfilesSlots(System.UInt16)">
            <summary>
            Replaces the instruments flags field used to identify which profiles are defined for use.
            </summary>
            <param name="profileSlots"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getBatteryFuseErrors">
            <summary>
            Returns the status of the battery fuses.
            </summary>
            <returns>
            If the returned value is BatteryFuseErrors.None, then there are no errors.
            Otherwise, you need to examine the return value to figure out what fuses have failed.
            <para>
            Example...
            </para>
            <code>
            BatteryFuseErrors fuseErrors = driver.getBatteryFuseErrors();
            if ( fuseErrors != BatteryFuseErrors.None )
            {
                bool badPumpFuse = ( fuseErrors &amp;= BatteryFuseErrors.Pump ) == BatteryFuseErrors.Pump;
                bool badArmFuse = ( fuseErrors &amp;= BatteryFuseErrors.ARM ) == BatteryFuseErrors.ARM;
                // etc.
            }
            </code>
            </returns>
            <seealso cref="T:ISC.Instrument.Driver.Mx6FactoryDriver.BatteryFuseErrors"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.enableWireless(System.Boolean)">
            <summary>
            Enables the wireless option in the MX6's user interface.
            </summary>
            <remarks>
             Note that this method will do nothing if the instrument is not running v4.30 or newer firmware. 
            </remarks>
            <param name="enabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.isWirelessEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.getWirelessTransmissionInterval"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.setWirelessTransmissionInterval(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.isWirelessEnabled">
            <summary>
            Returns whether or not the MX6's wireless option is currently enabled.
            </summary>
            <returns>
            Note that this method always return false if the instrument is not running v4.30 or newer firmware.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.enableWireless(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.getWirelessTransmissionInterval"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.setWirelessTransmissionInterval(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless transmission interval setting.
            </summary>
            <returns>
            Note that this method always return zero if the instrument is not running v4.30 or newer firmware.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.enableWireless(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.isWirelessEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.getWirelessTransmissionInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6FactoryDriver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Changes the wireless transmission interval setting.
            </summary>
            <remarks>
            Note that this method will do nothing if the instrument is not running v4.30 or newer firmware. 
            </remarks>
            <param name="interval">
            Valid range is 0 to 300 seconds. If passed-in interval is outside this range, then
            the instrument will just ignore it and keep its current interval setting.
            <para>
            If set to 0, then wireless transmissions are turned off.</para>
            <para>
            If set to any other value between 1 and 300, then wireless transmissions will be sent each
            time the interval has lapsed.</para>
            <para>
            Default value is 1 second.</para>
            </param>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.enableWireless(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.isWirelessEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.setWirelessTransmissionInterval(System.Int32)"/>
        </member>
        <member name="P:ISC.Instrument.Driver.Mx6FactoryDriver.HasShutdownFeature">
            <summary>
            Turns off the instrument.
            Any communication port, etc. being used to communicate with the instrument are
            (intended to be ) left open.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6FactoryDriver.BatteryFuseErrors">
            <summary>
            Status of fuses returned by <see cref="M:ISC.Instrument.Driver.Mx6FactoryDriver.getBatteryFuseErrors"/>
            </summary>
            <remarks>
            Note that this enumeration has the "Flags" attribute, meaning it is to be treated as a bit field.
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.M40FactoryDriver">
            <summary>
            </summary>
            <remarks>
            TheM40FactoryDriver only exists because the "MultiGasModbusTool" utility
            software (used by development members for testing of instruments)
            requires instrument drivers to have classnames ending in "FactoryDriver".
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.M40Driver">
            <summary>
            This driver is used for M40, M40m, and M40ma multi-gas instruments.
            </summary>
            <remarks>
            It is <b>not</b> used for the M40 Pro instrument.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.connect(System.Boolean)">
            <summary>
            </summary>
            <param name="batching">Ignored by this instrument type.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.disconnect">
            <summary>
            For this instrument type, calling disconnect causes the Keep Alive thread to terminate.  
            </summary>
            <remarks>
            After calling, the result is the instrument will automatically
            turn off after aproximately two minutes if no more modbus
            communications occur.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.DoKeepAlive">
            <summary>
            Thread handler for background 'keep alive' thread.  The Keep 
            Alive thread 'pings' the M40 instrument every so many seconds
            to keep the instrument from turning off.
            </summary>
            <remarks>
            The M40 turns itself off automatically after aproximately 
            two minutes of no modbus communication activity.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            For this instrument type, this method doesn't do anything, since the instrument automatically
            saves any changed settings to flash when it is undocked.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 9600 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.ping">
            <summary>
            To 'ping' the instrument, we merely ask it for its type.  If it doesn't
            respond, the logic attempt to communicate with it will throw an exception.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getEquipmentType">
            <summary>
            Returns the instrument's type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument serial number
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSoftwareVersion">
            <summary>
            Return the instrument's firmware version
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getLastCalibrationTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Ignored.  For this instrument type, the Last Calibration date is the
            instrument's last calibration date, not the sensor's. Therefore, this parameter is always ignored.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorPositions">
            <summary>
            
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.GetInstalledSensors">
            <summary>
            Returns the number of currently installed sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., Toxic, Combustible, LEL, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCalGasHiLimit(System.Int32)">
            <summary>
            Not currently accessible outside of the driver.  Internal use only.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCalGasLoLimit(System.Int32)">
            <summary>
            Not currently accessible outside of the driver.  Internal use only.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorGasType(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Returns false if sensor's gas type is Oxygen, Hydrogen, Pentane, or Methane.
            Otherwise, true is returned.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Returns false if sensor's gas type is Oxygen, Hydrogen, Pentane, or Methane.
            Otherwise, true is returned.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always and empty string.  This instrument type doesn't support reading sensors' serial numbers.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Gas Alert alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Gas Alert alarm. Must not exceed the low alarm threshold.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Nothing. Always throws a NotSupportedException.
            This instrument type does have a security code, but it's not accessible to the driver.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSecurityCode(System.String)">
            <summary>
            </summary>
            <remarks>Throws a NotSupportedException.
            This instrument type does have a security code, but it's not accessible to the driver.
            </remarks>
            <param name="code"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getTime">
            <summary>
            Get the instrument's current time (year, month, day, hour, seconds).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setTime(System.DateTime)">
            <summary>
            Set fixed monitor's sensors to current time (year, month, day, hour, minutes)
            to the passed-in time.
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatteryType">
            <summary>
            M40 only supports 1 kind of battery
            </summary>
            <returns>"3.6V Lithium-Ion Cell"</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatteryVoltage">
            <summary>
            Returns the battery's voltage.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatterySerialNumber">
            <summary>
            Retrieve the instrument battery pack serial number.
            </summary>
            <returns>Empty string. M40 batteries have no serial number.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatteryPartNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatteryManufacturer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatterySetupTech">
            <summary>
            Returns the setup tech's initials.
            </summary>
            <param name="setupTech">Returns empty string. Not supported by this instrument</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatterySetupDate">
            <summary>
            Returns the time that this battery pack was setup.
            </summary>
            <param name="setupTech">Returns DateTime.MinValue. Not supported by this instrument</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatterySoftwareVersion">
            <summary>
            Returns the battery pack's software version.
            </summary>
            <returns>Returns empty string. Not supported by this instrument</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBatteryRunTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getOperatingMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCalGasString(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorSupportedCalGasConc(System.Int32)">
            <summary>
            For sensors allowing only particular cal gas concentrations (e.g. only 25 or 50),
            this method returns the concentrations that the sensor supports, otherwise null.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            The values in the returned array are the only concentrations allowed
            for the specified sensor.
            <para>
            For this instrument type, if the specified sensor is an LEL sensor, and if the
            instrument is an M40 (i.e., not M40m or M40ma), then this method will return 25 and 50.
            </para>
            <para>
            A null will be returned in all other cases.
            </para>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe/allowable to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Only returns true for M40's LEL sensor; otherwise false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <remarks>
            The M40 instruments (but not M40m or M40ma) allow their LEL sensor's concentration
            to be changed to either 25% or 50% LEL.   The driver handles this special case via
            a <see cref="T:ISC.Instrument.TypeDefinition.InstrumentMultiOption"/> with EnabledCode of'lelcalconc'.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getZeroLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensitivityHiLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensitivityLoLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorSensitivity(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorBaseline(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorSpanReserve(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getTemperatureCompensation(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <param name="tableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getFilterLevel(System.Int32)">
            <summary>
            Retrieves the sensor filtering magnitude value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getMeasurementRange(System.Int32)">
            <summary>
            Maximum allowable gas reading of the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            </param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by M40 since instrument only has 1 sensor</param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            This instrument type is not capable of logging errors, so this method 
            always just returns an empty array.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getAlarmEvents">
            <summary>
            </summary>
            <returns>Always returns an empty array for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getTwaReading(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getStelReading(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            </summary>
            <param name="languageId"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getLanguage">
            <summary>
            
            </summary>
            <returns>Always returns None.  The M40 instrument line has no language setting.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval (seconds).
            </summary>
            <returns>The instrument's hardcoded recording interval (can't be changed).</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval.  This method does nothing for this instrument type.
            </summary>
            <param name="intervalSeconds">Number of seconds.  Always ignored since this instrument type's recording interval is hardcoded.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getInstrumentPartNumber">
            <summary>
            </summary>
            <returns>Always returns empty string as this instrument type's part number is not accessible.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSetupTech">
            <summary>
            </summary>
            <returns>Always returns empty string as this instrument type's Setup Date is not accessible.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSetupDate">
            <summary>
            </summary>
            <returns>Always returns DateTime.MinValue as this instrument type's Setup Date is not accessible.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getMfgDate">
            <summary>
            </summary>
            <returns>Always returns DateTime.MinValue as this instrument type's Manufacturing Date is not accessible.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getJobNumber">
            <summary>
            </summary>
            <returns>Always returns empty string as this instrument type's Setup Date is not accessible.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            Always returns empty array as this instrument type has no diagnostics.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorSetupDate(System.Int32)">
            <summary>
            </summary>
            <returns>Always returns DateTime.MinValue as this instrument type's sesnor Setup Dates are not accessible.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            For this instrument type, this method does absolutely nothing;
            i.e. it immediately returns when called.
            </summary>
            <param name="on">This parameter is ignored for this instrument type.</param>
            <param name="wait">This parameter is ignored for this instrument type.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            This method does nothing for this instrument type
            since the instrument does not support enabling/disabling of 
            sensors. They are always enabled.
            </summary>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.isSensorEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true. Sensors in this instrument type cannot be
            enabled or disabled; they're always enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            NOTE: for this instrument, this method does nothing 
            since instrument does not support pausing of sensors.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setBumpInterval(System.Double)">
            <summary>
            Set the Bump Interval for the instrument.
            </summary>
            <param name="interval">Number of days</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getTotalAlarmTime">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorHighReading(System.Int32)">
            <summary>
            Get the Sensor Hi Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorHighReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSensorLowReading(System.Int32)">
            <summary>
            Get the Sensor Low Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorLowReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getMinTemperature">
            <summary>
            Get minimum temperature reading
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getHygieneSessionCount">
            <summary>
            Returns the number of datalog sessions currently stored on the instrument.
            </summary>
            <returns>For this instrument type, this method returns 1 or 0.  This is because that this
            instrument type only ever has one session.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.clearHygiene">
            <summary>
            Deletes all datalog data on the instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getHygiene">
            <summary>
            Returns the instrument's current datalog data.
            </summary>
            <returns>Note that for this instrument type, there will never be more than one session in the returned list.
            An empty list is returned if the instrument doesn't currently have any datalog.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.DecodeDatalogTimestamp(System.Byte[])">
            <summary>
            Extracts and returns the timestamp embedded in an M40's datalog packet
            </summary>
            <param name="record">A datalog packet containing the sensors' readings, temperature, and timestamp.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.DecodeDatalogTemperature(System.Byte[])">
            <summary>
            Extracts and returns the temperature embedded in an M40's datalog packet
            </summary>
            <param name="record">A datalog packet containing the sensors' readings, temperature, and timestamp.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.DecodeDatalogRawReading(System.Byte[],System.Int32,ISC.Instrument.Driver.DriverInstrumentDatalogSession)">
            <summary>
            Extracts and returns a sensor's reading that's embedded in an M40's datalog packet
            </summary>
            <param name="record">The datalog packet containing the sensors' readings, temperature, and timestamp.</param>
            <param name="sensorIdx">Which sensor's reading to decode - 0 through 3</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument current error code
            </summary>
            <returns>Instrument Current Error Code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns>Timeout in seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Changes the wireless module's transmission interval.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessNetworkDisconnectDelay"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets a custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessCustomEncryptionKey(System.String)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessMessageHops"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessMessageHops(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessMaximumPeers"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessMaximumPeers(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessActiveChannelMask">
            <summary>
            Returns a mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessPeerLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessPeerLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessNetworkLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessNetworkLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessReadingsDeadband"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessReadingsDeadband(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessFeatures"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessFeatures(System.UInt16)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth software version number.
            </summary>
            <returns>The bluetooth software version and build number</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setWirelessBindingTimeout(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getWirelessBindingTimeout"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getWirelessAlarmMask">
            <summary>
            Returns the wireless module's alarm mask
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getBluetoothLoneWorkerOkMessageInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.enableWirelessFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.isWirelessFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.enableBluetoothFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.enableBluetoothFeature(System.Boolean)"/>        
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval
            </summary>
            <returns>Interval in minutes</returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setMaintenanceIndicatorInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <param name="interval">Interval in minutes</param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getMaintenanceIndicatorInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getLastBumpTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns DateTime.MinValue for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.setGpsReadingInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.M40Driver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.M40Driver.getGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.M40Driver.KeepAlive">
            <summary>
            Used to stop/terminate the Keep Alive thread.
            When property is set to false, the thread will terminate.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.M40Driver.KeepAlivePaused">
            <summary>
            Used to temporarily 'pause' the Keep Alive thread.
            When paused, the Keep Alive thread will not ping the instrument.
            It will resume pinging when later un-paused.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Set the instrument serial number to the instrument.
            </summary>
            <param name="instrumentSerialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.setInstrumentTemperature(System.Int16)">
            <summary>
            Set the current ambline temperture to the instrument,
            It's always used for the instrument setup.
            </summary>
            <param name="instrumentTemperature"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.getBatteryLoThreshold">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40FactoryDriver.getBatteryFailThreshold">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.SensorProfile">
            <summary>
            Summary description for DriverSensorProfile.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Tx1FactoryDriver">
            <summary>
            For use with the TX1 instrument factory software.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Tx1Driver">
            <summary>
            Driver for the TX1 instrument
            </summary>
            <seealso cref="T:ISC.Instrument.TypeDefinition.Tx1Definition"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.Init">
            <summary>
            Called by all constructors to perform mandatory initialization of the instance.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.shutdown">
            <summary>
            Places the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.DockedLowPower">DockedLowPower</see> mode.
            </summary>
            <remarks>
            <see cref="F:ISC.Instrument.Driver.OperatingMode.DockedLowPower">DockedLowPower</see> mode causes the instrument's
            IrDA to be turned off, to save the battery.  It therefore no longer resoonds to
            Modbus communication once it enteres DockedLowPower mode.
            <para>
            To re-establish communication with the instrument, <see cref="M:ISC.Instrument.Driver.Tx1Driver.connect(System.Boolean)"/> must be called
            which will "blast" the instrument with IrDA packets to wake the instrument back up.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            For this instrument type, this method doesn't do anything, since the instrument automatically
            saves any changed settings to flash when it is undocked.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.connect(System.Boolean)">
            <summary>
            </summary>
            <param name="batching">Ignored by this instrument type. For this instrument type, a "batched connection" is <b>always</b> established.
            <note>We can get away with always doing a batched connection, because once the instrument is set to a high baud rate,
            it will stay at that baud rate for up to 10 minutes. (If nothing talks to it for 10 minutes, it "times out" and
            turns off its IrDA at which point it needs to be "blasted" awake again.)
            </note>
            <note>Additional caveat: The instrument may revert to a slow baud rate if sees "garbage" Irda
            packets being sent to it, as it assumes the garbage data might be something trying to talk to it
            at a slow baud rate. When this happens (rarely), the driver is able to recover and re-connect relatively quickly.
            </note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setPortSpeed(System.Int32)">
            <summary>
            Set the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 9600 or 115200 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            Change the instrument's current mode. i.e., make it start calibrating,
            or put it into bump test mode, etc.
            </summary>
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setOperatingMode(ISC.Instrument.Driver.OperatingMode,System.Int32)">
            <summary>
            Change the instrument's current mode. i.e., make it start calibrating,
            or put it into bump test mode, etc.
            </summary>
            <param name="operatingMode"></param>
            <param name="retries"></param>
            <exception cref="T:ISC.Instrument.Driver.CommunicationException">
            Thrown if instrument fails to go into the specified mode (i.e. if remains stuck in its current mode.
            </exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it is done here.
            </summary>
             <remarks>
            For this instrument type, this method puts the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.Bumping">bump mode</see>.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentBump"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>
            This method does nothing for this instrument type.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentBump"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentCalibration">
            <summary>
            Put instrument into calibration mode.
            </summary>
            <remarks>
            For this instrument, when it's put into calibration mode,
            all sensors immediately start calibrating. Therefore, it
            is not necessary to call beginSensorCalibration.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentCalibration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentCalibration">
            <summary>
            Intended to End/abort calibration mode on instrument.
            This method does nothing for this instrument type.
            </summary>
            <remarks>
            This method does nothing for this instrument type.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentCalibration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on specified sensor.
            </summary>
            <remarks>
            This method does nothing for this instrument type.
            For this instrument, when it's put into calibration mode
            (<see cref="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentCalibration"/>,
            all sensors immediately start calibrating.
            </remarks>
            <param name="sensorPositions">Sensor(s) to calibrate.
            This parameter is ignored by this instrument type.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.endSensorCalibration(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.endSensorCalibration(System.Int32)">
            <summary>
            End calibration on specified sensor.
            </summary>
            <param name="sensorPos">Sensor currently calibrating.</param>
            <remarks>
            This method does nothing for this instrument type.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentZeroing">
            <summary>
            Commands the instrument to begin zeroing its sensors.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentZeroing"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isInstrumentZeroing"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentZeroing">
            <summary>
            Ends zeroing of instrument
            </summary>
            <remarks>
            For this instrument type, this method does nothing.  Instrument
            automatically leaves zeroing mode.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentZeroing"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isInstrumentZeroing"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isInstrumentZeroing">
            <summary>
            Indicates if instrument is currently undergoing zeroing.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.beginInstrumentZeroing"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.endInstrumentZeroing"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isSensorZeroing(System.Int32)">
            <summary>
            Indicates if specified sensor is currently zeroing.
            </summary>
            <remarks>
            Since this instrument type only has one sensor,
            calling this method is the same as calling isInstrumentZeroing.
            </remarks>
            <param name="sensorPos">Ignored for this instrument type.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">
            Sensor to query status on.
            </param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSoftwareVersion">
            <summary>
            Retrieves the instrument software version.  Format is "Version.SubVersion.BuildNumber";
            e.g. "1.20.10".
            </summary>
            <returns>Formatted software version</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMfgDate">
            <summary>
            Retrieves the instrument's setup date.
            </summary>
            <remarks>
            This method returns the same value that <see cref="M:ISC.Instrument.Driver.Tx1Driver.getSetupDate"/> returns.
            </remarks>
            <returns>
            The returned date will have a valid year, date, month.  The time portion will always be midnight, though.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getSetupDate"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSetupDate">
            <summary>
            Retrieves the instrument's set-up date.
            </summary>
            <returns>
            The returned date will have a valid year, date, month.  The time portion will always be midnight, though.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getMfgDate"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSetupTech">
            <summary>
            Retrieves the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getRecordingInterval">
            <summary>
            Returns the datalog recording interval.
            </summary>
            <returns>Number of seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval.
            </summary>
            <param name="intervalSeconds">Ignored.</param>
            <exception cref="T:System.NotSupportedException">
            Always thrown for this instrument type
            because its recording interval cannot be modified.
            </exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting
            for TWA calculations.
            </summary>
            <returns>Time base setting (in hours)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting used for TWA calculations
            </summary>
            <param name="timeBaseHours">Time base setting (in hours)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Access code</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMinTemperature">
            <summary>
            Get minimum temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. -12</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns>Value is in degrees celsius; e.g. 31</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. 21.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatteryType">
            <summary>
            Returns the battery type code.
            </summary>
            <returns>Empty string. This instrument type's batteries have no battery code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatteryVoltage">
            <summary>
            Returns the battery's last known voltage.
            </summary>
            <remarks>
            The TX1 reads the battery during its self-test, so the returned value is not the the current voltage,
            and is only the last known voltage.
            </remarks>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatterySerialNumber">
            <summary>
            Retrieve the instrument battery pack serial number.
            </summary>
            <returns>Empty string. This instrument type's batteries have no serial number.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatteryPartNumber">
            <summary>
            </summary>
            <returns>Always returns "N/A". This instrument type's batteries have no part number.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatteryManufacturer">
            <summary>
            </summary>
            <returns>Always return <see cref="F:ISC.Instrument.Driver.Manufacturer.IndustrialScientific"/> for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatterySetupTech">
            <summary>
            Returns the setup tech's initials.
            </summary>
            <returns>Always returns an empty string. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatterySetupDate">
            <summary>
            Returns the time that this battery pack was setup.
            </summary>
            <returns>Always returns DateTime.MinValue. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatterySoftwareVersion">
            <summary>
            Returns the battery pack's software version.
            </summary>
            <returns>Always returns an empty string. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBatteryRunTime">
            <summary>
            </summary>
            <returns>Not supported by this instrument.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getTime">
            <summary>
            Returns the instrument's current time (year, month, day, hour, seconds).
            </summary>
            <returns>The returned DateTime is assumed to be 'local time,
            so its Kind property is set to DateTimeKind.Local.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setTime(System.DateTime)">
            <summary>
            Set fixed monitor's sensors to current time (year, month, day, hour, minutes)
            to the passed-in time.
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval">Number of days</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSites">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSites(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getUsers">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setUsers(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getFavoritePidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setFavoritePidFactors(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getCustomPidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setCustomPidFactors(ISC.Instrument.Driver.CustomResponseFactor[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getProfiles">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getFactoryProfile">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getConfigurationVersion">
            <summary>
            Get the Instrument Configuration Map Version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getInstrumentPartNumber">
            <summary>
            Returns the instrument's part number.
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument's serial number
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getJobNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMfgLocation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getHardwareVersion">
            <summary>
            Retrieves the instrument hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns>Value is a percentage.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold">
            A percentage value that must be between MinBumpThreshold and MaxBumpThreshold.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpThreshold or MaxBumpThreshold).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBumpTimeoutSeconds">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="seconds">
            Value must be between MinBumpTimeout and MaxBumpTimeout.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpTimeout or MaxBumpTimeout).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <returns>Returned value will be in 0.5 day increments.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setBumpInterval(System.Double)">
            <summary>
            Set the Bump Interval for the instrument.
            </summary>
            <param name="interval">Number of days, inn 0.5 day increments.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument's current error code.
            </summary>
            <returns>Instrument's current error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getLastDockTime">
            <summary>
            Returns the instrument's last dock time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>BatteryVoltage</item>
            <item>BatteryImpedance</item>
            <item>BatteryStatus</item>
            <item>SpeakerCurrent</item>
            <item>VibratingAlarmCurrent</item>
            <item>RightLedCurrent</item>
            <item>LeftLedCurrent</item>
            <item>CenterLedCurrent</item>
            <item>BacklightLedCurrent</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the instrument to a specific language.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getLanguage">
            <summary>
            Returns the language that the instrument is currently set to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getTotalAlarmTime">
            <summary>
            Returns the total amount of time this instrument has been in an alarm state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.clearAlarmEvents">
            <summary>
            Deletes all alarm events currently stored on the instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            For this instrument type, the maximum size of the returned array is 30.
            An empty array is returned if the instrument has no logged errors.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getCountryOfOrigin">
            <summary>
            Returns the instrument's current "Country of Origin" setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorPartNumber(System.Int32)">
            <summary>
            Retrieves the sensor part number.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Sensor part number. Max of 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            </param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operating on specified sensor.
            </summary>
            <param name="sensorPos">
            Sensor to query status on.
            </param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getPeakReading(System.Int32)">
            <summary>
            Returns a sensor's peak reading
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>true for all sensors, except Oxygen and Hydrogen which return false.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>true for all sensors, except Oxygen and Hydrogen which return false.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting.
            </summary>
            <remarks>
            This is an alarm for a gas level that is lower than the low alarm.
            <note>
            This method should only be
            called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGasAlertFeature"/> returns true.
            </note>
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Alert alarm.</returns>
            <exception cref="T:System.NotSupportedException">NotSupportedException will be thrown if instrument is not running v1.8 or newer firmware.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting.
            </summary>
            <remarks>
            This is an alarm for a gas level that is lower than the low alarm.
            <note>
            This method should only be
            called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasGasAlertFeature"/> returns true.
            </note>
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Alert alarm.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException will be thrown if instrument is not running v1.8 or newer firmware.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalGasString(System.Int32)">
            <summary>
            For this instrument type, this method merely returns the cal gas code.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalGasCode(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getZeroLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensitivityHiLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensitivityLoLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorSensitivity(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getTwaReading(System.Int32)">
            <summary>
            Get the TWA Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getStelReading(System.Int32)">
            <summary>
            Get the STEL Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorBaseline(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorSpanReserve(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor was exposed.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getFilterAlgorithm(System.Int32)">
            <summary>
            Filtering algorithm used for sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns>0 means no filtering for the sensor.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getFilterLevel(System.Int32)">
            <summary>
            Retrieves the level of filtering for the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns zero for this instrument type.  Filtering is always a simple average.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMeasurementRange(System.Int32)">
            <summary>
            Maximum allowable gas reading of the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getCalTimeoutSeconds(System.Int32)">
            <summary>
            Get Calibration timeout for specified sensor
            </summary>
            <param name="sensorPos">The position of the sensor to check.</param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorMeasurementType(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorMfgTime(System.Int32)">
            <summary>
            Returns the sensor's manfucturing date.
            </summary>
            <remarks>
            This is NOT returning the same date that <see cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorSetupDate(System.Int32)"/> returns.
            <para>Not sure what the difference between the to dates is.</para>
            </remarks>
            <param name="sensorPos"></param>
            <returns>The returned date will have a valid year, date, month.  The time portion will always be midnight, though.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorSetupDate(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorSetupDate(System.Int32)">
            <summary>
            Returns the sensor's setup date.
            </summary>
            <remarks>
            This is NOT returning the same date that <see cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorMfgTime(System.Int32)"/> returns.
            <para>Not sure what the difference between the to dates is.</para>
            </remarks>
            <param name="sensorPos"></param>
            <returns>The returned date will have a valid year, date, month.  The time portion will always be midnight, though.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getSensorMfgTime(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorPreconditionTime(System.Int32)">
            <summary>
            Get the Precondition Time for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Number of seconds.
            Zero is returned if sensor should not be preconditioned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            Get the Precondition Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            Get the Calibration Flow Rate for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            Get the Bump Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getLastBumpTime(System.Int32)">
            <summary>
            Returns the last time the sensor was bumped, either by hand or via DS2/cal station.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <remarks>
            Note that there is no "getSensorBumpFault"
            that reads the same register that this "set" function writes to.
            In order to determine if
            a sensor is in bump fault, the SensorMode for the sensor should be looked at.
            </remarks>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getHygiene">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.clearHygiene">
            <summary>
            Clears the recorded datalog.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status.
            </summary>
            <returns>Always throws NotSupportedException for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getChargePhase">
            <summary>
            
            </summary>
            <returns>Always returns ChargePhase.ChargeOff for this instrument type since it is not a rechargeable instrument.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBacklightOption">
            <summary>
            Returns this instrument's current backlight configuraiton option
            </summary>
            <returns>Always returns 'Timed' for this instrument.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            
            </summary>
            <param name="inBLO"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
            <param name="timeout"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isSensorEnabled(System.Int32)">
            <summary>
            Returns whether or not user has disabled the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true. Sensors in this instrument type cannot be
            enabled or disabled by the user; they're always enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorHighReading(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorHighReading(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorLowReading(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setSensorLowReading(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorPositions">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.GetSensorMode(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enables/disables a sensor.
            </summary>
            <remarks>
            This method does nothing for this instrument type
            since the instrument does not support enabling/disabling of 
            sensors. They are always enabled.
            </remarks>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorConfigVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getSensorHardwareVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns 0 since this instrument's sensors don't support a "hardware version".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            Commands the instrument to power on/off its sensors.
            </summary>
            <remarks>
            When called, this method powers on the instrument by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Running"/>.
            It powers off the instrument by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Docked"/>.
            </remarks>
            <param name="on">Specify true to turn on, false to turn off.</param>
            <param name="wait">Only applies if "on" parameter is true; otherwise, it is ignored.
            <para>If this paramter is True, then after the the instrument is commanded to warmup its
            sensors, it will wait for the warmup to complete before returning.</para>
            <para>If this paramter is False, then after the instrument is commanded to warmup its
            sensors, this method will immediately return; i.e., it will not wait for the warmup to complete.
            The intention is to to have the instrument warm up its sensors in "the background" while
            the calling application continues to communicate with the instrument for other things.
            </para>
            </param>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">Thrown if instrument fails to warmup.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval in minutes
            </summary>
            <remarks>
            Number of minutes between the sounding of the bump,cal or dock overdue indicators
            <note>
            This method should only be
            called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasMaintenanceIndicatorIntervalConfigFeature"/> returns true.
            </note>
            </remarks>
            <returns>The instrument's maintenance indicator interval in minutes</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setMaintenanceIndicatorInterval(System.Int32)"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasMaintenanceIndicatorIntervalConfigFeature"/>
            <exception cref="T:System.NotSupportedException">NotSupportedException will be thrown if instrument is not running v1.8 or newer firmware.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <remarks>
            Number of minutes between the sounding of the bump,cal or dock overdue indicators
            <note>
            This method should only be
            called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasMaintenanceIndicatorIntervalConfigFeature"/> returns true.
            </note>
            </remarks>
            <param name="interval">Value is in minutes and must be within range defined by 
            MinMaintenanceIndicatorInterval and MaxMaintenanceIndicatorInterval.
            Otherwise, specified value will be auto-adjusted to the correct value
            (either MinMaintenanceIndicatorInterval or MaxMaintenanceIndicatorInterval).
            adjusted to be within the range.
            </param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasMaintenanceIndicatorIntervalConfigFeature"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinMaintenanceIndicatorInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxMaintenanceIndicatorInterval"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getMaintenanceIndicatorInterval"/>
            <exception cref="T:System.NotSupportedException">NotSupportedException will be thrown if instrument is not running v1.8 or newer firmware.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getMagneticFieldDuration">
            <summary>
            Returns the instrument's current "Magnetic field duration" setting.
            </summary>
            <remarks>
            If the instrument detects no Modbus communications within this number of seconds after its
            reed switch indicates it's been docked, then the instrument disregards the reed switch indication
            as a "false docking".  This is to avoid problems where reed switch sometimes closes when usser
            carries the instrument into an environment with a strong magnetic field.
            then the instrument considers the dock.
            <para>
            This setting is only used if instrument's "MAG" option is currently enabled.
            </para>
            </remarks>
            <returns>Value is in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setMagneticFieldDuration(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setMagneticFieldDuration(System.Int32)">
            <summary>
            Changes the instrument's "Magnetic field duration" setting.
            </summary>
            <remarks>
            If the instrument detects no Modbus communications within this number of seconds after its
            reed switch indicates it's been docked, then the instrument disregards the reed switch indication
            as a "false docking".  This is to avoid problems where reed switch sometimes closes when a user
            carries the instrument into an environment with a strong magnetic field.
            then the instrument considers the dock.
            <para>
            This setting is only used if the instrument's "MAG" option is currently enabled.
            </para>
            </remarks>
            <param name="duration">Value is in seconds and must be within range defined by 
            MinMagneticFieldDuration"/&gt; and MaxMagneticFieldDuration.
            Otherwise, specified value will be auto-adjusted to the correct value
            (either MinMagneticFieldDuration or MaxMagneticFieldDuration).
            adjusted to be within the range.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getMagneticFieldDuration"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinMagneticFieldDuration"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxMagneticFieldDuration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getDockInterval">
            <summary>
            Returns the instrument's "Dock interval" setting in days.
            </summary>
            <remarks>
            <note>
            This method should only be
            called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasDockIntervalConfigFeature"/> returns true.
            </note>
            </remarks>
            <returns>The instrument's dock interval setting in days</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setDockInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">NotSupportedException will be thrown if instrument is not running v1.8 or newer firmware.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <remarks>
            <note>
            This method should only be
            called if <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasDockIntervalConfigFeature"/> returns true.
            </note>
            </remarks>
            <param name="interval">Value is in days and must be within range defined by 
            MinDockInterval and MaxDockInterval.
            Otherwise, specified value will be auto-adjusted to the correct value
            (either MinDockInterval or MaxDockInterval).
            adjusted to be within the range.
            </param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MinDockInterval"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxDockInterval"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getDockInterval"/>
            <exception cref="T:System.NotSupportedException">NotSupportedException will be thrown if instrument is not running v1.8 or newer firmware.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Changes the wireless module's transmission interval.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets a custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessCustomEncryptionKey(System.String)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessMessageHops"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessMessageHops(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessMaximumPeers"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessMaximumPeers(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessActiveChannelMask">
            <summary>
            Returns a mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessPeerLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessPeerLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessNetworkLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessNetworkLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessReadingsDeadband"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessReadingsDeadband(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessFeatures"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessFeatures(System.UInt16)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessNetworkDisconnectDelay"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth software version number.
            </summary>
            <returns>The bluetooth software version and build number</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setWirelessBindingTimeout(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getWirelessBindingTimeout"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getWirelessAlarmMask">
            <summary>
            Returns the wireless module's alarm mask
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getBluetoothLoneWorkerOkMessageInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.enableWirelessFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isWirelessFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.enableBluetoothFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.enableBluetoothFeature(System.Boolean)"/>        
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.setGpsReadingInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1Driver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.getGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.Tx1Driver.HasShutdownFeature">
            <summary>
            Indicates if the instrument can be turned off or not, via a modbus command.
            </summary>
            <remarks>
            Always returns true for this instrument type.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.factoryShutdown">
            <summary>
            Places the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.FactorySleep">factory sleep</see> mode.
            </summary>
            <remarks>
            When instrument is in <see cref="F:ISC.Instrument.Driver.OperatingMode.FactorySleep">factory sleep</see> mode,
            it will continue to respond to Modbus communication until it is undocked.
            <para>
            When undocked, the instrument will automatically power down, even if the AlwaysOn option is enabled,
            and if the security code is set. 
            </para>
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.shutdown"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.beginConfiguration">
            <summary>
            Placed the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </summary>
            <exception cref="T:ISC.Instrument.Driver.ConfigurationException">
            Thrown if instrument will not enter <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.endConfiguration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.InitConfiguration">
            <summary>
            This method is called by beginConfiguration write after the instrument reports in
            in FactoryUnitialized mode.
            The intent of this method is to all the driver to do some preliminary factory
            initialization of the instrument that application developers shouldn't have to
            worry about, such as zeroing certain registers, etc.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.endConfiguration">
            <summary>
            This method should be called at the end of configuring the instrument.
            The methods waits for the instrument to exit <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </summary>
            <remarks>
            The instrument is considered configured if its mode changes to either <see cref="F:ISC.Instrument.Driver.OperatingMode.Running"/>
            or <see cref="F:ISC.Instrument.Driver.OperatingMode.WarmingUp"/>.  The instrument will change to
            these modes after being successfully configured because it automatically
            reboots itself, which then causes it to go through its warmup routine.
            </remarks>
            <exception cref="T:ISC.Instrument.Driver.ConfigurationException">
            Thrown if instrument remains stuck in <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode
            or enters an unexpected mode.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.beginConfiguration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.CheckConfigParameters">
            <summary>
            This is a helper method for endConfiguration().
            </summary>
            <remarks>
            After an instrument is configured, it instrument saves the newly configured register values to
            flash memory and then reboots. Once this happens, its firmware needs to read the parameters
            back out of the flash memory. This routine polls the CONFIG_PARAMETERS_INITIALIZED register
            to 87 to determine when the instrument is done doing this.
            This register is 0 when the instrument is powered on. When the instrument
            parameters are completely read out of Flash memory, it is set to 1. If the
            instrument is set to Factory Uninitialized mode, the value is set to 0 again.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.reset">
            <summary>
            Forces the instrument to reset itself.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Writes the instrument's serial number.
            </summary>
            <param name="serialNum">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Writes the instrument's part number.
            </summary>
            <param name="partNum">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSetupTech(System.String)">
            <summary>
            Writes the instrument's set-up technician's initials.
            </summary>
            <param name="setupTech">
            Must be 4 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Writes the date of manufacture.  i.e., the "setup date".
            </summary>
            <param name="dateTime">Only the month day and year are used. The time-portion of the DateTime is ignored.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setJobNumber(System.String)">
            <summary>
            Writes the manufacuring "job number" field.
            </summary>
            <param name="jobNum">
            Must be 8 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Writes the instrument's "Configuration Map Version" number.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Writes the instrument's hardware version number.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            Writes the instrument's manufacturing location.
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryFailThreshold">
            <summary>
            Returns the voltage that represents "battery fail" on display
            </summary>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary>
            Writes the value of battery voltage that represents a "battery fail" on the display.
            </summary>
            <param name="threshold">A millivolts value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Writes the instrument's minimum temperature reading.
            </summary>
            <param name="temp">Celsius.  To initialize, it's recommended to write a value of 100.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Writes the instrument's maximum temperature reading.
            </summary>
            <param name="temp">Celsius.  To initialize, it's recommended to write a value of -100.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            Set whether or not the instrument is owned by ISC (i.e., is a rental instrument).
            </summary>
            <param name="isIscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryTempCompLow">
            <summary>
            Returns the instrument's Battery Temperature Compensation Low value.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryTempCompLow(System.Int16)">
            <summary>
            Writes the instrument's Battery Temperature Compensation Low value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryTempCompHigh">
            <summary>
            Returns the instrument's Battery Temperature Compensation High value.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryTempCompHigh(System.Int16)">
            <summary>
            Writes the instrument's Battery Temperature Compensation High value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryTempCompInflection">
            <summary>
            Returns the instrument's Battery Temperature Inflection value.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryTempCompInflection(System.Int16)">
            <summary>
            Writes the instrument's Battery Temperature Inflection value.
            </summary>
            <param name="inflection"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setIndicatorTest(ISC.Instrument.Driver.IndicatorTest)">
            <summary>
            Turn on alarm indicator(s) to perform verification / test of them.
            </summary>
            <param name="indicatorTest">
            One or more bits specifying which indicators to turn on.
            To turn off all indicators, specify <see cref="F:ISC.Instrument.Driver.IndicatorTest.NoIndicator">.</see>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDockedPowerThreshold">
            <summary>
            Returns the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This parameter used by the instrument to determine at what voltage
            to allow Modbus communication immediately at instrument startup.
            </remarks>
            <returns>Value is in millivolts.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDockedPowerThreshold(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDockedPowerThreshold(System.Int16)">
            <summary>
            Sets the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This parameter used by the instrument to determine at what voltage
            to allow Modbus communication immediately at instrument startup.
            </remarks>
            <param name="threshold">A millivolts value.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDockedPowerInterval">
            <summary>
            Returns the instrument's Battery Docked Power Interval.
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <returns>Value is in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDockedPowerInterval(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDockedPowerInterval(System.Int16)">
            <summary>
            Sets the instrument's "Battery Docked Power Interval".
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <param name="interval">Value is in seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDockedPowerInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceMaxDifference">
            <summary>
            Returns the "battery maximum impedance difference" configuration setting.
            </summary>
            <returns>Number of milliohms</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceMaxDifference(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceMaxDifference(System.UInt16)">
            <summary>
            Sets the "battery maximum impedance difference" configuration setting.
            </summary>
            <param name="max">Number of milliohms</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceMaxDifference"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceMax">
            <summary>
            Returns the "battery maximum impedance" configuration setting.
            </summary>
            <returns>Number of milliohms</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceMax(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceMax(System.UInt16)">
            <summary>
            Sets the "battery maximum impedance" configuration setting.
            </summary>
            <param name="impedance">Number of milliohms</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceMax"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepletionVoltage">
            <summary>
            Returns the "battery depletion voltage" configuration setting.
            </summary>
            <returns>Value is in millivolts.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepletionVoltage(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepletionVoltage(System.Int16)">
            <summary>
            Sets the "battery depletion voltage" configuration setting.
            </summary>
            <param name="voltage">Value is in millivolts.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepletionVoltage"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryTempDifference">
            <summary>
            Sets the "temperature difference" value used by instrument's battery test algorithm.
            </summary>
            <remarks>
            If difference between the ambient temperature measured at time of battery test and current
            temperature is more than 10 degrees Celsius then battery test is performed and battery
            impedance is checked for fail threshold condition only.
            </remarks>
            <returns>A celsius temperature difference</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryTempDifference(System.Int16)">
            <summary>
            Sets the "temperature difference" value used by instrument's battery test algorithm.
            </summary>
            <remarks>
            If difference between the ambient temperature measured at time of battery test and current
            temperature is more than 10 degrees Celsius then battery test is performed and battery
            impedance is checked for fail threshold condition only.
            </remarks>
            <param name="temp">A celsius temperature difference</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryFailImpedance">
            <summary>
            Returns the impedance fail value used by instrument's battery test algorithm.
            </summary>
            <remarks>
            As part of the instrument's battery test, if the battery impedance is above the fail
            threshold then instrument enters intensive low battery warning for 10 minutes.
            </remarks>
            <returns>Value is in milliohms.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryFailImpedance(System.UInt16)">
            <summary>
            Sets the impedance fail value used by instrument's battery test algorithm.
            </summary>
            <remarks>
            As part of the instrument's battery test, if the battery impedance is above the fail
            threshold then instrument enters intensive low battery warning for 10 minutes.
            </remarks>
            <param name="impedence">Value is in milliohms.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryTestInterval">
            <summary>
            Returns the "test interval" value used by instrument's battery test algorithm.
            </summary>
            <remarks>
            When low battery is detected then low battery warning is started.
            During low battery warning the battery test is performed at user settable interval
            - to check the battery status again. 
            </remarks>
            <returns>Number of minutes.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryTestInterval(System.Int16)">
            <summary>
            Sets the "test interval" value used by instrument's battery test algorithm.
            </summary>
            <remarks>
            When low battery is detected then low battery warning is started.
            During low battery warning the battery test is performed at user settable interval
            - to check the battery status again. 
            </remarks>
            <param name="interval">Number of minutes.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getConverterOnTemperatureThreshold">
            <summary>
            Returns the "converter on temperature threshold" configuration setting.
            </summary>
            <returns>Temperature in degrees Celsius.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setConverterOnTemperatureThreshold(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setConverterOnTemperatureThreshold(System.Int16)">
            <summary>
            Sets the "converter on temperature threshold" configuration setting.
            </summary>
            <param name="temperature">Temperature in degrees Celsius.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getConverterOnTemperatureThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getConverterOnImpedanceThreshold">
            <summary>
            Returns the "converter on impedance threshold" configuration setting.
            </summary>
            <returns>Value is in milliohms.</returns>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.setConverterOnImpedanceThreshold(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setConverterOnImpedanceThreshold(System.UInt16)">
            <summary>
            Sets the "converter on impedance threshold" configuration setting.
            </summary>
            <param name="impedance">A milliohms value.</param>
            <seealso cref="M:ISC.Instrument.Driver.Tx1FactoryDriver.getConverterOnImpedanceThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmReadingExponent">
            <summary>
            Returns the Algorithm's reading exponent, "N".
            </summary>
            <returns>An integer value with range 5 to 9.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmReadingExponent(System.Int32)">
            <summary>
            Writes the Algorithm's reading exponent, "N".
            </summary>
            <param name="exponent"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmO2ReadingDiff">
            <summary>
            Returns the Algorithm's maximum difference allowed, |e|, for readings between oxygen sensors.
            </summary>
            <returns>Floating point value with 2 decimal places, representing %Vol of O2.  e.g. "20.55". </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmO2ReadingDiff(System.Double)">
            <summary>
            Writes the Algorithm's maximum difference allowed, |e|, for readings between oxygen sensors.
            </summary>
            <param name="difference">Floating point value representing %Vol of O2, with max of 2 decimal places.  e.g. 20.55. but not 20.551.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmBumpResponseTimeDiff">
            <summary>
            Returns the Algorithm's maximum allowed difference in response times between a pair of sensors.
            for a successful bump test.
            </summary>
            <remarks>A percentage value.  e.g., 30 for "30%".</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmBumpResponseTimeDiff(System.Int16)">
            <summary>
            Write the Algorithm's maximum allowed difference in response times between a pair of sensors.
            </summary>
            <param name="difference">A percentage value.  e.g., 30 for "30%".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmMinCalPassSpan">
            <summary>
            Returns the Algorithm's minimum span reserve that each sensor is required to have to pass calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmMinCalPassSpan(System.Int32)">
            <summary>
            Writes the Algorithm's minimum span reserve that each sensor is required to have to pass calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmMaxCalPassSpan">
            <summary>
            Returns the Algorithm's maximum span reserve that each sensor is allowed to have to pass calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmMaxCalPassSpan(System.Int32)">
            <summary>
            Writes the Algorithm's maximum span reserve that each sensor is allowed to have to pass calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmCalDueThreshold">
            <summary>
            Returns the Algorithm's threshold for calibration due: the threshold is a fraction of high alarm value for requesting calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmCalDueThreshold(System.Int32)">
            <summary>
            Writes the Algorithm's threshold for calibration due: the threshold is a fraction of high alarm value for requesting calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmToxicReadingDiff">
            <summary>
            Returns the Algorithm's maximum allowed difference for readings between toxic sensors.
            </summary>
            <returns>A percentage value with range 20% to 30%.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmToxicReadingDiff(System.Int32)">
            <summary>
            Writes the Algorithm's maximum allowed difference for readings between toxic sensors.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmReadingThresholdSO2">
            <summary>
            Returns the Algorithm's reading threshold for SO2.
            </summary>
            <returns>A value in PPM, with a resolution of 1.  e.g. "12.5".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmReadingThresholdSO2(System.Double)">
            <summary>
            Writes the Algorithm's reading threshold for SO2.
            </summary>
            <param name="threshold">A value in PPM, with a resolution of 1.  e.g. "12.5".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmReadingThresholdNO2">
            <summary>
            Returns the Algorithm's reading threshold for NO2.
            </summary>
            <returns>A value in PPM, with a resolution of 1.  e.g. "12.5".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmReadingThresholdNO2(System.Double)">
            <summary>
            Writes the Algorithm's reading threshold for NO2.
            </summary>
            <param name="threshold">A value in PPM, with a resolution of 1.  e.g. "12.5".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmReadingThresholdCO">
            <summary>
            Returns the Algorithm's reading threshold for CO.
            </summary>
            <returns>A value in PPM, with a resolution of 1.  e.g. "12.5".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmReadingThresholdCO(System.Double)">
            <summary>
            Writes the Algorithm's reading threshold for CO.
            </summary>
            <param name="threshold">A value in PPM, with a resolution of 1.  e.g. "12.5".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getAlgorithmReadingThresholdH2S">
            <summary>
            Returns the Algorithm's reading threshold for H2S.
            </summary>
            <returns>A value in PPM, with a resolution of 1.  e.g. "12.5".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setAlgorithmReadingThresholdH2S(System.Double)">
            <summary>
            Writes the Algorithm's reading threshold for H2S.
            </summary>
            <param name="threshold">A value in PPM, with a resolution of 1.  e.g. "12.5".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setCountryOfOrigin(ISC.Instrument.TypeDefinition.Country)">
            <summary>
            Writes the instrument's "Country of Origin" instrument.
            </summary>
            <param name="country"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setTotalRunTime(System.TimeSpan)">
            <summary>
            Sets the amount of time this instrument has been in operation.
            The value is stored as number of seconds.
            </summary>
            <param name="totalRunTime">Pass in <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see> to initialize this field on the instrument.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setTotalAlarmTime(System.TimeSpan)">
            <summary>
            Sets the total amount of time this instrument has been in an alarm state.
            The value is stored as number of seconds.
            </summary>
            <param name="totalAlarmTime">Pass in <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see> to initialize this field on the instrument.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSensorRawSerialNumber(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="sensPos"></param>
            <param name="serialNumber">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSensorModulePartNumber(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="sensPos"></param>
            <param name="partNumber">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSensorSerialNumber(System.Int32,System.String)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <param name="serialNumber">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSensorPartNumber(System.Int32,System.String)">
            <summary>
            Sets the sensor's Part number
            </summary>
            <param name="sensorPos"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getSelfTestCount">
            <summary>
            Returns the number of times the user has initiated the self-test on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSelfTestCount(System.UInt16)">
            <summary>
            Returns the number of times the user has initiated the self-test on the instrument.
            </summary>
            <param name="selfTestCount"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.configureSensors">
            <summary>
            Configures the duel sensors' settings so that they are in sync with each other.
            </summary>
            <remarks>
            Calling this method causes the instrument to read the settings for its installed sensors,
            determine any differences between the two, then modifying (if necessary) any setting on them 
            in order to make the settings the same between them.
            <para>
            The sensors "settings" are considered the Low, High, STEL, and TWA alarms and, also, the peak
            reading.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationTempCompM40">
            <summary>
            Returns the battery's activation temperature compensation M40 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationTempCompM40(System.Int16)">
            <summary>
            Sets the battery's activation temperature compensation M40 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationTempCompM20">
            <summary>
            Returns the battery's activation temperature compensation M20 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationTempCompM20(System.Int16)">
            <summary>
            Sets the battery's activation temperature compensation M40 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationTempCompZ0">
            <summary>
            Returns the battery's activation temperature compensation Z0 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationTempCompZ0(System.Int16)">
            <summary>
            Sets the battery's activation temperature compensation Z0 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationTempCompP20">
            <summary>
            Returns the battery's activation temperature compensation P20 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationTempCompP20(System.Int16)">
            <summary>
            Sets the battery's activation temperature compensation P20 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationTempCompP40">
            <summary>
            Returns the battery's activation temperature compensation P40 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationTempCompP40(System.Int16)">
            <summary>
            Sets the battery's activation temperature compensation P40 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationTempCompP60">
            <summary>
            Returns the battery's activation temperature compensation P60 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationTempCompP60(System.Int16)">
            <summary>
            Sets the battery's activation temperature compensation P60 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceTempCompM40">
            <summary>
            Returns the battery's impedance temperature compensation M40 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceTempCompM40(System.Int16)">
            <summary>
            Sets the battery's impedance temperature compensation M40 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceTempCompM20">
            <summary>
            Returns the battery's impedance temperature compensation M20 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceTempCompM20(System.Int16)">
            <summary>
            Sets the battery's impedance temperature compensation M40 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceTempCompZ0">
            <summary>
            Returns the battery's impedance temperature compensation Z0 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceTempCompZ0(System.Int16)">
            <summary>
            Sets the battery's impedance temperature compensation Z0 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceTempCompP20">
            <summary>
            Returns the battery's impedance temperature compensation P20 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceTempCompP20(System.Int16)">
            <summary>
            Sets the battery's impedance temperature compensation P20 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceTempCompP40">
            <summary>
            Returns the battery's impedance temperature compensation P40 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceTempCompP40(System.Int16)">
            <summary>
            Sets the battery impedance's temperature compensation P40 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryImpedanceTempCompP60">
            <summary>
            Returns the battery's impedance temperature compensation P60 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryImpedanceTempCompP60(System.Int16)">
            <summary>
            Sets the battery's impedance temperature compensation P60 value.
            </summary>
            <param name="tempComp"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationPeriod">
            <summary>
            Returns the battery's depassivation period value.
            </summary>
            <returns>Value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationPeriod(System.Int16)">
            <summary>
            Sets the battery's depassivation period value.
            </summary>
            <param name="period">Value is in seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationLoadTime">
            <summary>
            Returns the battery's depassivation load time value.
            </summary>
            <returns>Value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationLoadTime(System.Int16)">
            <summary>
            Sets the battery's depassivation load time value.
            </summary>
            <param name="time">Value is in seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationPwmDutyCycle">
            <summary>
            Returns the battery's depassivation PWD duty cycle value.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationPwmDutyCycle(System.Int16)">
            <summary>
            Sets the battery's depassivation PWD duty cycle value.
            </summary>
            <param name="cycle">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationTimeConstant">
            <summary>
            Returns the battery's depassivation time constant value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationTimeConstant(System.Int16)">
            <summary>
            Sets the battery's depassivation time constant value.
            </summary>
            <param name="timeConstant"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationCycles">
            <summary>
            Returns the battery's number of "depassivation cycles" value.
            </summary>
            <returns>A number of cycles.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationCycles(System.Int16)">
            <summary>
            Sets the battery's number of "depassivation cycles" value.
            </summary>
            <param name="cycles">A number of cycles.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationImpedanceMax">
            <summary>
            Returns the battery's maximum depassivation impedance value.
            </summary>
            <returns>Value is in milliohms.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationImpedanceMax(System.UInt16)">
            <summary>
            Sets the battery's maximum depassivation impedance value.
            </summary>
            <param name="maxImpedance">Value is in milliohms.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryDepassivationImpedanceMin">
            <summary>
            Returns the battery's minimum depassivation impedance value.
            </summary>
            <returns>Value is in milliohms.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryDepassivationImpedanceMin(System.UInt16)">
            <summary>
            Sets the battery's minimum depassivation impedance value.
            </summary>
            <param name="minImpedance">Value is in milliohms.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationRecoverVoltage">
            <summary>
            Returns the battery's activation recover voltage.
            </summary>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationRecoverVoltage(System.Int16)">
            <summary>
            Sets the battery's activation recover voltage.
            </summary>
            <param name="voltage">Value is in millivolts.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getBatteryActivationMaxDuration">
            <summary>
            Returns the battery's "activation max duration" value.
            </summary>
            <returns>Value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setBatteryActivationMaxDuration(System.Int16)">
            <summary>
            Sets the battery's "activation max duration"  value.
            </summary>
            <param name="maxDuration">Value is in seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.runSelfTest">
            <summary>
            Tells the instrument to perform self tests on itself.
            </summary>
            <remarks>
            The instrument's self tests take around 2 - 3 seconds to run.
            This method will wait until they they are completed before it returns.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getIndicatorFailures">
            <summary>
            TODO: what's this for?
            </summary>
            <returns>
            The returned value may have one or more bits set to indicate which indicators have failed.
            IndicatorFailures.None is returned if there are no failures.
            The following <see cref="T:ISC.Instrument.Driver.IndicatorFailures"/> bits are possible for this instrument type...
            <list type="bullet">
            <item><description>IndicatorFailures.LeftLed</description></item>
            <item><description>IndicatorFailures.RightLed</description></item>
            <item><description>IndicatorFailures.VibratingMotor</description></item>
            <item><description>IndicatorFailures.Speaker</description></item>
            <item><description>IndicatorFailures.Backlight</description></item>
            <item><description>IndicatorFailures.Ram</description></item>
            <item><description>IndicatorFailures.Flash</description></item>
            <item><description>IndicatorFailures.DataFlash</description></item>
            <item><description>IndicatorFailures.Sensor0Checksum</description></item>
            <item><description>IndicatorFailures.Sensor1Checksum</description></item>
            <item><description>IndicatorFailures.AmbientLightSensor</description></item>
            <item><description>IndicatorFailures.BlueLed</description></item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSupercapChargingEnableThreshold(System.UInt16)">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <param name="threshold">Millivolts (mV).</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getSupercapChargingEnableThreshold">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <returns>Value is millivolts (mV).</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSupercapChargingDisableThreshold(System.UInt16)">
            <summary/> 
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <param name="threshold">Millivolts (mV).</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getSupercapChargingDisableThreshold">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <returns>Value is millivolts (mV).</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSupercapEnabledMonitorInterval(System.UInt16)">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <param name="interval">Seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getSupercapEnabledMonitorInterval">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <returns>Value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setSupercapDisabledMonitorInterval(System.UInt16)">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <param name="interval">Seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getSupercapDisabledMonitorInterval">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <returns>Value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.setImpedanceDifferenceCheckCutoff(System.UInt16)">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <param name="cutoff">Millohms.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1FactoryDriver.getImpedanceDifferenceCheckCutoff">
            <summary/>
            <remarks>Supported in 1.7 or newer instruments.</remarks>
            <returns>Value is in millohms.</returns>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4DatalogPacketizer">
            <summary>
            Manages the packets of hygiene data that are downloaded from instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4DatalogPacketizer.Add(System.Byte[])">
            <summary>
            Push a packet onto the end of the queue.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4DatalogPacketizer.Pop">
            <summary>
            Remove the first packet at the front of the queue and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4DatalogPacketizer.Peek">
            <summary>
            Return the packet at the front of the queue, leaving it at the front of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4DatalogPacketizer.GetNextRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4DatalogPacketizer.GetBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="recordSize"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4DatalogPacketizer.CheckCrc(System.Byte[])">
            <summary>
            Each record has a CRC appended at the end.  This is a CRC computed at the time
            the record was written to the instrument's dataflash.  We need to check the CRC's
            to detect corrupt record.  Any invalid CRCs mean we have a corrupt dataflash and
            the hygiene is invalid.
            </summary>
            <param name="record"></param>
            <exception cref="T:ISC.Instrument.Driver.CorruptHygieneException">Thrown if an invalid CRC is found</exception>
        </member>
        <member name="T:ISC.Instrument.Driver.VCalSixUnitCalStationDriver">
            <summary>
            This driver is for the six-bay V-Cal calibration station.
            </summary>
            <remarks>
            The six-bay Val is for use with Ventis instruments and, also,
            iQuads with standard or alkaline battery pack.
            <para>
            This driver supports the six-bay V-Cal.  The parent class, 
            <see cref="T:ISC.Instrument.Driver.Mx4CalStationDriver"/>, supports the single-bay V-Cal.
            </para>
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4CalStationDriver">
            <summary>
            This driver is for the MX-Cal and single-bay V-Cal calibration stations.
            </summary>
            <remarks>
            MX-Cal is a single-bay calibration station for use with MX4 iQuad.
            <para>
            V-Cal is a calibration station for use with Ventis instruments and, also,
            iQuads with standard or alkaline battery pack.
            This driver only supports the single-bay V-Cal.
            The <see cref="T:ISC.Instrument.Driver.VCalSixUnitCalStationDriver"/> supports the six-bay
            V-Cal calibrations station.
            </para>
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.CalPlusDriver">
            <summary>
            This driver is for the "Cal Plus" calibration station.
            </summary>
            <remarks>
            Cal Plus is a single-bay calibration station for use with Gas Badge Plus instruments.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.CalPlusDriver._englishCulture">
            <summary>
            Used internally by routines that need an EN-us (0x0409) culture object.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusDriver.Dispose">
            <summary>
            Implementation of IDisposable. Disposes of serial port resources
            used to communicate with the instrument, and suppresses finalization.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusDriver.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusDriver.SetAbortRequester(ISC.Instrument.Driver.AbortRequest)">
            <summary>
            Specify a delegate that can be used by the driver to determine if if should abort communications.
            Whenever the driver encounters a communications error, it will immediately 
            call the specified AbortRequest delegate.
            <para>
            See the <see cref="T:ISC.Instrument.Driver.AbortRequest">documentation for the AbortRequest delegate</see> for more details
            on how to use.
            </para>
            </summary>
            <param name="abortRequest">If null is passed, then a NullAbortRequest is used.</param>
            <seealso cref="T:ISC.Instrument.Driver.AbortRequest"/>
            <seealso cref="T:ISC.Instrument.Driver.CommunicationAbortedException"/>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusDriver.NullAbortRequest">
            <summary>
            Default AbortRequest delegate.
            Always called unless overridden via
            with a different delegate via SetAbortRequester.  
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusDriver.buildDecimal(System.String,System.Int32)">
            <summary>
            Creates a Decimal by applying the correct number of 
            decimal places to the number represented by the string.
            Example: 657, 2 would produce: 6.57
            </summary>
            <param name="inputString"></param>
            <param name="numDecimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusDriver.downloadCalAndBumpData(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Downloads then clears all Calibration and Bump Test data from the calibration station.
            </summary>
            <param name="calList">
            For each calibration record read from the calibration station, this method will add an
            <see cref="T:ISC.Instrument.Driver.DriverInstrumentCalibrationRecord"/> instance to the passed-in ArrayList.
            </param>
            <param name="bumpList">
            For each bump test record read from the calibration station, this method will add an
            <see cref="T:ISC.Instrument.Driver.DriverInstrumentBumpRecord"/> instance to the passed-in ArrayList..
            </param>
            <returns>
            And empty string is returned if everything is successful.
            An error string is returned if an error occurs when trying to download 
            or clear the data from the cal station.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadEquipmentType">
            <summary>
            Returns the type of calibration station.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadInstrumentType">
            <summary>
            Returns the type of docked instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadCalStationRegister(System.UInt16,System.UInt16@)">
            <summary>
            Reads and returns the value for one of the calibration station's modbus registers.
            </summary>
            <param name="register"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadRegister(System.UInt16,System.UInt16@)">
            <summary>
            Reads and returns the value for one of docked instrument's modbus registers.
            </summary>
            <param name="register"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadSoftwareVersion">
            <summary>
            Returns the firmware version of the calibration station. 
            </summary>
            <returns>Format is Major.Minor.Build.  e.g. "3.02.11".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadRegister(System.UInt16,System.UInt16,System.UInt16@)">
            <summary>
            Reads specified register(s) value or values from the cal station (not the docked instrument).
            </summary>
            <param name="register"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetMinimumBoardCurrent(System.UInt16)">
            <summary>
            Sets the minimum board current.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetMaximumBoardCurrent(System.UInt16)">
            <summary>
            Sets the maximum board current.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetMinimumSolenoidCurrent(System.UInt16)">
            <summary>
            Sets the minimum solenoid current.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetMaximumSolenoidCurrent(System.UInt16)">
            <summary>
            Sets the maximum solenoid current.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetMinimumPumpCurrent(System.UInt16)">
            <summary>
            Sets the minimum pump current.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetMaximumPumpCurrent(System.UInt16)">
            <summary>
            Sets the maximum pump current.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetChargeCurrentOffset(System.UInt16)">
            <summary>
            Sets the charge current offset.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.SetRegister(System.String,System.UInt16,System.UInt16)">
            <summary>
            Sets a setup value in the calibaration station.
            </summary>
            <param name="callingRoutine">The name of the routine calling the application. Used for logging.</param>
            <param name="register">The register to which to write.</param>
            <param name="value">The value to write.</param>
            <returns>Modbus error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.downloadCalAndBumpData(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Downloads then clears all Calibration and Bump Test data from the calibration station.
            </summary>
            <param name="calList">
            For each calibration record read from the calibration station, this method will add an
            <see cref="T:ISC.Instrument.Driver.Mx4DriverInstrumentCalibrationRecord"/> instance to the passed-in ArrayList.
            </param>
            <param name="bumpList">
            For each bump test record read from the calibration station, this method will add an
            <see cref="T:ISC.Instrument.Driver.Mx4DriverInstrumentBumpRecord"/> instance to the passed-in ArrayList..
            </param>
            <returns>
            And empty string is returned if everything is successful.
            An error string is returned if an error occurs when trying to download 
            or clear the data from the cal station.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ParseCalHeader(System.Byte[])">
            <summary>
            Retrieves the calibration record header from a byte array.
            </summary>
            <param name="eepromRecord">The byte array containing the header data.</param>
            <returns>An Mx4DriverInstrumentCalibrationRecord object containing the data.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ParseCalSensor(ISC.Instrument.Driver.Mx4DriverInstrumentCalibrationRecord,System.Byte[])">
            <summary>
            Retrieves the sensor information for a calibration record from a byte array.
            </summary>
            <param name="ical">The calibration record to which the sensor data belongs.</param>
            <param name="eepromRecord">The byte array containing the sensor data.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ParseBumpHeader(System.Byte[])">
            <summary>
            Retrieves the bump record header from a byte array.
            </summary>
            <param name="eepromRecord">The byte array containing the header data</param>
            <returns>An Mx4DriverInstrumentBumpRecord object containing the data.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ParseBumpSensor(ISC.Instrument.Driver.Mx4DriverInstrumentBumpRecord,System.Byte[])">
            <summary>
            Retrieves the sensor information for a bump record from a byte array.
            </summary>
            <param name="ibump">The bump record to which the sensor data belongs.</param>
            <param name="eepromRecord">The byte array containing the sensor data.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.GetUnitOfMeasure(System.String)">
            <summary>
            Returns a string representing a unit of measure.
            </summary>
            <param name="sensorType">The gas type the sensor detects.</param>
            <returns>A string representing a unit of measure</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadEepromRecords(System.Collections.ArrayList,System.Version,System.Int32)">
            <summary>
            Reads the calibration and bump data from the calibration station.
            </summary>
            <param name="eepromRecordList"></param>
            <returns>A Modbus error code.</returns>
            <remarks>
            See notes on the protected overload of this function for details on retries for an 
            MX-Cal/USB 1.1 bug.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.ReadEepromRecords(System.Collections.ArrayList,System.Version,System.Int32,System.UInt16@)">
            <summary>
            Reads the calibration and bump data from the calibration station.
            </summary>
            <param name="eepromRecordList"></param>
            <param name="currentSegment">The segment number on which to start the read.</param>
            <param name="softwareVersion">The software version of the cal station.</param>
            <returns>A Modbus error code.</returns>
            <remarks>
            This routine accepts a segment number as a parameter as a work around to a known
            issue with the MX-Cal station.  When the MX-Cal station is connected to a computer
            through a USB 1.1 port (on the computer's side) the connection will be dropped
            while reading segments for the fifth record (segments 20-24).  When this occurs,
            the public version of this method will call the method again, passing in the last
            segment number that the application attempted to read.  The connection is 
            reestablished and the read continues.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.GetResult(System.Byte,System.Byte)">
            <summary>
            Returns the appropriate PASSED/FAILED result string.
            </summary>
            <param name="resultByte">The byte containing the result.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationDriver.isSensorInstalled(System.Object,System.Byte)">
            <summary>
            Determines if the passsed sensor is installed.
            </summary>
            <param name="sensorType">The sensor selected</param>
            <returns>True if installed, false if not.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.ReadMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[]@)">
            <summary>
            Reads specified register(s) value or values from the cal station (not the docked instrument).
            </summary>
            <param name="numRegisters"></param>
            <param name="registerNumbers"></param>
            <param name="registerValues"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.getBayList">
            <summary>
            Get the docked instrument bay list from V-Cal 6 Unit station based on Serial Numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.getInstrumentSN(System.Int32)">
            <summary>
            Gets Instrument Serial Number in the specified Bay
            </summary>
            <param name="bayNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetActiveBay(System.UInt16)">
            <summary>
            Set the specified bay as Active in V-Cal 6 Unit
            </summary>
            <param name="bayNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetActiveBay">
            <summary>
            Gets the Active bay in V-Cal 6 Unit
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnablePump1(System.Boolean)">
            <summary>
            Enable or disable pump 1
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsPump1Enabled">
            <summary>
            Get the status of the pump 1
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnablePump2(System.Boolean)">
            <summary>
            Enable or disable pump 2
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsPump2Enabled">
            <summary>
            Get the status of the pump 2
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnablePump3(System.Boolean)">
            <summary>
            Enable or disable pump 3
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsPump3Enabled">
            <summary>
            Get the status of the pump 3
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnableGasSolenoid1(System.Boolean)">
            <summary>
            Enable or disable gas solenoid 1
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsGasSolenoid1Enabled">
            <summary>
            Get the status of the gas solenoid 1
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnableCradleSelectSolenoid1(System.Boolean)">
            <summary>
            Cradle select solenoid will choose bay 4 when enabled (value of 1), or bay 1 if disabled (value of 0).
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsCradleSelectSolenoid1Enabled">
            <summary>
            Get the status of the cradle select solenoid 1
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnableCradleSelectSolenoid2(System.Boolean)">
            <summary>
            Cradle select solenoid will choose bay 5 when enabled (value of 1), or bay 2 if disabled (value of 0).
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsCradleSelectSolenoid2Enabled">
            <summary>
            Get the status of the cradle select solenoid 2
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnableCradleSelectSolenoid3(System.Boolean)">
            <summary>
            Cradle select solenoid will choose bay 6 when enabled (value of 1), or bay 3 if disabled (value of 0).
            </summary>
            <param name="enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsCradleSelectSolenoid3Enabled">
            <summary>
            Get the status of the cradle select solenoid 3
            </summary>
            <returns>true if pump is enabled, false when disabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetPump1FlowSetting(System.UInt16)">
            <summary>
            Set the Pump 1 Flow setting
            </summary>
            <param name="value">Values should be between 0 and 255</param>
            <returns>Error code if any</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetPump1FlowSetting">
            <summary>
            Gets the Pump 1 Flow setting. Value between 0 and 255
            </summary>
            <returns>Pump 1 Flow setting</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetPump2FlowSetting(System.UInt16)">
            <summary>
            Set the Pump 2 Flow setting
            </summary>
            <param name="value">Values should be between 0 and 255</param>
            <returns>Error code if any</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetPump2FlowSetting">
            <summary>
            Gets the Pump 2 Flow setting. Value between 0 and 255
            </summary>
            <returns>Pump 2 Flow setting</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetPump3FlowSetting(System.UInt16)">
            <summary>
            Set the Pump 3 Flow setting
            </summary>
            <param name="value">Values should be between 0 and 255</param>
            <returns>Error code if any</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetPump3FlowSetting">
            <summary>
            Gets the Pump 3 Flow setting. Value between 0 and 255
            </summary>
            <returns>Pump 3 Flow setting</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetDateTime(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Set Long Date time to the instrument
            </summary>
            <param name="inMonth">Month</param>
            <param name="inDay">Day</param>
            <param name="inYear">Year</param>
            <param name="inHour">Hour</param>
            <param name="inMin">Minute</param>
            <param name="inSeconds">Seconds</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetDateTime">
            <summary>
            Gets the long date time from the instrument
            </summary>
            <returns>Long date time</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.EnableCalIntervalOnInstruments(System.Boolean)">
            <summary>
            If this option is enabled, the MX-Cal will set the cal interval on all connected instruments; else, it will not.
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.IsCalIntervalOnInstrumentsEnabled">
            <summary>
            Gets the status of Cal interval on instruments option
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetCradle1Type(System.UInt16)">
            <summary>
            Selects the cradle type installed in bay 1:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetCradle1Type">
            <summary>
            Gets the cradle type installed in bay 1:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetCradle2Type(System.UInt16)">
            <summary>
            Selects the cradle type installed in bay 2:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetCradle2Type">
            <summary>
            Gets the cradle type installed in bay 2:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetCradle3Type(System.UInt16)">
            <summary>
            Selects the cradle type installed in bay 3:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetCradle3Type">
            <summary>
            Gets the cradle type installed in bay 3:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetCradle4Type(System.UInt16)">
            <summary>
            Selects the cradle type installed in bay 4:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetCradle4Type">
            <summary>
            Gets the cradle type installed in bay 4:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetCradle5Type(System.UInt16)">
            <summary>
            Selects the cradle type installed in bay 5:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetCradle5Type">
            <summary>
            Gets the cradle type installed in bay 5:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetCradle6Type(System.UInt16)">
            <summary>
            Selects the cradle type installed in bay 6:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetCradle6Type">
            <summary>
            Gets the cradle type installed in bay 6:   1 = diffusion, 2 = aspirated, 3 = convertible (diffusion/aspirated)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetDigitalPotInitializationFlag(System.UInt16)">
            <summary>
            Set the flag if flow constants have been set for all digital pots
            </summary>
            <param name="flagSet"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetDigitalPotInitializationFlag">
            <summary>
            Reads the flag value whether flow constants have been set for all digital pots
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetTwoPumpFlowIncrease(System.UInt16)">
            <summary>
            Set the amount, in percent, that each pump digipot setting value will be increased when 2 pumps are running simultaneously
            </summary>
            <param name="valueInPercent">Value in percent</param>
            <returns>Error code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetTwoPumpFlowIncrease">
            <summary>
            Get the amount, in percent, that each pump digipot setting value will be increased when 2 pumps are running simultaneously
            </summary>
            <returns>Value in percent</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetThreePumpFlowIncrease(System.UInt16)">
            <summary>
            Set the amount, in percent, that each pump digipot setting value will be increased when 3 pumps are running simultaneously
            </summary>
            <param name="valueInPercent">Value in percent</param>
            <returns>Error code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetThreePumpFlowIncrease">
            <summary>
            Get the amount, in percent, that each pump digipot setting value will be increased when 3 pumps are running simultaneously
            </summary>
            <returns>Value in percent</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetLid1Status">
            <summary>
            If cradle 1 has a lid, this will return 1 if the lid is open, or 0 if the lid is closed.  
            If cradle 1 does not have a lid, this will always return 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetLid2Status">
            <summary>
            If cradle 2 has a lid, this will return 1 if the lid is open, or 0 if the lid is closed.  
            If cradle 2 does not have a lid, this will always return 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetLid3Status">
            <summary>
            If cradle 3 has a lid, this will return 1 if the lid is open, or 0 if the lid is closed.  
            If cradle 3 does not have a lid, this will always return 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetLid4Status">
            <summary>
            If cradle 4 has a lid, this will return 1 if the lid is open, or 0 if the lid is closed.  
            If cradle 4 does not have a lid, this will always return 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetLid5Status">
            <summary>
            If cradle 5 has a lid, this will return 1 if the lid is open, or 0 if the lid is closed.  
            If cradle 5 does not have a lid, this will always return 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetLid6Status">
            <summary>
            If cradle 6 has a lid, this will return 1 if the lid is open, or 0 if the lid is closed.  
            If cradle 6 does not have a lid, this will always return 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.GetUnitConfigurationFlag">
            <summary>
            Used to determine if the unit is configured successfully. 
            </summary>
            <returns>0 - FactoryUninitialized, 1 - FactoryInitialized, 2 - FactoryConfigured, 3 - FactoryLidTested, 4 - FactoryPumpCalibration</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VCalSixUnitCalStationDriver.SetUnitConfigurationFlag(System.UInt16)">
            <summary>
            Used to determine if the unit is configured successfully. 
            </summary>
            <param name="value">0 - FactoryUninitialized, 1 - FactoryInitialized, 2 - FactoryConfigured, 3 - FactoryLidTested, 4 - FactoryPumpCalibration</param>
            <returns>Error if any</returns>
        </member>
        <member name="T:ISC.Instrument.Driver.DummyFactoryDriver">
            <summary>
            Summary description for MultiGasFactoryDriver.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DummyDriver">
            <summary>
            A fake driver that software can call for testing without the
            need of an instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.#ctor(ISC.Instrument.Driver.ModbusMaster)">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.#ctor(ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="modbusMaster"></param>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.#ctor(ISC.Instrument.Driver.ModbusMaster,System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="modbusMaster"></param>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getSensorSupportedCalGasConc(System.Int32)">
            <summary>
            For sensors allowing only particular cal gas concentrations (e.g. only 25 or 50),
            this method returns the concentrations that the sensor supports, otherwise null.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns null for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getBacklightOption">
            <summary>
            Returns the currently configured BacklightOption
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            Set the currently configured BacklightOption
            </summary>
            <param name="inBLO"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Access code</param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getProfiles">
            <summary>
            Make some fake profiles and return them
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns></returns>returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getCompanyMessage">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument current error code
            </summary>
            <returns>Instrument Current Error Code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns>Timeout in seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyDriver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            Constructor
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="serialNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="partNum">More than 8 chars gets truncated. Specify Empty string to blank out.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            Sets the ISC Property
            </summary>
            <param name="iscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setJobNumber(System.String)">
            <summary>
            </summary>
            <param name="jobNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setSetupTech(System.String)">
            <summary>
            Sets  the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Set the Instrument Configuration Map Version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Sets the instrument hardware version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setBatteryLoThreshold(System.Int16)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary></summary>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setBatteryBarThreshold(System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Set minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setMaxTemperature(System.Double)">
            <summary>
            Set maxiumum temperature reading
            </summary>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setTemperature(System.Int16)">
            <summary>
            Sets current temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setSensorCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Sxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setSensorMaxTemperature(System.Int32,System.Int16)">
            <summary>
            Set the Sensor Max Temperature.
            </summary>
            <param name="sensorPos"></param>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyFactoryDriver.setSensorMinTemperature(System.Int32,System.Int16)">
            <summary>
            Set the Sensor Min Temperature.
            </summary>
            <param name="sensorPos"></param>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.InstrumentProfile">
            <summary>
            Summary description for InstrumentProfile.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.Name">
            <summary>
            The name of this profile.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.Password">
            <summary>
            This profile's password (i.e., AccessCode)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.RecordingInterval">
            <summary>
            This profiles's hygiene recording interval.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.TwaTimeBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.BumpThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.BumpTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.BackLight">
            <summary>
            
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.FavoritePidFactors">
            <summary>
            List of strings naming favorite PID Response Factors.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.CustomPidFactors">
            <summary>
            ArrayList of Custom Response Factors.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.ActiveUser">
            <summary>
            Specifies the name of this profile's active User.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.ActiveSite">
            <summary>
            Specifies the name of this profile's active Site.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentProfile.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.CommunicationException">
            <summary>
            Base class for all exceptions that are deliberately thrown by the instrument drivers.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CommunicationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.CommunicationException.#ctor(System.String,System.Exception,System.UInt16)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMsg"></param>
            <param name="inner"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.CommunicationException.#ctor(System.String,System.UInt16)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMsg"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.CommunicationException.#ctor(System.String,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="errorMsg"></param>
            <param name="errorCode"></param>
            <param name="registerNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.CommunicationException.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.CommunicationException.Register">
            <summary>
            Register that was being read or written when this exception was thrown.
            If zero, then no register is unknown or no register was involved.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.CommunicationAbortedException">
            <summary>
            Thrown by the driver when a call it makes to the <see cref="T:ISC.Instrument.Driver.AbortRequest"/> delegate
            return true.
            </summary>
            <seealso cref="T:ISC.Instrument.Driver.AbortRequest"/>
            <seealso cref="M:ISC.Instrument.Driver.ModbusDriver.SetAbortRequester(ISC.Instrument.Driver.AbortRequest)"/>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4DriverSensorCalibrationRecord">
            <summary>
            Stores the calibration record for an individual sensor retrieved from an instrument.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverSensorCalibrationRecord">
            <summary>
            For the calibration records, the 
            span reserve, 
            instrument serial number, 
            sensor type, 
            sensor status (which gives the pass/fail), 
            date, and 
            time. 
            This is the data that is printed out. I also read the cal gas type, 
            cal gas high limit, and the cal gas value to determine some of the pass/fail 
            for the bump test. It would be nice to pass the sensor serial number back too.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverInstrumentBumpRecord">
            <summary>
            On the M-Cal, for bump records, the gas readings, pass/fail, date, 
            sensor type, time, and instrument serial number are returned
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SensorPosition">
            <summary>
            Returned by getSensorPositions().
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SensorPosition.Clone">
            <summary>
            Returns a duplicate of this SensorPosition object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.SensorPosition.Position">
            <summary>
            The sensor position number.  1 through N.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.SensorPosition.Mode">
            <summary>
            The status of the sensor indicating if it's uninstalled, or OK, or in error, etc.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.SensorPosition.Type">
            <summary>
            The type of sensor (if not uninstalled).
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.SensorPosition.IsDualSenseCapable">
            <summary>
            True if this sensor is capable of being in a dual-sensor pair.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.GasOperation">
            <summary>
            Instances of this class are used to to represent manual gas operations that are 
            logged by an instrument.  i.e., logged field bump test and field calibrations.
            </summary>
            <remarks>
            The manual gas operations that an instrument has logged can be downloaded by an application
            by calling a driver's <see cref="M:ISC.Instrument.Driver.InstrumentDriver.getGasOperations"/>
            method.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getGasOperations"/>
        </member>
        <member name="M:ISC.Instrument.Driver.GasOperation.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.OperationType">
            <summary>
            The type of operation performed (Bump or Cal or Zero, etc.)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Timestamp">
            <summary>
            The date/time the operation was performed. Number of seconds since midnight, 1/1/2000.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.SerialNumber">
            <summary>
            The serial number of the sensor.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.SensorCode">
            <summary>
            The type of sensor. e.g. "S0020".
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.GasCode">
            <summary>
            The type of gas used for the operation.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Resolution">
            <summary>
            The sensor's resolution.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.GasConcentration">
            <summary>
            The cal gas concentration used for the operation.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.MeasurementType">
            <summary>
            Measurement type for the reading, alarm high, alarm low, etc.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.AlarmLow">
            <summary>
            The sensor's low alarm setting at the time of the operation.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.AlarmHigh">
            <summary>
            The sensor's high alarm setting at the time of the operation.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Reading">
            <summary>
            The final sensor reading (bumps) / Span Reserve (calibrations)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.OperationStatus">
            <summary>
            The final result of the operation (pass, fail, etc.)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.ZeroStatus">
            <summary>
            The result of zeroing.  Should be undefined for bump tests.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Sensitivity">
            <summary>
            Sensor sensitivity (a.k.a. 'Span coefficient').
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Baseline">
            <summary>
            Sensor baseline.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Duration">
            <summary>
            Duration of the operation, in seconds.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.BumpTimeout">
            <summary>
            Bump timeout setting. For manual bump tests, this is an INSTRUMENT value, not sensor.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.CalibrationTimeout">
            <summary>
            Calibration timeout setting.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.BumpThreshold">
            <summary>
            Bump threshold setting. Typically 50 to 99 (percent).
            For manual bump tests, this is an INSTRUMENT value, not sensor.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.IsAccessoryPumpInstalled">
            <summary>
            Whether or not an accessory pump was installed at the time of the operation.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Index">
            <summary>
            Bump / calibration index.
            Logs with the same value are part of the same calibration or bump test.
            </summary>
            <remarks>
            Note that this index is cleared/reset on the instrument when the manual bump/cal log is cleared.
            </remarks>
        </member>
        <member name="P:ISC.Instrument.Driver.GasOperation.Positions">
            <summary>
            The position number(s) of the sensor at the time of the gas operation.
            </summary>
            <remarks>
            This will only be filled in for certain instrument types; e.g. SafeCore.
            Will be a empty if not supported the instrument type.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.GasOperation.Type.Zero">
            <summary>
            Only used to log failed zeroing operations.  i.e., zeroing operations that have passed are not logged.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.BaseUnitInfo">
            <summary>
            Returned by <see cref="M:ISC.Instrument.Driver.InstrumentDriver.getBaseUnitInfos"/>.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getBaseUnitInfos"/>
        </member>
        <member name="P:ISC.Instrument.Driver.BaseUnitInfo.EquipmentType">
            <summary>
            The type of base unit.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.BaseUnitInfo.SerialNumber">
            <summary>
            The base unit's serial number.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.BaseUnitInfo.PartNumber">
            <summary>
            The base unit's part number.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.BaseUnitInfo.SetupDate">
            <summary>
            The base unit's factory setup date.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.BaseUnitInfo.InstallTime">
            <summary>
            The date/time the module was installed into the base unit.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.BaseUnitInfo.RunTime">
            <summary>
            The total amount of time the module was running, while installed in the base unit.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4FactoryDriver">
            <summary>
            For use with the MX4 instrument's factory &amp; service software.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.reset">
            <summary>
            Forces the instrument to reset itself.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="partNum">More than 8 chars gets truncated. Specify Empty string to blank out.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setSensorPartNumber(System.Int32,System.String)">
            <summary>
            Sets the sensor's Part number
            </summary>
            <param name="sensorPos"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setJobNumber(System.String)">
            <summary>
            </summary>
            <param name="jobNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setSetupTech(System.String)">
            <summary>
            Sets the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Sets the instrument's setup date.
            </summary>
            <param name="dateTime">setup date</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Set the Instrument Configuration Map Version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Sets the instrument hardware version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            Sets the instrument manufacturing location.
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Writes the instrument's minimum temperature reading.
            </summary>
            <param name="temp">Celsius.  To initialize, it's recommended to write a value of 100.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Writes the instrument's maximum temperature reading.
            </summary>
            <param name="temp">Celsius.  To initialize, it's recommended to write a value of -100.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.beginConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.InitConfiguration">
            <summary>
            This method is called by beginConfiguration write after the instrument reports in
            in FactoryUnitialized mode.
            The intent of this method is to all the driver to do some preliminary factory
            initialization of the instrument that application developers shouldn't have to
            worry about, such as zeroing certain registers, etc.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.endConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryBarThreshold(System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryLoThreshold">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryLoThreshold(System.Int16)">
            <summary>
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryFailThreshold">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary></summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.GetHygieneSession(System.Int32,System.String)">
            <summary>
            FOR DEBUGGING ONLY.
            </summary>
            <param name="sessionNum"></param>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            Set whether or not the instrument is owned by ISC (i.e., is a rental instrument).
            </summary>
            <param name="isIscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.SetLelModeLock(System.Boolean)">
            <summary>
            Lock (or unlock) the instrument's LEL mode so that it cannot
            (or can) be changed by the user.
            </summary>
            <param name="isLocked">
            True to lock the mode so user cannot change it.
            False to unlock it so that user can change it.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryDockedPowerThreshold">
            <summary>
            Returns the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This parameter used by the instrument to determine at what voltage
            to allow Modbus communication immediately at instrument startup.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryDockedPowerThreshold(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryDockedPowerThreshold(System.Int16)">
            <summary>
            Sets the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This parameter used by the instrument to determine at what voltage
            to allow Modbus communication immediately at instrument startup.
            </remarks>
            <param name="threshold"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryDockedPowerInterval">
            <summary>
            Returns the instruments "Battery Docked Power Interval".
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryDockedPowerInterval(System.Int16)"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setBatteryDockedPowerInterval(System.Int16)">
            <summary>
            Sets the instruments "Battery Docked Power Interval".
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryDockedPowerInterval"/>
            <seealso cref="M:ISC.Instrument.Driver.Mx4FactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setAutoZeroClearingLimit(System.Int32)">
            <summary>
            Sets the autozero clearing limit on the instrument used for any installed LEL sensors.
            </summary>
            <remarks>
            This setting was introduced to iQuad 1.2 and is available in all versions of Ventis.
            </remarks>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setAutoZeroInstantLimit(System.Int32)">
            <summary>
            Sets the autozero instant limit on the instrument used for any installed LEL sensors.
            </summary>
            <remarks>
            This setting was introduced to iQuad 1.2 and is available in all versions of Ventis.
            </remarks>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setAutoZeroCalLimit(System.Int32)">
            <summary>
            Sets the autozero cal limit on the instrument used for any installed LEL sensors.
            </summary>
            <remarks>
            This setting was introduced to iQuad 1.2 and is available in all versions of Ventis.
            </remarks>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setAutoZeroMode(System.Boolean)">
            <summary>
            Turns on/off the autozero functionality on the instrument used
            for any installed LEL sensors.
            </summary>
            <remarks>
            <para>
            Note that this should always be enabled for all customers' instruments.
            </para>
            <para>
            This setting was introduced to iQuad 1.2 and is available in all versions of Ventis.
            </para>
            </remarks>
            <param name="on">
            If true,then autozero mode is turned On. False turns it off Off.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setPumpFlowSetPoint(System.Int32)">
            <summary>
            Sets the pump control set point for a Ventis instrument.
            </summary>
            <remarks>
            <para>
            Pump flow set point is a mV reading that pump has to get within 5% of
            in order to run at proper flow.
            </para>
            <para>
            It is also set for Ventis LS even though it does not have a pump.
            </para>
            This method will do nothing if an attempt is made to set it for an iQuad.
            </remarks>
            <param name="setPoint"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4FactoryDriver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
             Changes the wireless module's transmission interval.
            </summary>
            <param name="interval">
            Must be a multiple of 5, and in range of 5 to 30.
            If invalid interval is specified, then default of 5 is used, instead.
            </param>
        </member>
        <member name="T:ISC.Instrument.Driver.ModbusBitConverter">
            <summary>
            Converts base data types to registers, and registers to base data types.
            </summary>
            <remarks>
            Similar to .NET's "BitConverter" class.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToAsciiString(System.UInt16[],System.Boolean)">
            <summary>
            Converts contents of passed-in modbus registers to a string
            of characters.  Registers assumed to contain two 8-bit characters apiece
            (hi/lo bytes).
            </summary>
            <param name="registerValues">Each register in the array is assumed to 
            contain two 8-bit characters (hi/lo bytes).</param>
            <returns>The returned string is trimmed of any trailing space or null characters.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToUnicodeString(System.UInt16[],System.Boolean)">
            <summary>
            Converts contents of passed-in modbus registers to a string
            of characters.  Each registers assumed to contain one 16-bit character.
            </summary>
            <remarks>
            WARNING!!  THIS FUNCTION HAS NEVER BEEN TESTED AS WE'VE NEVER NEEDED IT YET.
            NOT SURE IF BIG ENDIAN BYTE ORDER IS A PROPER ASSUMPTION.
            </remarks>
            <param name="registerValues">
            Each registers assumed to contain one 16-bit character in big-endian byte order.
            </param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToAsciiRegisters(System.String,System.UInt16)">
            <summary>
            Converts passed-in string to modbus registers containing two 8-bit
            characters per registers (high byte / low byte)
            </summary>
            <remarks></remarks>
            <param name="str"></param>
            <param name="numRegisters">Max number of registers to return.  If number
            of registers specified isn't large enough to hold the passed-in string
            then those characters that won't fit in the returned array are dropped.
            </param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToUnicodeRegisters(System.String,System.Int16)">
            <summary>
            Converts passed-in string to modbus registers containing one 16-bit
            character per register.
            </summary>
            <remarks>
            WARNING!!  THIS FUNCTION HAS NEVER BEEN TESTED AS WE'VE NEVER NEEDED IT YET.
            NOT SURE IF BIG ENDIAN BYTE ORDER IS A PROPER ASSUMPTION.
            </remarks>
            <param name="str"></param>
            <param name="numRegisters"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToInt16(System.Byte)">
            <summary>
            Converts the passed-in unsigned byte to a signed short.
            e.g. A byte value of 248 is converted to a short value of -8.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Converts first two bytes of passed-in array to an unsigned short.
            </summary>
            <remarks>
            </remarks>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns>The returned value is in big-endian byte order.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToInt32(System.Byte)">
            <summary>
            Converts the passed-in unsigned byte to a signed integer.
            e.g. A byte value of 248 is converted to an int value of -8.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToTimeSpan(System.Byte[],System.Int32)">
            <summary>
            Converts first four bytes of array to a TimeSpan.
            </summary>
            <param name="bytes">It's assumed that first four bytes of array
            represent a 32-bit integer containing a number of seconds.
            </param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToDateTimeFromY2kSeconds(System.Byte[],System.Int32)">
            <summary>
            Creates DateTime out of 4 bytes that represent the
            number of seconds since Midnight, 1/1/2000.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusBitConverter.ToDateTimeFromYMDHMS(System.Byte[],System.Int32)">
            <summary>
            Creates DateTime from 6 bytes representing Year, Month, Day, Hour, Minute, Second.
            </summary>
            <example>Example: If date is 1/1/2007 12:00:00
            <code>
             07 01 01 12 00 00
            </code>
            </example>
            <example>Example: If date is 6/23/12007 23:59:59
            <code>
            07 06 23 23 59 59
            </code>
            </example>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.CustomResponseFactor">
            <summary>
            Summary description for CustomResponseFactor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CustomResponseFactor.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CustomResponseFactor.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="gasCode">Every Custom Response Factor is tied to a particular type of gas code</param>
        </member>
        <member name="P:ISC.Instrument.Driver.CustomResponseFactor.GasCode">
            <summary>
            Every sensor profile is tied to a particular type of sensor
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.CustomResponseFactor.Name">
            <summary>
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.CustomResponseFactor.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.VentisProDriver">
            <summary>
            Driver for the Ventis Pro multigas instruments (Vaughan).
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 9600 or 115200 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.connect(System.Boolean)">
            <summary>
            For this instrument type, this method verifies that the instrument
            is able to communicate. It does NOT turn on the instrument, though, as the instrument
            automatically powers on when it's docked and charged enough, and it cannot be
            powered off when it is docked.
            </summary>
            <remarks>
            This instrument type will communicate without being "turned on" when it knows it is docked.
            This method merely verifies that the instrument is able to communicate. (The instrument would
            fail to communicate, for example, if its battery is dead.)
            </remarks>
            <param name="batching">Ignored by this instrument type. For this instrument type, a "batched connection" is <b>always</b> established.
            <note>We can get away with always doing "batched connections", for this instrument type because once
            the instrument is set to a high baud rate, we don't have to worry about it "timing out" and reverting
            to a slower baud rate if nothing talks to it for a while.  i.e., once it goes to higher baud rate, it will stay at that baud rate.
            </note>
            <note>Additional caveat: The instrument may revert to a slow baud rate if sees "garbage" Irda
            packets being sent to it, as it assumes the garbage data might be something trying to talk to it
            at a slow baud rate. When this happens (rarely), the driver is able to recover and re-connect relatively quickly.
            </note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.shutdown">
            <summary>
            </summary>
            <remarks>
            This instrument type cannot be commanded to power down when it's docked.
            Instead, for this instrument type, this method tells the instrument to go to 
            <see cref="F:ISC.Instrument.Driver.OperatingMode.Charging"/> mode, which should cause the instrument
            to turn off its sensors (if they've been turned on) so that it will charge faster.
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.turnOnSensors(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            For this instrument type, this method doesn't do anything, since the instrument automatically
            saves any changed settings to flash when it is undocked.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getEquipmentSubType">
            <summary>
            Returns the instrument's sub-type.
            </summary>
            <returns>
            Possible Ventis Pro sub-types are as follows...
            <list type="bullet">
            <item>EquipmentSubType.VentisPro4</item>
            <item>EquipmentSubType.VentisPro5</item>
            </list>
            </returns>
            <seealso cref="T:ISC.Instrument.TypeDefinition.EquipmentSubType"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            Commands the instrument to power on/off its sensors.
            </summary>
            <remarks>
            When called, this method powers on the instrument by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Running"/>.
            It powers off the instrument by setting its operating mode to <see cref="F:ISC.Instrument.Driver.OperatingMode.Charging"/>.
            </remarks>
            <param name="on">Specify true to turn on, false to turn off.</param>
            <param name="wait">Only applies if "on" parameter is true; otherwise, it is ignored.
            <para>If this paramter is True, then after the the instrument is commanded to warmup its
            sensors, it will wait for the warmup to complete before returning.</para>
            <para>If this paramter is False, then after the instrument is commanded to warmup its
            sensors, this method will immediately return; i.e., it will not wait for the warmup to complete.
            The intention is to to have the instrument warm up its sensors in "the background" while
            the calling application continues to communicate with the instrument for other things.
            </para>
            </param>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">
            Thrown if instrument fails to warmup after a sufficient amount of time waiting for it to do.</exception>
            <exception cref="T:ISC.Instrument.Driver.SystemAlarmException">
            When commanded to "warm up", this instrument type will run a self test.
            The self test may result in the instrument entering a SystemAlarm state that it will never leave until undocked.
            If this alarm state is detected, SystemAlarmException will be thrown. Its ErrorCode property will
            contain the error code that the instrument has reported.
            </exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enables/disables a sensor.
            </summary>
            <remarks>
            This method does nothing for this instrument type
            since the instrument does not support enabling/disabling of 
            sensors. They are always enabled.
            </remarks>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isSensorEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true. Sensors in this instrument type cannot be
            enabled or disabled; they're always enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSoftwareVersion">
            <summary>
            Retrieves the instrument software version.
            </summary>
            <returns>Formatted software version, in format "M.mm.BB", where "M" is major version,
            "m" is minor version, and "B" is build number.
            e.g., "2.10.03"</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setOperatingMode(ISC.Instrument.Driver.OperatingMode,System.Int32)">
            <summary>
            </summary>
            <param name="operatingMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled">Ignored.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getMfgDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSetupDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSetupTech">
            <summary>
            Retrieves the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval.
            </summary>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval. Not supported by this instrument.
            </summary>
            <param name="intervalSeconds">Ignored.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting
            for TWA calculations.
            </summary>
            <returns>Time base setting (in hours)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting used for TWA calculations
            </summary>
            <param name="timeBaseHours">Time base setting (in hours)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Access code</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getMinTemperature">
            <summary>
            Get minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getTime">
            <summary>
            Get the instrument's current time (year, month, day, hour, seconds).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setTime(System.DateTime)">
            <summary>
            Set fixed monitor's sensors to current time (year, month, day, hour, minutes)
            to the passed-in time.
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getTotalAlarmTime">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. 21.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getConfigurationVersion">
            <summary>
            Get the instrument's "configuration map" version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument's serial number
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getInstrumentPartNumber">
            <summary>
            Returns the instrument's part number.\
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getJobNumber">
            <summary>
            Returns the instrument's job number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getMfgLocation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getHardwareVersion">
            <summary>
            Returns the instrument's hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBumpTimeoutSeconds">
            <summary>
            Specifies the maxiumum amount of time a bump test can last before it times out and fails. 
            </summary>
            <param name="threshold"></param>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Specifies the maxiumum amount of time a bump test can last before it times out and fails. 
            </summary>
            <param name="seconds">
            Value must be between MinBumpTimeout and MaxBumpTimeout.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpTimeout or MaxBumpTimeout).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold">
            A percentage value that must be between MinBumpThreshold and MaxBumpThreshold.
            Otherwise, specified value will be auto-adjusted to the correct value (either MinBumpThreshold or MaxBumpThreshold).
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <returns>Returned value will be in 0.5 day increments.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setBumpInterval(System.Double)">
            <summary>
            Set the Bump Interval for the instrument.
            </summary>
            <param name="interval">Number of days, inn 0.5 day increments.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval
            </summary>
            <returns>Interval in minutes</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <param name="interval">Interval in minutes</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument's current error code.
            </summary>
            <returns>Instrument's current error code.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBatteryVoltage">
            <summary>
            Returns the battery's voltage.
            </summary>
            <remarks>
            </remarks>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>BatteryVoltage</item>
            <item>BatteryStatus</item>
            <item>Speaker1Voltage</item>
            <item>VibratingAlarmVoltage</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getResetCount">
            <summary>
            Returns the number of times that an instrument has reset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getCompanyMessage">
            <summary>
            Returns the instrument's current "company message".
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBatteryType">
            <summary>
            Return this instrument's battery type code.  
            </summary>
            <returns>
            A code with format "BP00xx" code.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBatteryRunTime">
            <summary>
            </summary>
            <returns>Not supported by this instrument.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBatterySetupDate">
            <summary>
            Returns the time that this battery pack was setup.
            </summary>
            <returns>Always returns DateTime.MinValue. Not supported by this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getLanguage">
            <summary>
            Returns the language that the instrument is currently set to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Sets the instrument to a specific language.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBacklightOption">
            <summary>
            Returns this instrument's current backlight configuraiton option
            </summary>
            <returns>Always returns 'Timed' for this instrument.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            </summary>
            <param name="inBLO"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
            <param name="timeout"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSites">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSites(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getUsers">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setUsers(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getFavoritePidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setFavoritePidFactors(System.String[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getCustomPidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setCustomPidFactors(ISC.Instrument.Driver.CustomResponseFactor[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getProfiles">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getFactoryProfile">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <param name="alarmMessages">
            The passed-in array should not exceed <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/>.
            If the array exceeds MaxAlarmActionMessages, then the extra elements will be ignored.
            <para>
            To clear all alarm messages, pass in an empty array.
            </para>
            </param>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessageLineLength"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getAlarmActionMessages"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument
            displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <returns>
            If the instrument does not currently have any alarm messages configured in it,
            then an empty array will be returned. i.e., this method will never return null.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM ("Out-of-Motion") Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM ("Out-of-Motion") Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "dock interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorPositions">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have TWA calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>false is for Oxygen, combustibles, IR Methane, and Hydrocarbon sensors. Otherwise, true is returned.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if the sensor is of a type that should have STEL calculated.
            </summary>
            <param name="sensorPos"></param>
            <returns>false is returned for Oxygen, combustibles, IR Methane, and Hydrocarbon sensors. Otherwise, true is returned.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            </param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operating on specified sensor.
            </summary>
            <param name="sensorPos">
            Sensor to query status on.
            </param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorGasCode(System.Int32)">
            <summary>
            Returns the gas that the sensor detects.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorGasCode(System.Int32,System.String)">
            <summary>
            Configures a sensor to detect a particular type of gas.
            </summary>
            <remarks>
            For this instrument type, this method is used for setting an LEL sensor's "correlation factor".
            <note>
            This method should only be
            called if <see cref="M:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.HasSensorGasCodeConfigFeature(System.String)"/> returns true.
            </note>
            </remarks>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0091"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorPartNumber(System.Int32)">
            <summary>
            Retrieves the sensor part number.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Sensor part number. Max of 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorConfigVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getPeakReading(System.Int32)">
            <summary>
            Returns a sensor's peak reading
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting.
            </summary>
            <remarks>
            This is an alarm for a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Alert alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting.
            </summary>
            <remarks>
            This is an alarm for a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Alert alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalGasString(System.Int32)">
            <summary>
            For this instrument type, this method merely returns the cal gas code.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalGasCode(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getZeroLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensitivityHiLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensitivityLoLimit(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorSensitivity(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorBaseline(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getTwaReading(System.Int32)">
            <summary>
            Get the TWA Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getStelReading(System.Int32)">
            <summary>
            Get the STEL Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorSpanReserve(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getFilterAlgorithm(System.Int32)">
            <summary>
            Filtering algorithm used for sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns>0 means no filtering for the sensor.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getFilterLevel(System.Int32)">
            <summary>
            Retrieves the level of filtering for the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns zero for this instrument type.  Filtering is always a simple average.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getMeasurementRange(System.Int32)">
            <summary>
            Maximum allowable gas reading of the sensor.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getCalTimeoutSeconds(System.Int32)">
            <summary>
            Get Calibration timeout for specified sensor
            </summary>
            <param name="sensorPos">The position of the sensor to check.</param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorMeasurementType(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorPreconditionTime(System.Int32)">
            <summary>
            Get the Precondition Time for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>
            Number of seconds.
            Zero is returned if sensor should not be preconditioned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            Get the Precondition Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            Get the Calibration Flow Rate for docking station.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            Get the Bump Flow Rate.
            </summary>
            <param name="sensorPos"></param>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by this instrument type since instrument only has 1 sensor</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.beginInstrumentCalibration">
            <summary>
            Intended to put instrument into calibration mode.
            Does nothing for this instrument type.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on specified sensors.
            </summary>
            <param name="sensorPos">The positions of the sensors to calibrate.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.endInstrumentCalibration">
            <summary>
            Intended to End/abort calibration mode on instrument.
            On the MX4, this places the instrument back in "charging" mode.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.beginInstrumentZeroing">
            <summary>
            Begin zeroing of specified sensor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.endInstrumentZeroing">
            <summary>
            End Zering of instrument
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isInstrumentZeroing">
            <summary>
            Indicates if instrument is currently zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isSensorZeroing(System.Int32)">
            <summary>
            Indicates if specified sensor is currently zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            </summary>
            <remarks>
            This method does nothing for this instrument type.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorHardwareVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns 0 since this instrument's sensors don't support a "hardware version".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.GetSensorMode(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.SetSensorMode(System.Int32,ISC.Instrument.Driver.SensorMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="sensorMode"></param>
            <param name="retries"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <remarks>
            Note that there is no "getSensorBumpFault"
            that reads the same register that this "set" function writes to.
            In order to determine if
            a sensor is in bump fault, the SensorMode for the sensor should be looked at.
            </remarks>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getLastBumpTime(System.Int32)">
            <summary>
            Returns the last time the sensor was bumped, either by hand or via DS2/cal station.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorMfgTime(System.Int32)">
            <summary>
            Returns the sensor's manfucturing date.
            </summary>
            <remarks>
            This is NOT returning the same date that <see cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorSetupDate(System.Int32)"/> returns.
            <para>Not sure what the difference between the to dates is.</para>
            </remarks>
            <param name="sensorPos"></param>
            <returns>The returned date will have a valid year, date, month.  The time portion will always be midnight, though.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorSetupDate(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorSetupDate(System.Int32)">
            <summary>
            Returns the sensor's setup date.
            </summary>
            <remarks>
            This is NOT returning the same date that <see cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorMfgTime(System.Int32)"/> returns.
            <para>Not sure what the difference between the to dates is.</para>
            </remarks>
            <param name="sensorPos"></param>
            <returns>The returned date will have a valid year, date, month.  The time portion will always be midnight, though.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getSensorMfgTime(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessMacAddress">
            <summary>
            Returns the Synapse wireless module's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
             Changes the wireless transmission interval.
            </summary>
            <remarks>
            This is the time between message transmission from instrument to Wireless device.
            </remarks>
            <param name="interval">Set to 1 or 2 seconds only.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless transmission interval.
            </summary>
            <remarks>
            This is the time between message transmission from instrument to Wireless device.
            </remarks>
            <returns>Number of seconds.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessHardwareVersion">
            <summary>
            Returns the Whisper hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessOsVersion">
            <summary>
            Returns Whisper OS version number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessSoftwareVersion">
            <summary>
            Returns Whisper scripts version number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <remarks>
            Each time the message hops from one instrument to the next the value is decremented
            until the value is 0 - then the message is no longer forwarded.
            </remarks>
            <param name="hops"></param>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessMessageHops"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <remarks>
            Each time the message hops from one instrument to the next the value is decremented
            until the value is 0 - then the message is no longer forwarded.
            </remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessMessageHops(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers">An integer value from 0 - 254.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessMaximumPeers"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns>An integer value from 0 - 254.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessMaximumPeers(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band;
            value will correspond to bit number in active channel mask.
            </remarks>
            <param name="channel">Value from 0 to 15.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band;
            value will correspond to bit number in active channel mask.
            </remarks>
            <returns>A value from 0 to 15.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band.
            </remarks>
            <param name="channel">
            Value from 0 to 15. If no secondary channel used, set to 255.
            The value (if not 255) will correspond to bit number in active channel mask.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <remarks>
            Corresponds to a single channel in the wireless frequency band.
            </remarks>
            <param name="channel">
            Value from 0 to 15. If no secondary channel used, then 255.
            The value (if not 255) will correspond to bit number in active channel mask.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessActiveChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessActiveChannelMask">
            <summary>
            Returns a  mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns>
            Each bit of this returned value is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Bits are set to 1 for the allowed channels, or are set to 0 for the disallowed channels.
            </para>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
            <exception cref="T:System.NotSupportedException">Thrown if firmare version is less than 2.40 (LWV Changed from 3.0)</exception>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessListeningPostChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <param name="mask">
            Each bit of this parameter is equivalent to one channel. (16 total bits: channels 0 to 15).
            <para>
            Set a bit to 1 to allow the channel, or set to 0 to disallow the channel.
            </para>
            <para>
            Public channel(s) must be disallowed (set to 0) so that they are not used in active frequency hopping.
            </para>
            </param>
            <exception cref="T:System.NotSupportedException">Thrown if firmare version is less than 2.40 (LWV Changed from 3.0)</exception>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessListeningPostChannelMask(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>
            This is also known as "Teammate Lost."
            </remarks>
            <param name="seconds">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessPeerLostThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>
            This is also known as "Teammate Lost."
            </remarks>
            <returns>Number of seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessPeerLostThreshold(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds">Number of minutes in half minute increments.  e.g. Specify 5 for half a minute, 10 for a minute, 15 for 1.5 minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessNetworkLostThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns>Number of minutes in half minute increments.  e.g. 5 for half a minute, 10 for a minute, 15 for 1.5 minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessNetworkLostThreshold(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessReadingsDeadband"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessReadingsDeadband(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets the wireless module's custom encryption key.
            </summary>
            <param name="key">
            A hexadecimal string representing the encryption key's bytes. e.g. Maximum of 32 hex characters.
            (The encryption key is 128 bits. That equates to 16 bytes. 16 bytes represented as hex equates to 32 characters.)
            <para>If the passed-in string is longer than 32 characters, then the extra characters will be ignored.</para>
            <para>If a null or empty string is passed in, then the module's custom encryption key will be set to all zeroes.</para>
            </param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:ISC.Instrument.Driver.InstrumentDriverException">If the passed-in string contains any non-hexadecimal characters.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the wireless module's custom encryption key.
            </summary>
            <returns>A hexadecimal string representing the encryption key's bytes.
            <para>If the encryption key is all zeroes, then an empty string is returned.</para>
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessCustomEncryptionKey(System.String)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessFeatures"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessFeatures(System.UInt16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper binding timeout.
            </summary>
            <remarks>
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>Number of seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessBindingTimeout(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <remarks>
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessBindingTimeout"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.enableWirelessFeature(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.isWirelessFeatureEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessPeerLostMessageCount(System.Int32)">
            <summary>
            Set number of messages in a row that are missed to consider a peer is lost.
            </summary>
            <param name="lost"></param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessPeerLostMessageCount(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessPeerLostMessageCount">
            <summary>
            Return the number of messages in a row that are missed to consider a peer is lost.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessPeerLostMessageCount"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getWirelessNetworkDisconnectDelay"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.enableBluetoothFeature(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.isBluetoothFeatureEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.enableBluetoothFeature(System.Boolean)"/>        
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.isBluetoothFeatureEnabled"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBluetoothMacAddress">
            <summary>
            Returns the bluetooth module's MAC address.
            </summary>
            <returns>Bluetooth mac address</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getWirelessAlarmMask">
            <summary>
            Returns the Wireless Alarm Mask
            </summary>
            <returns>The bits that are currently set.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth scripts version number.
            </summary>
            <remarks>
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>The bluetooth software version containing the version and the build number</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <remarks>
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>Returns the lone worker ok message time in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) (applicable only from Ventis Pro 2.0).
            </summary>
            <remarks>
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getBluetoothLoneWorkerOkMessageInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getHygiene">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.clearHygiene">
            <summary>
            Clears the recorded datalog.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.clearAlarmEvents">
            <summary>
            Deletes all alarm events currently stored on the instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            For this instrument type, the maximum size of the returned array is 30.
            An empty array is returned if the instrument has no logged errors.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getSensorBiasStatus">
            <summary>
            Indicates if all the sensors that need to be biased are, and the instrument is
            ready for gas operations (zero, calibrate, bump, etc.).
            </summary>
            <remarks>
            Some sensors, such as lead-free O2 sensors, are biased sensors that require constant power to get accurate readings.
            If the instrument's battery dies, then when the instrument is charged enough that the sensors can be turned on again,
            the biased sensors will likely be in OR for some time. Once the readings are low enough that the sensor is no longer
            in OR, it will still require some additional time before the readings are accurate enough where a reliable
            calibration or bump can be performed. Calibrating a biased sensor too soon can result in an improper calibration.
            <para>
            Docking stations needing to perform a gas operation (bump test, zeroing, calibration, etc.), should first call this getSensorBiasMethod
            before to determine if any sensors need biasing.  If the method indicates that biasing is currently in progress, then
            this method should be repeated called until the biasing either completed, or it fails.
            </para>
            <note>
            This method can be called for all instrument types.  It will merely return SensorBiasStatus.Ready for instruments that do
            not use biased sensors, or if the VentisPro is older than v2.20 which is the version that support for biased sensors was added.
            </note>
            <note>
            BEFORE CALLING THIS METHOD, IT IS IMPORTANT TO FIRST CALL <see cref="M:ISC.Instrument.Driver.VentisProDriver.turnOnSensors(System.Boolean,System.Boolean)"/>,
            IN ORDER TO FIRST FULLY WARM UP THE SENSORS.
            </note>
            </remarks>
            <returns>
            Docking stations should continually call this method while InProgress is returned.
            <para>Once Ready is returned, then the gas operation can proceed.</para>
            <para>If Failed is returned, then the gas operation should not proceed.</para>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.setGpsReadingInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDriver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.VentisProDriver.HasShutdownFeature">
            <summary>
            Indicates if the instrument can be turned off or not, via a modbus command.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.SerialIrdaModbusMaster">
            <summary>
            
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.ModbusMaster">
            <summary>
            ModbusMaster provides ability to read/write from/to modbus registers.
            </summary>
            <remarks>
            Note that ModbusMaster is an abstract class. It has (currently) four abstract
            methods that all subclasses must implement....
            ReadRegister, WriteRegister,
            ReadMultipleRegisters and WriteMultipleRegisters.
            
            Currently, there are two subclasses:  The SerialIrdaModbusMaster subclass
            does binary modbus over a serial/IrDA port.  The M40ModbusMaster implements
            the binary modbus protocol used for the M40 line of instruments.
            
            The intent of this parent class is that if we ever have to use another form of
            Modbus for some future instrument (such as perhaps ASCII modbus?), then we could
            add another subclass to it (AsciiModbusMaster) that encapsulates that form of
            Modbus and implements the four abstract methods.
            
            Each individual instrument driver needs to specify in its constructors which
            modbus master it needs use.  Currently, all drivers use the
            SerialIrdaModbusMaster.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.Dispose">
            <summary>
            Implementation of IDisposable. Call the virtual Dispose method. Suppress Finalization.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            </summary>
            <param name="disposing">
            true if being called explicitly by parameterless Dispose.
            false if being called by finalizing descructor.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.ReadRegister(System.UInt16,System.UInt16@)">
            <summary>
            Reads the specified register from the instrument.
            </summary>
            <param name="registerNumber">
            The modbus register number to read from.
            </param>
            <param name="registerValue">
            The value read from the instrument will be placed
            into this short for return to the caller.
            </param>
            <returns>Modbus error on failure; zero on success.  Note that some overrides  
            of this abstract method may always return zero, and instead throw on an error;
            it depends on the implementation.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.WriteRegister(System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Writes the passed in value to the specified register on the instrument.
            </summary>
            <param name="registerNumber">The modbus register number to write to.</param>
            <param name="registerValue">The value to write to the register.</param>
            <returns>Modbus error on failure; zero on success.  Note that some overrides  
            of this abstract method may always return zero, and instead throw on an error;
            it depends on the implementation.</returns>
            <param name="millisecondsResponseDelay">If greater than zero, then after writing data to serial port,
            this method will sleep for this amount of time before attempting to read the instrument's
            response from the serial port.
            <para>Ignored if CommunicationModuleType is a docking station.</para>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.ReadMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[]@)">
            <summary>
            Reads a specified series of modbus registers from the instrument, and places
            the returned values into a specified array.
            </summary>
            <param name="numRegisters">
            The number of registers to read.
            Why do we need this parameter? Can't we just use length of the registerNumbers array?
            </param>
            <param name="registerNumbers">The modbus registers to read.</param>
            <param name="registerValues">
            Values read from the instrument will be placed into this array for
            return to the caller.  There's a one-to-one relationship assumed
            between the registerNumbers array and this array.
            </param>
            <returns>Modbus error on failure; zero on success.  Note that some overrides 
            of this abstract method may always return zero, and instead throw on an error;
            it depends on the implementation.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.WriteMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[])">
            <summary>
            Writes a series of values to a series of modbus registers on the instrument.
            </summary>
            <param name="numRegisters">
            The number of registers to write.
            Why do we need this parameter? Can't we just use length of the registerNumbers array?
            </param>
            <param name="registerNumbers">The modbus registers to write.</param>
            <param name="registerValues">
            The value to write to the registers. There's an one-to-one
            relationship assumed between the registerNumbers array and this array.
            </param>
            <returns>Modbus error on failure; zero on success.  Note that some overrides 
            of this abstract method may always return zero, and instead throw on an error;
            it depends on the implementation.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetCommModuleType(ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            Specify what type of application is using the driver.
            </summary>
            <remarks>The type of application (Docking station
            versus PC datalink software, etc.) can affect how the driver
            decides to do something.  For example, if the driver knows that
            it's being used by a WinCE docking station, then it may decide to handle
            serial ports differently than if it knows it's being used on a PC.
            </remarks>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.NullAbortRequest">
            <summary>
            Default AbortRequest delegate.  Routes debug messages to nowhere.
            Always called unless overridden via
            with a different delegate via SetAbortRequester.  
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.WriteError(System.String)">
            <summary>
            Send an error message to the tracer (if a tracer has been specified).
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.WriteWarning(System.String)">
            <summary>
            Send a warning message to the tracer (if a tracer has been specified).
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.WriteDebug(System.String)">
            <summary>
            Send an debug message to the tracer (if a tracer has been specified).
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSensorRegisterNumber(System.UInt16,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseRegisterNumber"></param>
            <param name="sensorPosition"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSensorRegister(System.Int32,System.UInt16)">
            <summary>
            </summary>
            <param name="sensorPosition"></param>
            <param name="baseRegisterNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSignedSensorRegister(System.Int32,System.UInt16)">
            <summary>
            </summary>
            <param name="sensorPosition"></param>
            <param name="baseRegisterNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetRegister(System.UInt16)">
            <summary>
            </summary>
            <param name="registerNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSensorRegisterAsBytes(System.Int32,System.UInt16,System.Byte@,System.Byte@)">
            <summary>
            Read a register and split the contents into two bytes (low and high).
            </summary>
            <param name="sensorPosition"></param>
            <param name="baseRegisterNumber">Register to read</param>
            <param name="highByte">byte to return high byte of register in</param>
            <param name="lowByte">byte to return low byte of register in</param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetRegisterAsBytes(System.UInt16,System.Byte@,System.Byte@)">
            <summary>
            Read a register and split the contents into two bytes (low and high).
            </summary>
            <param name="registerNum">Register to read</param>
            <param name="highByte">byte to return high byte of register in</param>
            <param name="lowByte">byte to return low byte of register in</param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetBytesToSensorRegister(System.Int32,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Take two bytes and write them to specified register. One byte is written
            to the high byte of the register. The second byte becomes the low byte
            of the register.
            </summary>
            <param name="sensorPosition"></param>
            <param name="baseRegisterNumber"></param>
            <param name="highByte"></param>
            <param name="lowByte"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetBytesToRegister(System.UInt16,System.Byte,System.Byte)">
            <summary>
            Take two bytes and write them to specified register. One byte is written
            to the high byte of the register. The second byte becomes the low byte
            of the register.
            </summary>
            <param name="registerNum"></param>
            <param name="highByte"></param>
            <param name="lowByte"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSensorString(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Get a string value from the instrument.
            </summary>
            <param name="sensorPosition"></param>
            <param name="startRegisterNum"></param>
            <param name="endRegisterNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetString(System.UInt16,System.UInt16)">
            <summary>
            Get a string value from the instrument.
            </summary>
            <param name="startRegisterNum"></param>
            <param name="endRegisterNum"></param>
            <returns>Returns a string from the instrument with trailing white space trimmed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetString(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Get a string value from the instrument.
            </summary>
            <param name="startRegisterNum"></param>
            <param name="endRegisterNum"></param>
            <param name="trimEnd">True - The returned string will have trailing white space trimmed.  
            False - The returned string will NOT have trailing white space trimmed.</param>
            <returns>Returns a string from the instrument with trailing white space optionally trimmed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetSensorString(System.Int32,System.String,System.UInt16,System.UInt16)">
            <summary>
            Sets a string value in the instrument.
            </summary>
            <param name="sensorPosition"></param>
            <param name="str"></param>
            <param name="startRegisterNum"></param>
            <param name="endRegisterNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetString(System.String,System.UInt16,System.UInt16)">
            <summary>
            Sets a string value in the instrument.
            </summary>
            <param name="str"></param>
            <param name="startRegisterNum"></param>
            <param name="endRegisterNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSeconds(System.UInt16,System.UInt16)">
            <summary>
            Returns a TimeSpan object holding the amount of time stored
            in the specified Hi/Lo registers.  It's expected that the time
            is stored in the registers as a number of seconds.
            </summary>
            <param name="hiRegister"></param>
            <param name="loRegister"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetSeconds(System.TimeSpan,System.UInt16,System.UInt16)">
            <summary>
            Stores the specified amount of time in the specified Hi/Lo registers.
            The time interval is stored in the registers as number of seconds.
            </summary>
            <param name="amountOfTime"></param>
            <param name="hiRegister"></param>
            <param name="loRegister"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetDateTime(System.UInt16,System.UInt16,System.DateTime)">
            <summary>
            Sets the specified Hi/Lo registers to hold the specified
            calendar date/time.
            
            The date/time is stored as number of seconds since midnight, 1/1/2000.
            </summary>
            <param name="hiRegister"></param>
            <param name="loRegister"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetDateTime(System.UInt16,System.UInt16)">
            <summary>
            Returns the calendar date/time stored in the specified HiLo registers.
            
            It is assumed the date/time is stored in the registers as number
            of seconds since midnight, 1/1/2000.
            </summary>
            <param name="hiRegister"></param>
            <param name="loRegister"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.SetSensorDateTime(System.Int32,System.UInt16,System.UInt16,System.DateTime)">
            <summary>
            Sets the specified Hi/Lo registers to hold the specified
            calendar date/time.
            
            The date/time is stored as number of seconds since midnight, 1/1/2000.
            </summary>
            <param name="sensorPosition"></param>
            <param name="baseHiRegister"></param>
            <param name="baseLoRegister"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSensorDateTime(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Returns the calendar date/time stored in the specified HiLo registers.
            
            It is assumed the date/time is stored in the registers as number
            of seconds since midnight, 1/1/2000.
            </summary>
            <param name="sensorPosition"></param>
            <param name="baseHiRegister"></param>
            <param name="baseLoRegister"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusMaster.GetSensorDateAsBytes(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            This reads out a date value in the format used by instruments such as the MX4 and iTrans (Register1 = Month and Day, Register2 = Year).
            </summary>
            <remarks></remarks>
            <param name="sensorPosition"></param>
            <param name="baseMonthDayRegister">High byte = day of month, low byte = month</param>
            <param name="baseYearRegister">High byte is assumed to be 0, low byte = year (century is assumed to be 2000)</param>
            <returns>DateTime contained in the specified registers. The time of day for the returned date is 12:00:00 AM</returns>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.BatchingEnabled">
            <summary>
            
            </summary>
            <param name="enableBatchCommands"></param>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.MaxRawAttempts">
            <summary>
            The default value is 1.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.CommModuleType">
            <summary>
            Returns the CommunicationModuleType.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.BaudRate">
            <summary>
            The baud rate that should be used to communicate with the instrument.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.PortName">
            <summary>
            The COM port used to communicate with the instrument. The default is "COM1:"
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.SlaveAddress">
            <summary>
            The modbus address of the instrument we need to communicate with. The default is 1.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.AbortRequester">
            <summary>
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.Tracer">
            <summary>
            Set the Tracer that will be used for debug messages.
            The default is no tracing.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.ModbusMaster.DebugLevel">
            <summary>
            Specify the debugging level for debug message.
            If a ModbusTracer has not been specified, then the default is None.
            Otherwise, the default is "Debug".
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.Finalize">
            <summary>
            Finalizing destructor.
            Calls virtual Dispose method as part of standard IDisposable design pattern.
            
            Makes sure COM port is closed during garbage collection.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            
            This implementation ensures that the port is closed.
            </summary>
            <param name="disposing">
            true if being called explicitly by parameterless Dispose.
            false if being called by finalizing descructor.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.CreateEmptyFrame">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.CreateEmptyResponse">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ToHex(System.UInt16)">
            <summary>
            Returns the passed in value as a string formatted to hexidecimal; e.g. "0xABCD".
            </summary>
            <param name="uint16"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.BatchConnect(System.Int32)">
            <summary>
            </summary>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.BatchDisconnect">
            <summary> 
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ReadRegister(System.UInt16,System.UInt16@)">
            <summary>
            </summary>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ManagedReadRegister(System.UInt16,System.UInt16@)">
            <summary>
            The Managed Read and Write Register functions are
            very simple, easy to use interfaces, but less efficient
            </summary>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ManagedWriteRegister(System.UInt16,System.UInt16)">
            <summary>
            The non-Raw Read and Write Register functions are
            very simple, easy to use interfaces, but just a bit less efficient
            </summary>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawWriteMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[])">
            <summary>
            </summary>
            <param name="numRegisters">why do we need this parameter? i.e., can't we use length of one of the passed-in arrays?</param>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.WriteMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[])">
            <summary>
            </summary>
            <param name="numRegisters">why do we need this parameter? i.e., can't we use length of one of the passed-in arrays?</param>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawReadMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[]@)">
            <summary>
            </summary>
            <param name="numRegisters"></param>
            <param name="registerNumbers"></param>
            <param name="registerValues"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ReadMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[]@)">
            <summary>
            </summary>
            <param name="numRegisters"></param>
            <param name="registerNumbers"></param>
            <param name="registerValues"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.SetCommModuleType(ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            </summary>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawTurnOnBlast">
            <summary>
            Currently, this is only called by GbProDriver.PowerOnInstrument().
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawWakeupConnectSetBaud(System.String)">
            <summary>
            Do the wakeup sequence to accomodate IrDA peeking.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawDisconnect(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawDisconnect">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawResetBaudDisconnect">
            <summary>
            Set the instrument baud rate back to BAUD_RATE_9600.
            Disconnect the serial port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawReadRegister(System.UInt16,System.UInt16@,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <remarks>NOT THREADSAFE</remarks>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <param name="maxRawAttempts">Number of calls to low-level TxRx this routine can make.</param>
            <param name="retryDelay">Milliseconds to sleep between each attempt in the low-level TxRx call.</param>
            <param name="maxTxRxAttempts">Maximum number of attempts the low-level TxRx call will make.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.DownloadCalBumpData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="eepromRecord"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.HexAsciiStringToString(System.String)">
            <summary>
            HexAsciiString to String
            </summary>
            <param name="hexAsciiString"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.HexAsciiStringToString(System.String,System.Boolean)">
            <summary>
            HexAsciiString to String with trim spaces at end if trimEnd is passed true
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.RawWriteRegister(System.UInt16,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <remarks>NOT THREADSAFE</remarks>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <param name="maxRawAttempts">Number of calls to low-level TxRx this routine can make.</param>
            <param name="rxDelay">After sending,the low-level TxRx call will sleep this amount of time before trying to receive.</param>
            <param name="retryDelay">Milliseconds to sleep between each attempt in the low-level TxRx call.</param>
            <param name="maxTxRxAttempts">Maximum number of attempts the low-level TxRx call will make.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.BuildModbusBufferFrame(System.UInt16,System.Boolean,System.UInt16,System.Int32,System.Byte[])">
            <summary>
            A modbus buffer is an extension to the modbus protocol
            The instrument supports only standard holding registers
            and 'modbus buffers'
            </summary>
            <param name="address"></param>
            <param name="isRead"></param>
            <param name="bufferNumber"></param>
            <param name="numberOfBytes"></param>
            <param name="dataBytes"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.BuildGetDatalogRecordFrame(System.UInt16,System.UInt16)">
            <summary>
            A datalog frame has its own function code
            </summary>
            <param name="address"></param>
            <param name="datalogFrameNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.BuildGetDatalogHeaderFrame(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            A datalog header is transferred in three header frames
            Each header frame has its own modbus function code.
            </summary>
            <param name="address"></param>
            <param name="frameNumber"></param>
            <param name="headerNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.BuildModbusRegisterFrame(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Build a read/write message for holding registers
            according to the modbus protocol frame format.
            The ModbusLibrary will add the checksum to the frame.
            </summary>
            <param name="isRead"></param>
            <param name="registerNumber"></param>
            <param name="regValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ParseReadResponse(System.String,System.UInt16@)">
            <summary>
            
            </summary>
            <param name="responseString"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.ParseWriteResponse(System.UInt16,System.String)">
            <summary>
            
            </summary>
            <param name="registerNum"></param>
            <param name="responseString"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.TxRx(System.String,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="txFrame"></param>
            <param name="rxExpectedLength"></param>
            <param name="rxFrameBuilder"></param>
            <param name="rxDelay"></param>
            <param name="retryDelay"></param>
            <param name="maxAttempts"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.GetDatalogPacket(System.UInt16)">
            <summary>
            Download a packet of datalog data from instrument.
            </summary>
            <remarks>
            This method does NOT support the Gas Badge Pro.  
            </remarks>
            <param name="packetNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.GetGbProDatalogRecordFrame(System.UInt16,ISC.Instrument.Driver.Resolution,ISC.Instrument.Driver.DriverInstrumentSensorReading[]@,System.Int16@)">
            <summary>
            A datalog record frame holds multiple datalog records. 
            </summary>
            <param name="frameNumber"></param>
            <param name="resolution">Resolution to apply to floating point readings.</param>
            <param name="logRecords"></param>
            <param name="numRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SerialIrdaModbusMaster.GetGbProDatalogHeader(System.UInt16,ISC.Instrument.Driver.DatalogHeader@)">
            <summary>
            A datalog header is transferred from the instrument to the host in 3 frames.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.SerialIrdaModbusMaster.RetryDelay">
            <summary>
            Returns a value of 100 for DSX, 10 for PC.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.SerialIrdaModbusMaster.TxRxCount">
            <summary>
            This is a count of how many times TxRx has been called. 
            (i.e., basically, a count of the number of modbus registers that have been read or written.)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.SerialIrdaModbusMaster.TxRxRetries">
            <summary>
            This is a count of how many times TxRx has had to retry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationModbusMaster.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationModbusMaster.Finalize">
            <summary>
            Finalizing destructor.
            Calls virtual Dispose method as part of standard IDisposable design pattern.
            
            Makes sure COM port is closed during garbage collection.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalStationModbusMaster.DownloadCalBumpData(System.Byte[])">
            <summary>
            Downloads calibration and bump data records from the instrument.
            This method is intended for use by the cal station.
            </summary>
            <param name="eepromData">The byte array to hold the data.</param>
            <returns>Error returned by Modbus driver (0 = no error).</returns>
        </member>
        <member name="T:ISC.Instrument.Driver.HexMath">
            <summary>
            A port of J. Dolfi's C++ HexMath class to C#.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.HexMath.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.HexMath.ByteBufferToHexAscii(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.HexMath.HexAsciiToByteBuffer(System.String)">
            <summary>
            
            </summary>
            <param name="asciiString"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.HexMath.NibbleToHexAsciiNibble(System.Byte)">
            <summary>
            
            </summary>
            <param name="nibble"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.HexMath.HexAsciiNibbleToNibble(System.Char)">
            <summary>
            
            </summary>
            <param name="asciiNibble"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.HexMath.CalculateModbusCrc(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4DriverInstrumentBumpRecord">
            <summary>
            Stores data for a bump record retrieved from an instrument.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverSensorBumpRecord">
            <summary>
            for bump records, the gas readings, pass/fail, date, 
            sensor type, time, and instrument serial number are returned
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverInstrumentSensorReadingPeriod">
            <summary>
            A period of readings from a single sensor
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorReadingPeriod.Timestamp">
            <summary>
            Date and time this period was started.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.CalPlusRegistersAndDefs">
            <summary>
            Summary description for HcalRegistersAndDefs.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.CalPlusRegistersAndDefs.INSTRUMENT_MODBUS_ADDRESS">
            <summary>
            Slave address of docked instruments.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.CalPlusRegistersAndDefs.CAL_STATION_MODBUS_ADDRESS">
            <summary>
            Modbus address of the actual Cal station (not the docked instruments).
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusRegistersAndDefs.#ctor">
            <summary>
            Constructor. Protected. Access only allowed (and necessary) for statics.
            Protected so that GbProRegisters can derive from it.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.CalPlusRegistersAndDefs.SetupGasSensorDefaultTable">
            <summary>
            Loads the Hashtable GasSensorDefaultTable with available sensors.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_TIME_HI">
            <summary>Bump/cal timestamp, high byte.  timestamp is number of seconds since 2000</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_TIME_LO">
            <summary>Bump/cal timestamp, low byte.  timestamp is number of seconds since 2000</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_TYPE">
            <summary>Operation type. 1 = bump, 2 = cal, 3 = zero (only used when zeroing fails)</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_STATUS">
            <summary>Zero / Bump / Cal result. hiByte = zero status, loByte = bump/cal status</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_GAS_DEC_PLACES">
            <summary>high byte = DecimalPlaces, low byte = GasType</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_READING">
            <summary>Final sensor reading (for bump) / Span reserve (for cal)</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_LOW_THRESHOLD">
            <summary>Sensor low alarm threshold </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_HIGH_THRESHOLD">
            <summary>Sensor high alarm threshold</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_MEASUREMENT_UNITS">
            <summary>Sensor measurement units</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GbProRegisters.GAS_OP_LOG_CAL_GAS_CONC">
            <summary>Sensor cal gas concentration</summary>
        </member>
        <member name="T:ISC.Instrument.Driver.EquipmentType">
            <summary>
            EquipmentType is returned by the driver's <see cref="M:ISC.Instrument.Driver.InstrumentDriver.getEquipmentType"/> method.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getEquipmentType"/>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentType.SingleCalStation">
            <summary>
            Returned by by the Cal Plus, MxCal, and VCal-single stations .
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentType.VCalSixUnitCalStation">
            <summary>
            Returned by the "V-Cal 6 Unit" calibration station.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentType.RadiusBZ1">
            <summary>
            Radius BZ1 base unit.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentType.M40M">
            <summary>
            This value is only used internally by the driver; it is not in any instrument firmware
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentType.M40MA">
            <summary>
            This value is only used internally by the driver; it is not in any instrument firmware
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentType.Dummy">
            <summary>
            Returned by the DummyDriver.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.DateTimeType.None">
            <summary>
            Instrument provides no last calibration date/time info
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.DateTimeType.DateTime">
            <summary>
            DateTime field contains full date/time information (month,day,year, + hour,minute,second).
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.DateTimeType.Date">
            <summary>
            DateTime field contains only date information (month,day,year), but no time info.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.CommunicationModuleTypes">
             <summary>
             
             </summary>
            
        </member>
        <member name="F:ISC.Instrument.Driver.CommunicationModuleTypes.CalStation">
            <summary>
            Single-bay calibration stations.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.CommunicationModuleTypes.RS232_ENDEC">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.CommunicationModuleTypes.MultiCalStation">
            <summary>
            The six-bay V-Cal calibration station.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.CommunicationModuleTypes.DSX">
            <summary>
            DSX or iNetDS docking station hardware. But not DS2 hardware!
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.CommunicationModuleTypes.TUSB3410">
            <summary>
            THIS IS ONLY FOR INTERNAL USE BY THE INSTRUMENT DRIVER. APPLICATIONS SHOULD NOT USE THIS.
            </summary>
            <remarks>
            Texas Instruments TUSB3410 USB to Serial Controller.
            Used in Datalinks for all instrument types except SafeCore.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.CommunicationModuleTypes.FTDI">
            <summary>
            THIS IS ONLY FOR INTERNAL USE BY THE INSTRUMENT DRIVER. APPLICATIONS SHOULD NOT USE THIS.
            </summary>
            <remarks>
            FTDI USB to serial RS232 converter.
            Used in SafeCore datalink.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.IR">
            <summary>
            Infrared sensor; typically for measuring combustible gases.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.TOX">
            <summary>
            Single toxic gas sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.OXY">
            <summary>
            Oxygen sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.LEL">
            <summary>
            Combustible gases sensor, capable of measuring Lower Explosive Limit.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.PID">
            <summary>
            Photoionization Detector sensor; typically for measuring volatile organic compounds.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.COSH">
            <summary>
            Dual CO/H2S sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.DualIR">
            <summary>
            Dual infrared (2 gas types) sensor; e.g. CH4/CO2.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.PID10eV">
            <summary>
            10.0eV PID sensor. (Typically used for Benzene.)
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.ULP_IR">
            <summary>
            Ultra Low Power IR Sensor // LWV 8.9.1 IID-246
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorType.DualRangeULP_IR">
            <summary>
            Dual Range Ultra Low Power IR Sensor // LWV 8.9.1 IID-246
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.ChargePhase.ChargeOff">
            <summary>
            No charger installed.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.ChargePhase.PreCharge">
            <summary>
            This phase will probably never been seen by the driver. Instruments are internally
            in this phase when they are not charged enough to communicate.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.ChargePhase.FullCharge">
            <summary>
            Instrument is charging itself. Also known as "bulk charge" for for Ventis Pro instruments.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.ChargePhase.TopOff">
            <summary>
            Returned by MX6 instruments. When almost fully charged, the instrument
            will switch to this charge phase, which is sort of a "trickle charge".
            Instrument is charged enough to be taken into the field at this point.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.ChargePhase.Taper">
            <summary>
            Returned by Ventis Pro instruments. Instrument will change to this ChargePhase when
            it is around 80% fully charged.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Manufacturer">
            <summary>
            Sensor manufacturers.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.MeasurementType">
            <summary>
            Defines gas measurement types.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.MeasurementType.PPM">
            <summary>
            "Parts Per Million"
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.MeasurementType.VOL">
            <summary>
            %Vol, i.e., "Percent Volume"
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.MeasurementType.LEL">
            <summary>
            %LEL, i.e, "Percent of Lower Explosive Limit"
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.OperatingMode.ReturnToISC">
            <summary>
            To be used by iNet instruments sent back to the factory.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.OperatingMode.ConnectedAC">
            <summary>
            An M40 operating mode.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.OperatingMode.ConnectedDC">
            <summary>
            An M40 operating mode.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6BatteryMode">
            <summary>
            Used for configuring the MX6 battery pack.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SensorStatuses">
            <summary>
            Possible statuses for DriverInstrumentSensorSession.Status property.
            </summary>
            <remarks>
            Note that this enumeration is treated as a bit field.  That is, for a any given
            DriverInstrumentSensorSession, its Status property may contain multiple statuses.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.AlarmLow">
            <summary>
            Bit 0: Low alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.AlarmHigh">
            <summary>
            Bit 1: High alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.Underrange">
            <summary>
            Bit 2: Negative overrange (-OR) alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.Overrange">
            <summary>
            Bit 3: Overrange (+OR) alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.CalFault">
            <summary>
            Bit 4: Calibration failed alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.ZeroFault">
            <summary>
            Bit 5: Zero failed alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.Locked">
            <summary>
            Bit 6: Instrument locked alarm.
            </summary>
            <remarks>
            Instrument locked operation of this sensor. e.g., if an LEL sensor goes into overrange, it is turned off until acknowledged by the user.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.Disabled">
            <summary>
            Bit 7: User disabled.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.BumpFault">
            <summary>
            Bit 8: Bump test failed.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.DualSense">
            <summary>
            Bit 9: Sensor is running in DualSense mode.
            </summary>
            <remarks>
            Not supported by Tango.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.CalPastDue">
            <summary>
            Bit 10: Calibration due alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.Missing">
            <summary>
            Bit 11: Sensor missing alarm.
            </summary>
            <remarks>
            Should never be seen in datalog, since uninstalled sensors aren't included in the data.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.Failed">
            <summary>
            Bit 12: Sensor in data fail state alarm.
            </summary>
            <remarks>
            (caused by bad checksum?)
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.CalMarginal">
            <summary>
            Bit 13: Previous calibration was marginal.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.AlarmTWA">
            <summary>
            Bit 14: TWA alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorStatuses.AlarmSTEL">
            <summary>
            Bit 15: STEL alarm.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SensorMode">
            <summary>
            Possible values in SENSOR_MODE register
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.Uninstalled">
            <summary>
            Sensor not installed.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.Running">
            <summary>
            Sensor is running; writable.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.Zeroing">
            <summary>
            Sensor is zeroing; writable.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.Calibrating">
            <summary>
            Sensor is calibrating; writable.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.ZeroFault">
            <summary>
            Sensor is in zero fault. i.e., the sensor failed the last attempt to zero it.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.CalibrationFault">
            <summary>
            Sensor is in calibration fault.  i.e., the sensor failed the last attempt to calibrate it.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.DataFault">
            <summary>
            Sensor is in data fault.  i.e., the instrument detects invalid / corrupted data fields programmed into the sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.Paused">
            <summary>
            Sensor is paused; writable.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorMode.BumpFault">
            <summary>
            Sensor is in Bump Fault. (There may be one or more instrument types that think this is "QuickBump" mode).
            </summary>
            <remarks>
             There may be one or more instrument types that think this is "QuickBump" mode.(Ventis/Tango?)
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.SensorCode">
            <summary>
            Sensor codes for sensors that are commonly referred to within source code.
            </summary>
            <remarks>
            NOTE: THIS IS NOT NECESSARILY THE FULL LIST OF CODES; IT IS MERELY THOSE MOST
            COMMONLY REFERENCED IN SOURCE CODE.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorCode.COMBUSTIBLE_PPM">
            <summary>
            Combustible (PPM) sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorCode.COMBUSTIBLE_CH4">
            <summary>
            Combustible (%VOL) sensor for measuring methane.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorCode.COMBUSTIBLE_LEL">
            <summary>
            Standard Combustible (%LEL) sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorCode.IR_METHANE_LEL">
            <summary>
            IR-Methane sensor that measures %LEL.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorCode.HYDROCARBON">
            <summary>
            Hydrocarbon (a.k.a. "HC") sensor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorCode.BTEX">
            <summary>
            BTEX sensor. (detects Benzene, Toluene, Ethyl benzene, Xylenes.)
            </summary>
            <remarks>
            This sensor code is reserved for future use as part of the Garcia project.
            It is not yet really being used, and if Garcia project is cancelled,
            we can remove this / repurpose it for some other sensor. - 12/2015.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.SensorCode.#ctor">
            <summary>
            Private ctor - can't instantate; this class is static attributes only.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.GasCode">
            <summary>
            Gas codes for gases that are commonly referred to within source code.
            </summary>
            <remarks>
            NOTE: THIS IS NOT NECESSARILY THE FULL LIST OF CODES; IT IS MERELY THOSE MOST
            COMMONLY REFERENCED IN SOURCE CODE.
            </remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.GasCode.ISOBUTANE">
            <summary>
            Isobutane (C4H10).
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GasCode.NONANE">
            <summary>
            Nonane (C9H20).
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GasCode.PROXIMITY">
            <summary>
            Logged by instrument in its alarm events logs whenever a Proximity alarm occurs.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GasCode.OOM">
            <summary>
            Logged by instrument in its alarm events logs whenever an Out-of-Motion (a.k.a. "Man Down") alarm occurs.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.GasCode.PANIC">
            <summary>
            Logged by instrument in its alarm events logs whenever Panic alarm occurs.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GasCode.#ctor">
            <summary>
            Private ctor - can't instantate; this class is static attributes only.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentPumpStatus.On">
            <summary>
            Pump is on.  Flow is OK.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentPumpStatus.Off">
            <summary>
            Pump is off.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentPumpStatus.Fault">
            <summary>
            Pump is on, but has no or low flow.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorFailures.Accelerometer">
            <summary>
            VentisPro only.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.IndicatorTest">
            <summary>
            For use with FactoryDrivers' setIndicatorTest() method.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.NoIndicator">
            <summary>
            Turn all indicators off.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.LeftLED">
            <summary>
            Turn on the instrument's left LED.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.RightLED">
            <summary>
            Turn on the instrument's right LED.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.VibratingMotor">
            <summary>
            Turn on the instrument's vibrating motor.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.Speaker">
            <summary>
            Turn on the instrument's speaker.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.Backlight">
            <summary>
            Turn on the instrument's backlight.  Leaves LCD segments as they are.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.MiddleLED">
            <summary>
            Turn on the instrument's middle LED.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.LCD">
            <summary>
            Turn on all LCD Segments.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.BacklitLCD">
            <summary>
            Turn on all LCD Segments, and the LCD's backlight, too.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.Accelerometer">
            <summary>
            Accelerometer test (VentisPro).
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.LowAlarmSequence">
            <summary>
            Cause the instrument to beep and flash as if it was in low alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.HighAlarmSequence">
            <summary>
            Cause the instrument to beep and flash as if it was in high alarm.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.NoLCD">
            <summary>
            Turn off all LCD segements, and the LCD's backlight, too.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.IndicatorTest.BacklightNoLCD">
            <summary>
            Turn on the backlight, and turn off all LCD segements.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.WirelessStatus">
            <summary>
            The possible Whisper and Ventis-LS statuses returned by the instrument driver's
            getWirelessStatus() method.
            All values are specific to Whisper, except the few that are specifically noted as being
            specific to the Ventis-LS.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.WirelessStatus.Deactivated">
            <summary>
            This is for the Ventis-LS only. Its numeric value is not the same as the value that the Ventis-LS actually returns.
            The Ventis-LS actually returns a value of zero for this status.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.WirelessStatus.DeepSleep">
            <summary>
            This is for the Ventis-LS only. Its numeric value is not the same as the value that the Ventis-LS actually returns.
            The Ventis-LS actually returns a value of 0x55 for this status.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.WirelessStatus.Active">
            <summary>
            This is for the Ventis-LS only. Its numeric value is not the same as the value that the Ventis-LS actually returns.
            The Ventis-LS actually returns a value of 0xff for this status.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SensorBiasStatus">
            <summary>
            Returned by <see cref="M:ISC.Instrument.Driver.InstrumentDriver.getSensorBiasStatus"/>.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorBiasStatus.Ready">
            <summary>
            Returned if the instrument has no O2 sensor that needs to be biased, or if that sensor is biased and ready to go.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorBiasStatus.InProgress">
            <summary>
            Biasing of a sensor is currently in progress.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SensorBiasStatus.Failed">
            <summary>
            Biasing of a sensor failed; i.e., the biasing took too long, and sensor may be bad.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.BatteryImpedance">
            <summary>
            The battery's impedance
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.BatteryVoltage">
            <summary>
            The battery's voltage, in mV.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.SpeakerVoltage">
            <summary>
            The value of speaker voltage, in mV.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.SpeakerCurrent">
            <summary>
            The value of speaker current, in uA.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.Speaker1Voltage">
            <summary>
            The value of speaker voltage, in mV.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.Speaker2Voltage">
            <summary>
            The value of speaker voltage, in mV.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.VibratingAlarmVoltage">
            <summary>
            The voltage of vibrating alarm, in mV.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.VibratingAlarmCurrent">
            <summary>
            The vurrent of vibrating alarm, in uA.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.BatteryStatus">
            <summary>
            Battery icon level i.e. 3 bars
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.RightLedCurrent">
            <summary>
            The current of the right LED, in uA.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.LeftLedCurrent">
            <summary>
            The current of the left LED, in uA.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.CenterLedCurrent">
            <summary>
            The current of the middle LED, in uA.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.BacklightLedCurrent">
            <summary>
            The current of the backlight LED, in uA.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentDiagnosticCode.ResetCount">
            <summary>
            The number of times the instrument has reset.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.InstrumentDiagnostic">
            <summary>
            Represents the results of a specific diagnostic test run on an instrument.
            Each diagnostic consists of a 'code' number for the diagnostic, and a resulting 
            value for the test.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentDiagnostic.#ctor(ISC.Instrument.Driver.InstrumentDiagnosticCode,System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="result">e.g. "1.00", "true", etc.</param>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDiagnostic.Code">
            <summary>
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentDiagnostic.Result">
            <summary>
            Returns this diagnostic's result.  Caller must determine type 
            of result (string, int, float, etc.) and then deal with it,
            or can just do a ToString() on the result.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.AbortRequest">
            <summary>
            Used to force driver to immediately stop communicating with the instrument.
            </summary>
            <remarks>
            <para>
            After constructing an instance of InstrumentDriver, you may optionally call 
            SetAbortRequester to pass in an AbortRequest delegate.
            </para>
            <para>
            Then, during communications with the the instrument, the driver will then
            periodically call this delegate to ask if the driver should abort
            what it's doing.  It always calls this delegate immediately after it encounters
            any error in trying to communicate. As long as the delegate returns True, the driver
            will continue doing what it needs to do.  If the delegate ever returns
            false, the driver will immediately abort and will throw a
            CommunicationsException
            </para>
            This is useful on the docking station, for example, in that if the instrument is
            undocked, the docking station can tell the driver to give up trying to communicate
            with the now missing instrument.
            <para>
            </para>
            <para>
            This may also be useful for Windows applications if those applications
            whish to have a some sort of "Stop" button to allow the user to stop
            a download of the Datalog, etc.
            </para>
            </remarks>
            <example>
            The following is example code on how to use the AbortRequest delegate.
            This example assumes a Windows form application that has a "Stop" button on the form.
            The user clicks the "Stop" button to force the application to cease communicating with
            the instrument...
            <code>
            private bool _stopCommunicating;  // Pressing the stop button will set this to false.
            
            // Method that our AbortRequest delegate will be assigned to. 
            public bool Stop()
            {
                return _stopCommunicating;
            }
            
            // "Stop" button handler.
            protected override void OnClick( EventArgs e )
            {
                _stopCommunicating = true;
            }
            </code>
            <para>
            When the application instantiates the driver, it needs to assigns the Stop() method
            to an AbortRequest delegate and hands the delegate to the driver...
            </para>
            <code>
            // Although an MX6 driver is used in this example, note that ANY driver can be used.
            // Note also, that for a Windows application, the following would need to be performed in
            // some background thread, so that when the driver is communicating, it does not block
            // user from pressing the application's "Stop" button.
            using ( InstrumentDriver driver = new Mx6InstrumentDriver() )
            {
                driver.setPortSpeed( 115200 );
                driver.SetModbusTracer( _tracer );
                driver.SetAbortRequester( new AbortRequester( Stop ) );
            
                try
                {
                    driver.connect(true);
                    
                    // Call various driver methods, to get or set data on the instrument...
                    [...]
                    [...] // code not shown, for brevity
                    [...]
                }
                catch ( CommunicationAbortedException )
                {
                    MessageBox.Show( "Instrument communications aborted.  User pressed the Stop button!" );
                }
            }
            </code>
            </example>
            <seealso cref="T:ISC.Instrument.Driver.CommunicationAbortedException"/>
            <seealso cref="M:ISC.Instrument.Driver.ModbusDriver.SetAbortRequester(ISC.Instrument.Driver.AbortRequest)"/>
        </member>
        <member name="T:ISC.Instrument.Driver.CorruptHygieneException">
            <summary>
            Thrown if an error is encountered trying to parse the datalog that is downloaded
            from an instrument.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getHygiene"/>
        </member>
        <member name="T:ISC.Instrument.Driver.ConfigurationException">
            <summary>
            Thrown when there a problem is encountered trying to factory configure an instrument.
            </summary>
            <remarks>
            Typically thrown by factory drivers' beginConfiguration() and endConfiguration() methods.
            For example, endConfiguration methods will typically throw this exception if the instrument 
            remains stuck in "config mode".
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4Datalogger">
            <summary>
            Downloads the datalog "packets" from instrument, then parses the packets to create datalog sessions.
            </summary>
            <remarks>
            <para>
            From what I can tell, there are only 3 extremely minor code differences between the Mx4Datalogger and the Mx6Datalogger.
            The differneces are as follows...
            </para>
            <para>
            1) The Mx6Datalogger knows what to do if it encounters a Response Factor packet. (See the code in
            Mx6Datalogger.ParseSessionPackets that calls ParseCustomResponseFactorHeader). This same code could also
            safely exist for MX4 datalog processing:  just would never execute since it would never encounter response factor packets
            when parsing MX4 datalog data.
            </para>
            <para>
            2) Mx6Datalogger.ParseSessionFooter has one extra line of code for parsing out the "comment" field.
            </para>
            <para>
            3) The ParsePeriod method of each deal with the period's Timestamp field differently due to different formats for the
            timestamp in MX6 versus MX4.
            </para>
            <para>- JMP, 3/2012</para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.#ctor(ISC.Instrument.Driver.InstrumentDriver,ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            
            </summary>
            <param name="driver"></param>
            <param name="modbusMaster"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.DownloadSession(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.CommitPeriod(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.DownloadSessionPackets(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParseSessionHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParseSessionFooter(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParseSensorSessionHeaders(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParseCustomResponseFactorHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParseSensorStatus(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParsePeriod(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.ParseReading(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4Datalogger.BytesToString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4SerialIrdaModbusMaster.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4SerialIrdaModbusMaster.SetCommModuleType(ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.Finalize">
            <summary>
            Finalizing destructor.
            Calls virtual Dispose method as part of standard IDisposable design pattern.
            
            Makes sure COM port is closed during garbage collection.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            
            This implementation ensures that the port is closed.
            </summary>
            <param name="disposing">
            true if being called explicitly by parameterless Dispose.
            false if being called by finalizing descructor.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ClosePort">
            <summary>
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.PurgePort">
            <summary>
            Clears input and output buffers of the serial port
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.IsEqualBytes(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays and returns true if they have the same contents; else false.
            </summary>
            <param name="bytes1"></param>
            <param name="bytes2"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.InsertCRC(System.Byte[])">
            <summary>
            Calculates a two byte CRC on the passed-in array of bytes, then
            writes the CRC to the last two bytes of the array.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.CalculateCRC(System.Byte[])">
            <summary>
            Computes the value of a CRC based on the message frame not including the CRC value.
            </summary>
            <remarks>
            Ported with minimal changes from M40 DataLink code (originally C++).
            </remarks>
            <param name="bytes">
            </param>
            <returns>The computed CRC value with the high byte followed by the low byte.
            The bytes must be switched.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ByteArrayToString(System.Byte[])">
            <summary>
            Covert byte array into a displayable string.
            </summary>
            <param name="buffer"></param>
            <returns>Returned string is in hex.  Example: "0x01AB3F"</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ByteArrayToString(System.Byte[],System.Int32)">
            <summary>
            Covert byte array into a displayable string. Example: "0x01AB3F"
            </summary>
            <param name="buffer"></param>
            <param name="numBytesToFormat">Maximum number of bytes in the array to format.</param>
            <returns>Returned string is in hex.  Example: "0x01AB3F"</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.SendByteArray(System.Byte[])">
            <summary>
            Helper method for WriteUInt32, WriteByte, etc.
            Sends the the specified byte array to the serial port.
            </summary>
            <param name="readCmdBytes"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ReceiveByteArray(System.Int32)">
            <summary>
            </summary>
            <param name="bytesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ReceiveByteArray(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytesToRead"></param>
            <param name="mandatory">
            If mandatory is true, then routine will throw if the number of bytes actually
            read does not match bytesToRead arguement. It will also verify the CRC in the received data.
            If mandatory is false, then routine allows us to receive less than what we expect.
            This can happen if the instrument is trying to return an error code in which case the 
            returned number of bytes is less than if the instrument was trying to return a normal 'success'.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ExtractCrc(System.Byte[])">
            <summary>
            Extract two byte CRC out of the end of the passed-in message
            frame, convert to a ushort, and return it.
            </summary>
            <param name="buffer">
            It's assumed that the last two bytes of the array are the
            high and low bytes of the CRC.
            </param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ReadRegister(System.UInt16,System.UInt16@)">
            <summary>
            Reads the specified register from the instrument.
            </summary>
            <param name="registerNumber">The register number to read.</param>
            <param name="registerValue">
            The value read from the instrument will be placed
            into this short for return to the caller.
            </param>
            <returns>
            For this overridden version for the M40, this method always returns zero.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.ReadMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[]@)">
            <summary>
            Reads a specified series of modbus registers from the instrument, and places
            the returned values into a specified array.
            </summary>
            <param name="numRegisters">WHY DO WE NEED THIS PARAMETER? I.E., CAN'T WE USE LENGTH OF ONE OF THE PASSED-IN ARRAYS?</param>
            <param name="registerNumbers">The modbus registers to read.</param>
            <param name="registerValues">
            Values read from the instrument will be placed into this array for
            return to the caller.  There's a one-to-one relationship assumed
            between the registerNumbers array and this array.
            </param>
            <returns>For this overridden version for the M40, this method always returns zero.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.WriteMultipleRegisters(System.UInt16,System.UInt16[],System.UInt16[])">
            <summary>
            
            </summary>
            <param name="numRegisters">why do we need this parameter? i.e., can't we use length of one of the passed-in arrays?</param>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.Command(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="registerNumber"></param>
            <param name="registerValue"></param>
            <returns>The byte array that was sent to the instrument</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.M40ModusMaster.GetDatalogSessionSize">
            <summary>
            Returns number of packets in the session.
            </summary>
            <param name="sessionNumber"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6DatalogPacketizer">
            <summary>
            Manages the packets of hygiene data that are downloaded from instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6DatalogPacketizer.Add(System.Byte[])">
            <summary>
            Push a packet onto the end of the queue.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6DatalogPacketizer.Pop">
            <summary>
            Remove the first packet at the front of the queue and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6DatalogPacketizer.Peek">
            <summary>
            Return the packet at the front of the queue, leaving it at the front of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6DatalogPacketizer.GetNextRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6DatalogPacketizer.GetBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="recordSize"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6DatalogPacketizer.CheckCrc(System.Byte[])">
            <summary>
            Each record has a CRC appended at the end.  This is a CRC computed at the time
            the record was written to the instrument's dataflash.  We need to check the CRC's
            to detect corrupt record.  Any invalid CRCs mean we have a corrupt dataflash and
            the hygiene is invalid.
            </summary>
            <param name="record"></param>
            <exception cref="T:ISC.Instrument.Driver.CorruptHygieneException">Thrown if an invalid CRC is found</exception>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverInstrumentDatalogSession">
            <summary>
            One session of reading periods for all sensors in an instrument
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentDatalogSession.CorruptionException">
            <summary>
            Will return non-null if the session is incomplete due to corrupted data retrieved from the instrument.
            Will contain exception thrown when corruption was detected.
            The session will contain all data retrieved from the instrument up to the point of corruption.Will
            be null if no corruption was detected.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentDatalogSession.BaseUnitSerialNumber">
            <summary>
            Contains the serial number of the base unit.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.GbProDriver">
            <summary>
            The GBPro driver extends the GBPlus driver, adding commands
            needed for docking on the DS2, and for DataLogging.
            
            The "GBPro" driver is for use with Gas Badge Pro instruments.
            </summary>
            <remarks>
            <para>
            The following info was provided by Jeff Marting in regards to having to "blast" the
            instrument with IrDA packets. Placing the info here for 'safe keeping'...
            </para>
            <para>"If the GasBadge Pro is placed in a cradle when it is turned off, it will "peek"
            for an IrDA signal every 15 seconds.  It will look for about 4 ms. If it doesn’t
            see 4 edges on the IrDA signal during that time, it will disable the IrDA.
            If it sees the blast, the GasBadge Pro will wake up and enter "connected" mode.
            </para>
            <para>
            If the instrument is powered on when docked, the process is similar,
            but it will look for communications every second instead of every 15.
            </para>
            <para>
            Once the instrument is in connected mode, it will remain there until it hasn’t
            received any commands for about 15 seconds. When that occurs, it will return to
            peeking mode."
            </para>
            <para>
            It probably doesn’t make much difference which baud rate is used for blasting,
            since the instrument only needs to see 4 edges in 4 ms.  It would probably be simpler
            to use 9600, since that is the default speed for Modbus communication."
            </para>
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.GbPlusDriver">
             <summary>
             The "GbPlusDriver" driver is for use with Gas Badge Plus instruments.
             </summary>
            
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.#ctor(System.Type)">
            <summary>
            For use by parent GbProDriver class.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.#ctor(System.String,System.Type)">
            <summary>
            For use by parent GbProDriver class.
            </summary>
            <param name="comPort"></param>
            <param name="driverType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes,System.Type)">
            <summary>
            For use by parent GbProDriver class.
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.InitInstrumentOptions">
            <summary>
            Initialize the instrument options cache.  Helper method for Init().
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setPortSpeed(System.Int32)">
            <summary>
             Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Ignored for this instrument type.</param>
            <exception cref="T:System.NotSupportedException">Is always thrown for this instrument type.  The baud rate is hard coded at 9600.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.connect(System.Boolean)">
            <summary>
            </summary>
            <param name="batching">Ignored by this instrument type.
            For this instrument type, a "batched connection" is <b>always</b> established,
            at a 9600 baud rate.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.turnOnSensors(System.Boolean,System.Boolean)">
            <summary>
            For this instrument type, this method does absolutely nothing;
            i.e. it immediately returns when called.
            </summary>
            <param name="on">This parameter is ignored for this instrument type.</param>
            <param name="wait">This parameter is ignored for this instrument type.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isWarmingUp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.shutdown">
            <summary>
            Note that for GBPlus, this routine does nothing - GBPlus instrument cannot be turned off.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.saveInstrumentSettings">
            <summary>
            This function should be called after changing any of an instrument's settings, in order
            to tell the instrument to save the modified settings to its flash memory.
            </summary>
            <remarks>
            For this instrument type, this method doesn't do anything, since the instrument automatically
            saves any changed settings to flash when it is undocked.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSoftwareVersion">
            <summary>
            Retrieves the instrument software version.
            </summary>
            <returns>Formatted software version.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBootloaderVersion">
            <summary>
            Retrieves the instrument's bootloader version.
            </summary>
            <returns>Always returns an empty string for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getHardwareVersion">
            <summary>
            Retrieves the instrument hardware version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMfgDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSetupDate">
            <summary>
            Retrieves the instrument's set-up date as mmddyy.
            </summary>
            <returns>Setup date</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSetupTech">
            <summary>
            Retrieves the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSecurityCode">
            <summary>
            Retrieves the instrument's security code (Access Code).
            </summary>
            <returns>Access code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSecurityCode(System.String)">
            <summary>
            Sets the instrument's security code (Access Code).
            </summary>
            <param name="code">Access code.  If null or empty, then DefaultSecurityCode is used.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isInstrumentConfigured">
            <summary>
            ?
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.beginInstrumentZeroing">
            <summary>
            Begin zeroing of instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.endInstrumentZeroing">
            <summary>
            End Zering of instrument
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isInstrumentZeroing">
            <summary>
            Indicates if instrument currently undergoing zeroing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isSensorZeroing(System.Int32)">
            <summary>
            Indicates if specified sensor is currently zeroing.
            </summary>
            <remarks>
            Since this instrument type only has one sensor,
            calling this method is the same as calling isInstrumentZeroing.
            </remarks>
            <param name="sensorPos">Ignored for this instrument type.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorZeroingStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last zeroing operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by GBPlus since instrument only has 1 sensor</param>
            <returns>True if last zeroing passed.  False if last zeroing Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.pauseSensor(System.Int32,System.Boolean)">
            <summary>
            Pause/unpause the specified sensor.
            When paused, sensor does not read gas.
            NOTE: for this instrument, this method does nothing 
            since instrument does not support pausing of sensors.
            </summary>
            <param name="sensorPos"></param>
            <param name="paused"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.enableSensor(System.Int32,System.Boolean)">
            <summary>
            Enables/disables a sensor.
            </summary>
            <remarks>
            This method does nothing for this instrument type
            since the instrument does not support enabling/disabling of 
            sensors. They are always enabled.
            </remarks>
            <param name="sensorPos"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isSensorEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true. Sensors in this instrument type cannot be
            enabled or disabled; they're always enabled</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.beginInstrumentBump">
            <summary>
            Called prior to performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            This method does nothing for this instrument type.
            </summary>
            <remarks>
            For this instrument type, if the firwmare version is 2.20 or newer,
            then this method puts the instrument into bump mode.
            Otherwise, this method does nothing.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.endInstrumentBump">
            <summary>
            Called after performing an instrument bump test.
            If anything needs done prior to bump testing an
            instrument, it should be done here.
            This method does nothing for this instrument type.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.beginInstrumentCalibration">
            <summary>
            Intended to put instrument into calibration mode.
            This method does nothing for this instrument type.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.beginSensorCalibration(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Begin calibration on specified sensor.
            </summary>
            <param name="sensorPositions">Ignored by this instrument type since instrument only has 1 sensor.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.endSensorCalibration(System.Int32)">
            <summary>
            End calibration on specified sensor.  Requires that 
            beginCalibration be called previously to put
            instrument/sensor into calibration mode.
            </summary>
            <param name="sensorPos">Sensor currently calibrating.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.endInstrumentCalibration">
            <summary>
            Intended to End/abort calibration mode on instrument.
            This method does nothing for this instrument type.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isSensorCalibrating(System.Int32)">
            <summary>
            Indicates if specified sensor is currently calibrating.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by this instrument type since instrument only has 1 sensor</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCalibrationStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last calibration operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.
            Ignored by GBPlus since instrument only has 1 sensor</param>
            <returns>True if last calibration passed.  False if last calibration Failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorBumpStatus(System.Int32)">
            <summary>
            Indicates pass/fail of last bump test operating on specified sensor.
            </summary>
            <param name="sensorPos">Sensor to query status on.</param>
            <returns>True if last bump test passed.  False if last bump test failed.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTotalAlarmTime">
            <summary>
            Returns the total amount of time this instrument has been in an alarm state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventPeak">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventHiAlarm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventLoAlarm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventSensorSerialNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventGasType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getEventDuration">
            <summary>
            Returns how long the event lasted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setBackLightOption(ISC.Instrument.TypeDefinition.BackLightOption)">
            <summary>
            
            </summary>
            <param name="inBLO"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.
            since backlight option may be looked at with 'get', but not changed with 'set'.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBacklightOption">
            <summary>
            Returns this instrument's current backlight configuraiton option
            </summary>
            <returns>Always returns 'Timed' for this instrument.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setCalibrationInterval(System.Int16)">
            <summary>
            Set the Calibration Interval.  Not supported by GBPlus.
            </summary>
            <param name="interval"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting. Not supported by GBPlus.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBumpInterval">
            <summary>
            Return the Bump Interval for the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setBumpInterval(System.Double)">
            <summary>
            Set the Bump Interval for the instrument.
            </summary>
            <param name="interval">Number of days</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTemperature">
            <summary>
            Returns the the current temperature reading.
            </summary>
            <returns>Value is in degrees celsius; e.g. 21.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMinTemperature">
            <summary>
            Get minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMaxTemperature">
            <summary>
            Get maxiumum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            FOR USE BY FACTORY SOFTWARE ONLY!
            </summary>
            NOTE: This routine is NOT implementing any abstract method defined
            in InstrumentDriver abstract class and is here only for convenience
            of factory software.
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getCalTimeoutSeconds(System.Int32)">
            <summary>
            Get Calibration timeout for specified sensor
            </summary>
            <param name="sensorPos">The position of the sensor to check.</param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorType(System.Int32)">
            <summary>
            Return 'type' of sensor.  i.e., toxic, combustible, etc.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorGasCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorGasReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getPeakReading(System.Int32)">
            <summary>
            Returns a sensor's peak reading
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorHighReading(System.Int32)">
            <summary>
            Get the Sensor Hi Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorHighReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorLowReading(System.Int32)">
            <summary>
            Get the Sensor Low Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorLowReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorAlarmGasAlert(System.Int32)">
            <summary>
            Returns a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Gas Alert alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorAlarmGasAlert(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Gas Alert alarm threshold setting, used for alert message and/or warning.
            </summary>
            <remarks>
            This is an alert for the user at a gas level that is lower than the low alarm.
            </remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Gas Alert alarm. Must not exceed the low alarm threshold.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorAlarmLow(System.Int32)">
            <summary>
            Returns a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's Low alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorAlarmLow(System.Int32,System.Double)">
            <summary>
            Sets a sensor's Low alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The current threshold for the sensor's Low alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorAlarmHi(System.Int32)">
            <summary>
            Returns a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's High alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorAlarmHi(System.Int32,System.Double)">
            <summary>
            Sets a sensor's High alarm threshold setting.
            </summary>
            <param name="sensorPos">The sensor's position.</param>
            <param name="threshold">The threshold for the sensor's High alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getLastBumpTime(System.Int32)">
            <summary>
            
            </summary>
            <remarks>Supported in 2.00 and later.</remarks>
            <param name="sensorPos"></param>
            <returns>This method returns DateTime.MinValue if the instrument is older than v2.00.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getZeroLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensitivityHiLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensitivityLoLimit(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorSensitivity(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorLowEventThreshold(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorHiEventThreshold(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's serial number.
            </summary>
            <param name="sensorPos">Ignored by GBPlus</param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters.  NULL is returned if instrument's firmware doesn't support 'module part number' field.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorRawSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's raw serial number (if available).
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters.  Sensor serial number is returned if instrument's firmware doesn't support 'module part number' field.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorBaseline(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorSpanReserve(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorPartNumber(System.Int32)">
            <summary>
            Retrieves the sensor part number.
            </summary>
            <param name="sensorPos">Sensor position.  Ignored by GbPlusRegisters.</param>
            <returns>Sensor part number. Max of 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTemperatureCompensation(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="tableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorPreviousOverrange(System.Int32)">
            <summary>
            Gets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorPreviousOverrange(System.Int32,System.Boolean)">
            <summary>
            Sets the sensor previous overrange flag
            </summary>
            <param name="sensorPos"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getDeadbandValue(System.Int32)">
            <summary>
            Retrieves the sensor dead band value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getFilterAlgorithm(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getFilterLevel(System.Int32)">
            <summary>
            Retrieves the sensor filtering magnitude value setting.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getFilterBand(System.Int32)">
            <summary>
            Returns the value representing the abolute value of display counts within which
            filtering will take place.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMeasurementRange(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getInstrumentSerialNumber">
            <summary>
            Returns the instrument's serial number
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getInstrumentPartNumber">
            <summary>
            Returns the instrument's part number.\
            </summary>
            <returns>Up to 16 chars</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getJobNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMfgLocation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getLeftLedCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getRightLedCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSpeakerCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMotorCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBacklightCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCalGasString(System.Int32)">
            <summary>
            For GBPlus, the cal gas type and gas type are the same,
            since there is no PID or LEL possible
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCalGasConcentration(System.Int32)">
            <summary>
            Retrieves the sensor calibration gas concentration value.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas concentration for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isSensorCalGasConcConfigurable(System.Int32)">
            <summary>
            Indicates whether or not it's safe to call setSensorCalGasConcentration for
            the instrument.
            </summary>
            <param name="sensorPos"></param>
            <returns>Always returns true for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorCalGasConcentration(System.Int32,System.Double)">
            <summary>
            Set a sensor's calibration gas concentration.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="concentration">The concentration.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getIrTxCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getRxCount">
            <summary>
            Returns number of bytes this instrument has received.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getButtonPressCount">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getInstrumentErrors">
            <summary>
            Returns the errors that the instrument has logged.
            </summary>
            <returns>
            The GasBadge Plus is only capable of reporting its current error state. It does not
            keep a running log of errors that have occurred in the past.
            <para>
            Therefor, if the instrument is currently in an error state, then this method will return 
            an array containing a single InstrumentError instance that reprepresents that error.
            </para>
            Otherwise, this method will return an empty array.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.clearInstrumentErrors">
            <summary>
            Clear any instrument errors that stored on the instrument.
            <remarks>
             For the GasBadge Plus, this call will do nothing -
            Gas Badge Plus instruments does not have an error log to clear.
            </remarks>
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>BatteryVoltage</item>
            <item>InstAlarmSeconds</item>
            <item>InstLifeRemaining</item>
            <item>InstOperationSeconds</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getResetCount">
            <summary>
            Returns the number of times that an instrument has reset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTime">
            <summary>
            Get the instrument's current time (year, month, day, hour, seconds)
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setTime(System.DateTime)">
            <summary>
            Set instrument's current time ( year, month, day, hour, secomds)
            to the time as specified in passed-in 'newTime'
            </summary>
            <param name="newTime"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval (seconds).
            </summary>
            <returns>Just returns a zero. There is no datalogging in GbPlusRegisters.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting.
            </summary>
            <returns>Hours</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting.
            </summary>
            <param name="timeBaseHours"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getActiveCompany">
            <summary>
            Get the instrument's active company.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setActiveCompany(System.String)">
            <summary>
            Set the instrument's active company.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setCompanyMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <param name="messages"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getCompanyMessage">
            <summary>
            Changes the instrument's current "company message".
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getUsers">
            <summary>
            Gets the instruments list of users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setUsers(System.String[])">
            <summary>
            Sets the instruments list of users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSites">
            <summary>
            Gets the instruments list of sites.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSites(System.String[])">
            <summary>
            sets the instruments list of sites.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getConfigurationVersion">
            <summary>
            Returns a version number for the set of config info
            programmed into instrument at the factory.
            </summary>
            <returns>Config Version</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatteryType">
            <summary>
            GBPlus only supports 1 kind of battery
            </summary>
            <returns>"1/2 AA 3.6V Lithium Cell"</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatteryVoltage">
            <summary>
            Returns the battery's last known voltage.
            </summary>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatterySerialNumber">
            <summary>
            Retrieve the instrument battery pack serial number.
            </summary>
            <returns>Empty string. GBPlus batteries have no serial number.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatteryPartNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatteryManufacturer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatterySetupTech">
            <summary>
            Returns the setup tech's initials.
            </summary>
            <param name="setupTech">Returns empty string. Not supported by this instrument</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatterySetupDate">
            <summary>
            Returns the time that this battery pack was setup.
            </summary>
            <param name="setupTech">Returns DateTime.MinValue. Not supported by this instrument</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatterySoftwareVersion">
            <summary>
            Returns the battery pack's software version.
            </summary>
            <returns>Returns empty string. Not supported by this instrument</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBatteryRunTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorConfigVersion(System.Int32)">
            <summary>
            Returns a version string representing the set of config info
            programmed into sensor at the factory.
            
            Not supported for the GBPlus, so simply return 0.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorHardwareVersion(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorPositions">
            <summary>
            Return an array containing the populated sensor positions
            </summary>
            <returns>
            Returns an array of values representing which positions
            sensors are installed at.  e.g., if instrument has sensors installed
            at positions 1 and 3, then the returned array will contain two elements: 1 and 3.
            
            If instrument has no installed sensors, then an empty array will be returned
            (not null!)
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorManufacturer(System.Int32)">
            <summary>
            Retrieves the sensor manufacturer.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Sensor manufacturer</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorSetupDate(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorMeasurementType(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorPreconditionTime(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Value is in Seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Value is in ml/Minute</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns>Value is in ml/Minute</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns>Value is in ml/Minute</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <remarks>NOTE: No STEL in GBPlus</remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <remarks>NOTE: No STEL in GBPlus</remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="alarm"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold setting.
            </summary>
            <remarks>NOTE: No TWA in GBPlus</remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <remarks>NOTE: No TWA in GBPlus</remarks>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="alarm"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if a sensor should have TWA and STEL calculated.
            </summary>
            <param name="sensorPos">Ignored for this instrument type.</param>
            <returns>False. STEL not supported by GBPlus</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if a sensor should have TWA and STEL calculated.
            </summary>
            <param name="sensorPos">Ignored for this instrument type.</param>
            <returns>False. TWA not supported by GBPlus</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getTwaReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getStelReading(System.Int32)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Always throws a <see cref="T:System.NotSupportedException"/> for this instrument type.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Always throws a <see cref="T:System.NotSupportedException"/> for this instrument type.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getHygiene">
            <summary>
            This method will download hygiene (both old and new sessions)
            from the instrument and return it as an ArrayList of
            hygiene sessions.
            </summary>
            <returns>ArrayList of DriverInstrumentDatalogSession objects</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.clearHygiene">
            <summary>
            Clear new hygiene data from instrument
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getAlarmEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getServiceEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.GetEvents(System.UInt16)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Set instrument's language.
            For GBPlus, this means we need to set all the print strings
            to their lang-specific values.
            </summary>
            <param name="languageId">LanguageId enum</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getLanguage">
            <summary>
            Return language code that instrument is configured for.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getFavoritePidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setFavoritePidFactors(System.String[])">
            <summary>
            </summary>
            <param name="pidFactors"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getCustomPidFactors">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setCustomPidFactors(ISC.Instrument.Driver.CustomResponseFactor[])">
            <summary>
            </summary>
            <param name="customFactors"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getProfiles">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getFactoryProfile">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setProfiles(ISC.Instrument.Driver.InstrumentProfile[])">
            <summary>
            
            </summary>
            <param name="profiles"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBumpThreshold">
            <summary>
            Indicates what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setBumpThreshold(System.Int32)">
            <summary>
            Specifies what gas reading (% of concentration) that instrument needs to
            see in order for a bump test to pass. 
            </summary>
            <param name="threshold"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBumpTimeoutSeconds">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="threshold"></param>
            <returns>This instrument type only suppprts "bump timeout" in
            v2.0 and later.  Will return -1 to indicate if instrument version
            earlier than v2.0.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setBumpTimeoutSeconds(System.Int32)">
            <summary>
            Specifies the maxiumum amount of time a bump test can
            last before it times out and fails. 
            </summary>
            <param name="seconds">
            <para>
            Value must be between MinBumpTimeout and MaxBumpTimeout.
            Otherwise, specified value will be auto-adjusted to the correct value (either MaxBumpTimeout or MaxBumpTimeout).
            </para>
            <para>This instrument type only suppprts "bump timeout" in
            v2.0 and later.  Will do nothing if instrument version
            earlier than v2.0.
            </para>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.enablePump(System.Boolean)">
            <summary>
            Turn this instrument's pump on or off.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isAccessoryPumpInstalled">
            <summary>
            Indicates if this instrument's pump is currently attached 
            to the instrument.
            </summary>
            <returns>Always returns false for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getChargePhase">
            <summary>
            
            </summary>
            <returns>Always returns <see cref="F:ISC.Instrument.Driver.ChargePhase.ChargeOff"/> for this instrument type.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getGasType(System.Int32)">
            <summary>
            For use by factory software only!
            </summary>
            This is for convenience of factory software only.  It does not
            implement any abstract method of the abstract InstrumentDriver class.
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setSensorBumpFault(System.Int32,System.Boolean)">
            <summary>
            Sets a Bump Fault flag on the specified sensor.
            </summary>
            <param name="position"></param>
            <param name="open"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>True if instrument is resetting; else false.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setPeakReading(System.Int32,System.Double)">
            <summary>
            Sets the instrument's peak reading.
            Note:  Sensor's Resolution must be set before calling this.
            </summary>
            <param name="sensorPos"></param>
            <param name="peak"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getInstrumentPumpStatus">
            <summary>
            Gets the instrument pump status
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getSystemAlarmErrorCode">
            <summary>
            Gets the instrument current error code
            </summary>
            <returns>Instrument's current error code</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBacklightTimeout">
            <summary>
            Gets the instrument backlight timeout
            </summary>
            <returns>Timeout in seconds</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setBacklightTimeout(System.Int32)">
            <summary>
            Sets the instrument backlight timeout
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBluetoothMacAddress">
            <summary>
            Returns the Bluetooth module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessMacAddress">
            <summary>
            Returns the wireless module's MAC address.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessSoftwareVersion">
            <summary>
            Returns the wireless module's software version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessHardwareVersion">
            <summary>
            Returns the wireless module's hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessRadioHardwareVersion">
            <summary>
            Returns the Whisper radio hardware version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessOsVersion">
            <summary>
            Returns the wireless module's OS version.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessStatus">
            <summary>
            Returns the wireless module's current status.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessAlarmMask">
            <summary>
            Returns the wireless module's alarm mask
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessCustomEncryptionKey(System.String)">
            <summary>
            Sets a custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessCustomEncryptionKey"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessCustomEncryptionKey">
            <summary>
            Returns the custom encryption key for the wireless network.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessCustomEncryptionKey(System.String)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessTransmissionInterval">
            <summary>
            Returns the wireless module's transmission interval.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessTransmissionInterval(System.Int32)">
            <summary>
            Changes the wireless module's transmission interval.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessMessageHops(System.Int32)">
            <summary>
            Sets the number of hops a wireless message can take in a given network.
            </summary>
            <param name="hops"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessMessageHops"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessMessageHops">
            <summary>
            Gets the number of hops a wireless message can take in a given network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessMessageHops(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessMaximumPeers(System.Int32)">
            <summary>
            Set the maxiumum number of peers allowed in a wireless network.
            </summary>
            <param name="peers"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessMaximumPeers"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessMaximumPeers">
            <summary>
            Returns the maxiumum number of peers allowed in a wireless network.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessMaximumPeers(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessPrimaryChannel(System.Int32)">
            <summary>
            Set the wireless primary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessPrimaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessPrimaryChannel">
            <summary>
            Returns the wireless primary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessPrimaryChannel(System.Int32)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessSecondaryChannel(System.UInt16)">
            <summary>
            Set the wireless secondary channel.
            </summary>
            <param name="channel"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessSecondaryChannel"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessSecondaryChannel">
            <summary>
            Returns the wireless secondary channel.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessSecondaryChannel(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessActiveChannelMask(System.UInt16)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessActiveChannelMask"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessActiveChannelMask(System.UInt16)">
            <summary>
            Sets mask to specify which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <param name="mask"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessActiveChannelMask">
            <summary>
            Returns a mask specifying which active channels are allowed or not allowed to be used
            in active wireless frequency hopping. This is also referred to as 'blacklisted' channels.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessListeningPostChannelMask(System.UInt16)">
            <summary>
            Sets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessListeningPostChannelMask"/>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessListeningPostChannelMask">
            <summary>
            Gets bit mask for channels that are used (1) / not used (0) by the Morrison Listening Post.
            This is also referred to as 'gateway channels'.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessPeerLostThreshold(System.Int32)">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessPeerLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessPeerLostThreshold">
            <summary>
            If a message is not received from one or more active peer instrument(s) in this time,
            a Peer Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Teammate Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessPeerLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessNetworkLostThreshold(System.Int32)">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessNetworkLostThreshold"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessNetworkLostThreshold">
            <summary>
            If a message is not received from any active peer instrument in this time
            (indicating the local instrument has become isolated from its network),
            a Network Lost alarm will be generated. 
            </summary>
            <remarks>This is also known as "Network Lost."</remarks>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessNetworkLostThreshold(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessReadingsDeadband(System.Int32)">
            <summary>
            Sets the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <param name="percentage"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessReadingsDeadband"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessReadingsDeadband">
            <summary>
            Returns the percentage of the low alarm that the sensors have to be greater than to send the verbose message.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessReadingsDeadband(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessFeatures(System.UInt16)">
            <summary>
            Allows caller to set/clear various bits in the Synapse wireless module enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <param name="bits">The bits to set.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessFeatures"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessFeatures">
            <summary>
            Bits settable in the Synapse wireless module for specific enabling/disabling of features - ID11 in Snap Reference Manual.
            </summary>
            <returns>The bits that are currently set.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessFeatures(System.UInt16)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessNetworkDisconnectDelay">
            <summary>
            Returns the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <returns>Number of minutes.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessNetworkDisconnectDelay(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessNetworkDisconnectDelay(System.Int32)">
            <summary>
            Sets the timeout (in minutes) after network lost detection is initiated that the instrument disconnects from the network.
            </summary>
            <param name="delay">Number of minutes.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessNetworkDisconnectDelay"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBluetoothSoftwareVersion">
            <summary>
            Returns bluetooth software version number.
            </summary>
            <returns>The bluetooth software version and build number</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessBindingTimeout">
            <summary>
            Returns the timeout in seconds the whisper script fails binding.
            </summary>
            <returns>The wireless binding timeout in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessBindingTimeout(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setWirelessBindingTimeout(System.Int32)">
            <summary>
            Sets the wireless binding timeout in seconds.
            </summary>
            <param name="timeout">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getWirelessBindingTimeout"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getBluetoothLoneWorkerOkMessageInterval">
            <summary>
            Returns the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <returns>Returns the lone worker ok message time.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setBluetoothLoneWorkerOkMessageInterval(System.Int32)">
            <summary>
            Sets the lone worker ok message time (Time between the transmission of 'I'm OK' message) in seconds.
            </summary>
            <param name="interval">Number of seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getBluetoothLoneWorkerOkMessageInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isWirelessFeatureEnabled">
            <summary>
            Returns whether the instrument's wireless feature is enabled or not (i.e. unlocked/locked).
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <returns>True if wireless features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.enableWirelessFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.enableWirelessFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's wireless feature.
            </summary>
            <remarks>
            The wireless feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the wireless hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasWirelessFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the wireless features. False to lock/disable the wireless features.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.isWirelessFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isBluetoothFeatureEnabled">
            <summary>
            Returns whether the instrument's bluetooth feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if bluetooth features are unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.enableBluetoothFeature(System.Boolean)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.enableBluetoothFeature(System.Boolean)">
            <summary>
            Enables or disables the instrument's bluetooth feature.
            </summary>
            <remarks>
            The bluetooth feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the bluetooth features. False to lock/disable the bluetooth features.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.isiNetNowFeatureEnabled">
            <summary>
            Returns whether the iNet Now feature is enabled or not(i.e. unlocked or locked).
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <returns>True if iNet Now feature is unlocked/enabled. False if locked/disabled.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.enableiNetNowFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.isBluetoothFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.enableBluetoothFeature(System.Boolean)"/>        
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.enableiNetNowFeature(System.Boolean)">
            <summary>
            Enables or disables the iNet Now feature.
            </summary>
            <remarks>
            The iNet Now feature can be disabled/locked. This makes the feature's existence transparent
            to the user so that the bluetooth hardware can be installed but not accessible to the UI or Modbus.
            Ideally this should be called only if the HasBluetoothFeature returns true.
            </remarks>
            <param name="enabled">True to unlock/enable the iNet Now features. False to lock/disable the iNet Now features.</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.isiNetNowFeatureEnabled"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.enableBluetoothFeature(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.isBluetoothFeatureEnabled"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])">
            <summary>
            Sets the various text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getAlarmActionMessages">
            <summary>
            Returns the text messages that the instrument displays for each of its sensor's Alert, Low, High, STEL and TWA alarms.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getOomWarningInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setOomWarningInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM Warning is initiated.
            </summary>
            <param name="interval">Value is in seconds.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getDockInterval">
            <summary>
            Returns the instrument's current "dock interval" setting.
            </summary>
            <returns>Number of days.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setDockInterval(System.Int32)">
            <summary>
            Changes the instrument's current "docki interval" setting.
            </summary>
            <param name="interval">Number of days.</param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getMaintenanceIndicatorInterval">
            <summary>
            Returns the instrument's current Maintenance Indicator Interval
            </summary>
            <returns>Interval in minutes</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setMaintenanceIndicatorInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setMaintenanceIndicatorInterval(System.Int32)">
            <summary>
            Sets the instrument's Maintenance Indicator Interval
            </summary>
            <param name="interval">Interval in minutes</param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getMaintenanceIndicatorInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.getGpsReadingInterval">
            <summary>
            Returns the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.setGpsReadingInterval(System.Int32)"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusDriver.setGpsReadingInterval(System.Int32)">
            <summary>
            Sets the instrument's GPS reading interval. i.e., how often the instrument polls the satellite for a reading.
            </summary>
            <param name="interval"></param>
            <seealso cref="M:ISC.Instrument.Driver.GbPlusDriver.getGpsReadingInterval"/>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusDriver.TemperatureCompensationTableSize">
            <summary>
            Returns number of Temperature Compensation values for this instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.InitInstrumentOptions">
            <summary>
            Initialize the instrument options cache.  Helper method for Init().
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setPortSpeed(System.Int32)">
            <summary>
            Sets the baud rate to be used for communicating with the instrument.
            </summary>
            <param name="baudRate">Only 9600 or 115200 is allowed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If an illegal baud rate is specified.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getMfgDate">
            <summary>
            Gets the instrument's MFG date and time.
            </summary>
            <returns>MFG date and time</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSetupDate">
            <summary>
            Gets the instrument's MFG date and time.
            </summary>
            <returns>MFG date and time</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getInstrumentDiagnostics">
            <summary>
            Executes and returns the results of a series of instrument diagnostics tests.
            </summary>
            <returns>
            An array of <see cref="T:ISC.Instrument.Driver.InstrumentDiagnostic"></see> objects.
            <para>
            For this instrument type, the returned diagnostics have
            the following <see cref="T:ISC.Instrument.Driver.InstrumentDiagnosticCode">Codes</see>...
            </para>
            <list type="bullet">
            <item>BatteryStatus</item>
            <item>BatteryVoltage</item>
            <item>SpeakerVoltage</item>
            <item>VibratingAlarmVoltage</item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getInstrumentErrors">
            <summary>
            Returns the errors that have occurred on the instrument in the past that the instrument has logged.
            </summary>
            <returns>
            For this instrument type, the maximum size of the returned array is 30.
            An empty array is returned if the instrument has no logged errors.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.clearInstrumentErrors">
            <summary>
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCode(System.Int32)">
            <summary>
            Retrieves the sensor code for a specified sensor.  Form is "Sxxx"
            where 'x' is digits 0 or greater. e.g. "S0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Standardized sensor code.  An empty string is returned if
            no sensor is installed for the specified position</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCalStatus(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCalgasRatio(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorFactors(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorConfigVersion(System.Int32)">
            <summary>
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorSTELEnabled(System.Int32)">
            <summary>
            Indicates if a sensor should have STEL calculated.
            </summary>
            <param name="sensorPos">Ignored for this instrument type.</param>
            <returns>false for Oxygen and Hydrogen.  Otherwise, true is returned..</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbProDriver.getSensorTWAEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorTWAEnabled(System.Int32)">
            <summary>
            Indicates if a sensor should have TWA calculated.
            </summary>
            <param name="sensorPos">Ignored for this instrument type.</param>
            <returns>false for Oxygen and Hydrogen.  Otherwise, true is returned.</returns>
            <seealso cref="M:ISC.Instrument.Driver.GbProDriver.getSensorSTELEnabled(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorAlarmSTEL(System.Int32)">
            <summary>
            Returns a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's STEL alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setSensorAlarmSTEL(System.Int32,System.Double)">
            <summary>
            Sets a sensor's STEL alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's STEL alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorAlarmTWA(System.Int32)">
            <summary>
            Returns a sensor's TWA alarm threshold.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <returns>The current threshold for the sensor's TWA alarm.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setSensorAlarmTWA(System.Int32,System.Double)">
            <summary>
            Sets a sensor's TWA alarm threshold setting.
            </summary>
            <param name="sensorPos">The position of the sensor.</param>
            <param name="threshold">The threshold for the sensor's TWA alarm.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.connect(System.Boolean)">
            <summary>
            </summary>
            <param name="batching">If true is specified, then this method will initiate a "batch connection".
            <para>If false is specified, then non-batched connection is performed.</para>
            <note>It's recommended to use baud rate of 9600 for non-batched connections.</note>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.PowerOnInstrument">
            <summary>
            Helper function for PingInstrument().  Blasts instrument with IrDA packets
            to get its attention then issues it with a PowerUp command to turn it on.
            </summary>
            <returns>true if instrument turned itself on.  false if we time out trying
            to turn it on</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.TalkWithInstrument">
            <summary>
            Helper function for PingInstrument().  When initially turned on,
            instrument is at first unable to talk. Wait for instrument to start talking.
            We do this by continually asking it for it's instrument type until it
            starts responding.
            </summary>
            <returns>true if instrument started talking to us; false if we
            timeout waiting for instrument to talk.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.WarmupInstrument">
            <summary>
            Helper method for PingInstrument.  Waits for the instrument to warm up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.shutdown">
            <summary>
            Turns off the instrument.
            Any communication port, etc. being used to communicate with the instrument are
            (intended to be ) left open.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getActiveUser">
            <summary>
            Get the instrument's active user.
            </summary>
            <returns>Active user.
            Empty string if there is no active user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setActiveUser(System.String)">
            <summary>
            Get the instrument's active user.
            </summary>
            <param name="user">Empty string is passed to clear out active user.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getActiveSite">
            <summary>
            Get the instrument's active site.
            </summary>
            <returns>Active site.
            Empty string if there is no active site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setActiveSite(System.String)">
            <summary>
            Set the instrument's active site.
            </summary>
            <param name="site">Empty string is passed to clear out active site.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getTime">
            <summary>
            Get the instrument's current time (year, month, day, hour, seconds)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setTime(System.DateTime)">
            <summary>
            Set instrument's current time ( year, month, day, hour, secomds)
            to the time as specified in passed-in 'newTime'
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getLastCalibrationTime(System.Int32)">
            <summary>
            Gets the instrument's last calibration date/time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getLastBumpTime(System.Int32)">
            <summary>
            
            </summary>
            <remarks>Supported in 2.00 and later.</remarks>
            <param name="sensorPos"></param>
            <returns>This method returns DateTime.MinValue if the instrument is older than v2.00.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setLanguage(ISC.Instrument.TypeDefinition.LanguageId)">
            <summary>
            Set instrument's language.
            For GBPro, this means we need to set all the print strings
            to their lang-specific values.
            </summary>
            <param name="languageId">LanguageId enum</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getTotalRunTime">
            <summary>
            Returns the amount of time this instrument has been in operation.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getGasOperations">
            <summary>
            Gets the manual bump/calibration log from the instrument
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.clearGasOperations">
            <summary>
            Clears the manual bump/calibration log from instrument
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.GetDatalogFrame(System.UInt16,ISC.Instrument.Driver.Resolution,ISC.Instrument.Driver.DriverInstrumentSensorReading[]@)">
            <summary>
            Return a frame of datalog records.  Each datalog record consists of a gas reading,
            a temperature, and an instrument status.  The data records will be packed into a
            record 'frame' by the instrument.  These record frames will hold multiple data records
            as described by the DatalogDescriptor class.
            </summary>
            <returns></returns>
            <param name="frameNumber"></param>
            <param name="resolution"></param>
            <param name="datalogRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getHygiene">
            <summary>
            A datalog session is described by multiple datalog headers.  The session table
            is a compilation of the header data for the session.  The actual datalog data is 
            not yet attached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.DeflateHygieneRatings(System.Collections.ArrayList,ISC.Instrument.Driver.DriverInstrumentSensorReading[],System.Int32)">
            <summary>
            
            </summary>
            <param name="deflatedReadings">Contains compressed readings accumulated so far</param>
            <param name="rawReadings">A new batch of uncompressed readings downloaded from the instrument.</param>
            <param name="rawReadingsCount">???</param>
            <returns>Number of readings passed in RawReadings array was deflated down to.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.BuildDatalogHeaderTable(System.Collections.ArrayList@)">
            <summary>
            Return all datalog headers in the instrument.  The datalog header is similar to 
            the period header of previous instruments. A session will consist of one or more 
            datalog headers.
            
            The datalog header table is downloaded independently of the actual datalog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getRecordingInterval">
            <summary>
            Get the datalogging recording interval.
            </summary>
            <returns>Seconds</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setRecordingInterval(System.Int32)">
            <summary>
            Set the datalogging recording interval.
            </summary>
            <param name="intervalSeconds">Seconds</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getTWATimeBase">
            <summary>
            Retrieves the instrument's current TWA Time Base setting
            for TWA calculations.
            </summary>
            <returns>Time base setting (in hours)</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setTWATimeBase(System.Int32)">
            <summary>
            Sets the instrument's TWA Time Base setting used for TWA calculations
            </summary>
            <param name="timeBaseHours">Time base setting (in hours)</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.clearHygiene">
            <summary>
            Clears the datalog.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.ExpungeDatalog">
            <summary>
            Erases the datalog memory
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.ReadCalibrationSettings">
            <summary>
            Read and return Calibration Settings register
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.WriteCalibrationSettings(System.UInt16)">
            <summary>
            Write specified settings to Calibration Settings register
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getCalibrationInterval">
            <summary>
            Returns the instrument's current calibration interval setting.
            </summary>
            <returns>Number of days.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setCalibrationInterval(System.Int16)">
            <summary>
            Changes the instrument's current calibration interval setting.
            </summary>
            <param name="interval">Number of days.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCalGasString(System.Int32)">
            <summary>
            Calgas string is displayed on the instrument during calibration.
            </summary>		
            <returns>Sensor string. Max of 4 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCalGasCode(System.Int32)">
            <summary>
            Retrieves the sensor's calibration gas code. Format is "Gxxxx" 
            where 'x' is digits 0 or greater. e.g. "G0021"
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Calibration gas code for the specific sensor</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setSensorCalGasCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's calibration gas code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Gxxxx" where 'x' is digits 0 or greater. e.g. "G0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCalibrationReading(System.Int32)">
            <summary>
            Get the in-progress span reserve reading during calibration
            </summary>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getTwaReading(System.Int32)">
            <summary>
            Get the TWA Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getStelReading(System.Int32)">
            <summary>
            Get the STEL Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorMaxTemperature(System.Int32)">
            <summary>
            Returns the maximum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorMinTemperature(System.Int32)">
            <summary>
            Returns the minimum temperature to which the sensor has been exposed.
            </summary>
            <param name="sensorPos">Sensor position.</param>
            <returns>Temperature.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorManufacturer(System.Int32)">
            <summary>
            Retrieves the sensor manufacturer.
            </summary>
            <param name="sensorPos">Sensor position</param>
            <returns>Sensor manufacturer</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getConfigurationVersion">
            <summary>
            Get the Instrument Configuration Map Version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getVibratorVoltage">
            <summary>
            Get the Vibrator Voltage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getCalMethod(System.Int32)">
            <summary>
            Get the Calibration Method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getNumberPassedSensorCals(System.Int32)">
            <summary>
            Get the number of passed sensor calibrations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getNumberFailedSensorCals(System.Int32)">
            <summary>
            Get the number of failed sensor calibrations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorHighReading(System.Int32)">
            <summary>
            Get the Sensor Hi Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setSensorHighReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorLowReading(System.Int32)">
            <summary>
            Get the Sensor Low Reading.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setSensorLowReading(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="sensorPos"></param>
            <param name="reading"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.isInstrumentIscProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorHardwareVersion(System.Int32)">
            <summary>
            Get the Sensor Hardware Version.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorSetupTech(System.Int32)">
            <summary>
            Retrieves the Sensor set-up technician's initials.
            </summary>
            <param name="sensorPos"></param>
            <returns>Setup tech</returns>
            TODO - this getSensorSetupTech should be added as abstract in InstrumentDriver class. - JMP, 10/2/2009
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorMfgTime(System.Int32)">
            <summary>
            Gets the sensors Manufactur time.
            </summary>
            <remarks>who uses this?  internal software?</remarks>
            <param name="sensorPos"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorSetupDate(System.Int32)">
            <summary>
            Gets the sensors setup date.
            </summary>
            <param name="sensorPos"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorInstallationTime(System.Int32)">
            <summary>
            Gets the sensors installation time.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorPreconditionTime(System.Int32)">
            <summary>
            Get the Precondition Time for docking station.
            </summary>
            <returns>
            Number of seconds.
            Zero is returned if sensor should not be preconditioned.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorPreconditionFlowrate(System.Int32)">
            <summary>
            Get the Precondition Flow Rate.
            </summary>
            <returns>ml/min</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorCalibrationFlowrate(System.Int32)">
            <summary>
            Get the Calibration Flow Rate for docking station.
            </summary>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorBumpFlowrate(System.Int32)">
            <summary>
            Get the Bump Flow Rate.
            </summary>
            <returns>ml/min.  Zero is returned if sensor should not be calibrated by docking station</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getHygieneSessionCount">
            <summary>
            Returns the number of recorded datalog sessions currently stored on the instrument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.SelectHeader(System.Int32)">
            <summary>
            Select Header
            </summary>		
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setOperatingMode(ISC.Instrument.Driver.OperatingMode)">
            <summary>
            FOR USE BY FACTORY SOFTWARE ONLY!
            </summary>
            <remarks>
            NOTE: This routine is NOT implementing any abstract method defined
            in InstrumentDriver abstract class and is here only for convenience
            of factory software.
            </remarks>
            <param name="operatingMode"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorString(System.Int32)">
            <summary>
            Retrieves the sensor string.
            This string is displayed on the instrument.
            </summary>		
            <returns>Sensor string. Max of 4 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorName(System.Int32)">
            <summary>
            Retrieves the sensor name.		
            </summary>		
            <returns>Sensor string. Max of 24 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorModulePartNumber(System.Int32)">
            <summary>
            Returns a sensor module's part number.
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getSensorRawSerialNumber(System.Int32)">
            <summary>
            Returns a sensor's raw serial number (if available).
            </summary>
            <param name="sensorPos"></param>
            <returns>Up to 16 characters</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getAlarmEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getServiceEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.GetEvents(System.UInt16)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventDecimals">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventGasType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.GetEventResolution">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventDuration">
            <summary>
            Returns how long the event lasted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventPeak">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventHiAlarm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventLoAlarm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventSpeakerVoltage">
            <summary>
            Returns the speaker voltage when an alarm event occurred.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventVibratingMotorVoltage">
            <summary>
            Returns the vibrating motor voltage when an alarm event occurred.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventAlarmOperatingMode">
            <summary>
            Returns the operating mode the instrument was in when an alarm event occurred.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventIsDocked">
            <summary>
            Returns whether instrument was docked when an alarm event occurred.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventSensorSerialNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventUserName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.getEventSiteName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.clearAlarmEvents">
            <summary>
            Clear all events from the instrument event logs.  Only executes for GasBadge Pro v2.20 or newer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.isInstrumentResetting">
            <summary>
            Returns whether or not this instrument is resetting.
            </summary>
            <returns>
            Always just returns false.
            For this instrument type, this condition is not yet being checked.
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProDriver.setCalibrationFault(System.Boolean)">
            <summary>
            Sets the Calibration Fault flag on the instrument.
            </summary>
            <param name="isFault"></param>
            <exception cref="T:System.NotSupportedException">Always thrown for this instrument type.</exception>
        </member>
        <member name="T:ISC.Instrument.Driver.GbPlusFactoryDriver">
            <summary>
            Configuration data to be programmed at time of manufacture
            </summary>
            
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.WriteSetupDate">
            <summary>
            Write the manufacture/setup date to the instrument
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.WriteTechInitials">
            <summary>
            Write the technician initials to the instrument	
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.WriteBatteryParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.disableWakeupSequence">
            <summary>
            ?
            </summary>
            <returns></returns>
            This is for non-gbplus instruments (like M40)
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.InitConfiguration">
            <summary>
            This method is called by beginConfiguration write after the instrument reports in
            in FactoryUnitialized mode.
            The intent of this method is to all the driver to do some preliminary factory
            initialization of the instrument that application developers shouldn't have to
            worry about, such as zeroing certain registers, etc.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.shutdown">
            <summary>
            Turns off the instrument.
            Any communication port, etc. being used to communicate with the instrument are
            (intended to be ) left open.
            Note that for GBPlus, this routine does nothing - GBPlus instrument cannot be turned off.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.getPgaGainFactor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.setTotalAlarmTime(System.TimeSpan)">
            <summary>
            Sets the total amount of time this instrument has been in an alarm state.
            The value is stored as number of seconds.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.setResetCount(System.Int32)">
            <summary>
            Sets the number of times that an instrument has reset.
            </summary>
            <remarks>
            Intended to be used when configuring the instrument (to set it to zero), 
            and for restoring the value during firmware upgrades.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Set minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Set maxiumum temperature reading
            </summary>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.getBatteryLoThreshold">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.getBatteryFailThreshold">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbPlusFactoryDriver.Configure">
            <summary>
            Commits the configuration information to the instrument
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.instrumentSerialNumber">
            <summary>
            All Numeric Instrument Serial Number 
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.setupDate">
            <summary>
            Date that the instrument was setup in manufacturing
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.setupTech">
            <summary>
            Setup Technician Initials
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryBar3Threshold">
            <summary>
            Voltage Threshold to display third battery bar
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryBar2Threshold">
            <summary>
            Voltage Threshold to display second battery bar
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryBar1Threshold">
            <summary>
            Voltage Threshold to display first battery bar
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryLoThreshold">
            <summary>
            Low battery voltage indication threshold
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryFailThreshold">
            <summary>
            Failed battery voltage indication threshold
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryLoCompensation">
            <summary>
            Battery compensation for temperature
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.batteryHiCompensation">
            <summary>
            Battery compensation for temperature
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.sensorType">
            <summary>
            IR,TOX,OXY,AAW,CAT, etc....
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.gasType">
            <summary>
            CO,O2,O3,CH4, etc ....
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.calTimeoutSeconds">
            <summary>
            Number of seconds before calibration times out
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.calInterval">
            <summary>
            Number of days before calibration due
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.gasDecimals">
            <summary>
            Number of decimal places available in gas reading
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.zeroLimit">
            <summary>
            Maximum adjustment of raw sensor reading for zeroing
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.sensitivityHiLimit">
            <summary>
            Maximum sensor sensitivity to be used in calibration
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.sensitivityLoLimit">
            <summary>
            Minimum sensor sensitivity to be used in calibration
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.sensitivity">
            <summary>
            Sensitivity to be used as a starting point in calibration
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.sensorSerialNumber">
            <summary>
            Sensor Serial Number
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.sensorPartNumber">
            <summary>
            Sensor Part Number
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.temperature">
            <summary>
            Temperature reading for instrument temperature sensor calibration
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.loEventThreshold">
            <summary>
            Factory programmed low event threshold
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.hiEventThreshold">
            <summary>
            Factory programmed high event threshold
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.deadbandValue">
            <summary>
            Deadband value for readings close to zero
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.filterAlgorithm">
            <summary>
            Filter Algorithm Selector
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.filterLevel">
            <summary>
            Filter Level Selector
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.filterBand">
            <summary>
            Filter Band Selector
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.measurementRange">
            <summary>
            Highest measurment for sensor
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.partNumber">
            <summary>
            Instrument Part Number
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.jobNumber">
            <summary>
            Manufacturing Job Number for the Extension Build
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.mfgLocation">
            <summary>
            Location code for manufacture
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.hardwareVersion">
            <summary>
            Hardware version of instrument
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.GbPlusFactoryDriver.configurationVersion">
            <summary>
            eeprom setup version
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WRITE_INST_DATA_TO_FLASH">
            <summary>
            When 0x0D is written to this register, the instrument will write unsaved data to flash.
            When read, it will return 0x0D if the flash write is still occurring, 0x00 otherwise. 
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WL_NETWORK_ID">
            <summary>
            Network ID currently in use, even if from Binding.
            Can be set from modbus to force an instrument into a particular network.
            Instrument will keep this up to date by reading it from the radio.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WL_ALARMS_CONTROL">
            <summary> Wireless alarms control.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WL_ALARMS_ACK">
            <summary>Wireless Alarms Acknowledges.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WL_DEVICE_STATUS">
            <summary>Whisper Status Byte (off, idle, connecting, connected, configuring, fault, etc.).</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WL_READINGS_DEADBAND">
            a.k.a. "teammate lost".
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisters.WL_RADIO_HARDWARE_VERSION">
            <summary>
            Hardware version of the Whisper radio hardware - to be used when we are updating the scripts.
            Need to ensure that the amount of memory in the radio is compatible with the size of the image in the instrument's memory.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.SafeCoreDatalogPacketizer">
            <summary>
            Manages the packets of hygiene data that are downloaded from instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogPacketizer.Add(System.Byte[])">
            <summary>
            Push a packet onto the end of the queue.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogPacketizer.Pop">
            <summary>
            Remove the first packet at the front of the queue and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogPacketizer.Peek">
            <summary>
            Return the packet at the front of the queue, leaving it at the front of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogPacketizer.GetNextRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogPacketizer.GetBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="recordSize"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.SafeCoreDatalogPacketizer.CheckCrc(System.Byte[])">
            <summary>
            Each record has a CRC appended at the end.  This is a CRC computed at the time
            the record was written to the instrument's dataflash.  We need to check the CRC's
            to detect corrupt record.  Any invalid CRCs mean we have a corrupt dataflash and
            the hygiene is invalid.
            </summary>
            <param name="record"></param>
            <exception cref="T:ISC.Instrument.Driver.CorruptHygieneException">CorruptHygieneException is thrown if an invalid CRC is found</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.DummyModbusMaster.Dispose(System.Boolean)">
            <summary>
            Called by constructor and public Dispose in order
            to implement standard IDisposable design pattern.
            
            This implementation ensures that the port is closed.
            </summary>
            <param name="disposing">
            true if being called explicitly by parameterless Dispose.
            false if being called by finalizing descructor.
            </param>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.LEL_PENTANE_TO_HEXANE">
            <summary>
            LEL Correlation factor for converting methane to pentane. v2.20 and later.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.LEL_PENTANE_TO_PROPANE">
            <summary>
            LEL Correlation factor for converting methane to pentane. v2.20 and later.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.LEL_PENTANE_TO_TOLUENE">
            <summary>
            LEL Correlation factor for converting methane to pentane. v2.20 and later.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.LEL_METHANE_TO_PENTANE">
            <summary>
            LEL Correlation factor for converting methane to pentane. v2.10 and earlier; removed in v2.20
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.LEL_METHANE_TO_NONANE">
            <summary>
            LEL Correlation factor for converting methane t nonane.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.LEL_PENTANE_TO_NONANE">
            <summary>
            LEL Correlation factor for converting pentane to nonane.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.WL_ALARMS_CONTROL">
            <summary> Wireless alarms control.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.WL_DEVICE_VERSION">
            <summary> HW version - high byte is version low byte is revision.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.WL_DEVICE_STATUS">
            <summary>Whisper Status Byte (off, idle, connecting, connected, configuring, fault, etc.).</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.WL_COMMUNICATION_PEER_LOST">
            <summary>Used to determine when a peer is considered lost - possibly a missed 5 messages in a row - TBD.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisters.WL_RADIO_HARDWARE_VERSION">
            <summary>
            Hardware version of the Whisper radio hardware - to be used when we are updating the scripts.
            Need to ensure that the amount of memory in the radio is compatible with the size of the image in the instrument's memory.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.DatalogDescriptor.RECORDS_PER_FRAME">
            <summary>
            ///////////////////////////////////////////////////////////////////
            //
            // Datalog Frames
            //   A datalog frame has the following format and [size]
            //
            //  ModbusAddress		[1]
            //  ModbusFunctionCode	[1]  
            //	FrameNumber			[2]
            //	DatalogRecord(0)	[4]
            //	DatalogRecord(1)	[4]
            //  ...
            //	DatalogRecord(13)	[4]
            //	ModbusCrc			[2]
            //
            //  Datalog Records
            //   A datalog record has the following format and [size]
            //
            //	gasReading			[2]
            //	temperature			[1]
            //	status				[1]
            //
            ////////////////////////////////////////////////////////////////////
            
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.DatalogDescriptor.#ctor">
            <summary>
            Constructor. Protected. Access only allowed (and necessary) for statics.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.factoryShutdown">
            <summary>
            Places the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.FactorySleep">factory sleep</see> mode.
            </summary>
            <remarks>
            When instrument is in <see cref="F:ISC.Instrument.Driver.OperatingMode.FactorySleep">factory sleep</see> mode,
            it will continue to respond to Modbus communication until it is undocked.
            <para>
            When undocked, the instrument will automatically power down, even if the AlwaysOn option is enabled,
            and if the security code is set. 
            </para>
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.Tx1Driver.shutdown"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setEquipmentSubType(ISC.Instrument.TypeDefinition.EquipmentSubType)">
            <summary>
            Sets the instrument's sub-type.
            </summary>
            <remarks>
            Note that the sub-type can only be set when the instrument is in factory-unitialized mode.
            </remarks>
            <param name="subType">
            Must be either EquipmentSubType.VentisPro4 or EquipmentSubType.VentisPro5.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if passed-in value is not VentisPro4 or VentisPro5.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.VentisProDriver.getEquipmentSubType"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.beginConfiguration">
            <summary>
            Placed the instrument into <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </summary>
            <exception cref="T:ISC.Instrument.Driver.ConfigurationException">
            Thrown if instrument will not enter <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.endConfiguration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getDualSenseCalRequestedFlag">
            <summary>
            Returns the instrument's "cal requested" flag.
            </summary>
            <remarks>
            When the two sensors in dual sense mode have huge differences in their individual readings,
            the instrument assumes they need to be calibrated - because maybe one is bad - so, the
            instrument set's a flag for itself.
            It causes the Cal Due alert when set.
            </remarks>
            <returns>True if the flag is set; else false.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setDualSenseCalRequestedFlag(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setDualSenseCalRequestedFlag(System.Boolean)">
            <summary>
            Sets the instrument's "cal requested" flag.
            </summary>
            <remarks>
            When the two sensors in dual sense mode have huge differences in their individual readings,
            the instrument assumes they need to be calibrated - because maybe one is bad - so, the
            instrument set's a flag for itself.
            It causes the Cal Due alert when set.
            <para>
            This method allows an the flag the be set externally by an application;
            this is necessary and only intended for configuring the instrument.
            </para>
            </remarks>
            <param name="flag">True to set the flag, false to clear the flag</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getDualSenseCalRequestedFlag"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.endConfiguration">
            <summary>
            This method should be called at the end of configuring the instrument.
            The methods waits for the instrument to exit <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode.
            </summary>
            <remarks>
            The instrument is considered configured if it's mode changes to either 
            to <see cref="F:ISC.Instrument.Driver.OperatingMode.WarmingUp"/>.  The instrument will change to
            this mode after being successfully configured because it automatically
            reboots itself, which then causes it to go through its warmup routine.
            </remarks>
            <exception cref="T:ISC.Instrument.Driver.ConfigurationException">
            Thrown if instrument remains stuck in <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized"/> mode
            or enters an unexpected mode.
            </exception>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.beginConfiguration"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.CheckConfigParameters">
            <summary>
            This is a helper method for endConfiguration().
            </summary>
            <remarks>
            After an instrument is configured, it saves the newly configured register values to
            flash memory and then reboots. Once this happens, its firmware needs to read the parameters
            back out of the flash memory. This routine polls the CONFIG_PARAMETERS_INITIALIZED register
            to 87 to determine when the instrument is done doing this.
            This register is 0 when the instrument is powered on. When the instrument
            parameters are completely read out of Flash memory, it is set to 1. If the
            instrument is set to Factory Uninitialized mode, the value is set to 0 again.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Writes the instrument's serial number.
            </summary>
            <param name="serialNum">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Writes the instrument's part number.
            </summary>
            <param name="partNum">
            Must be 16 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setSetupTech(System.String)">
            <summary>
            Writes the instrument's set-up technician's initials.
            </summary>
            <param name="setupTech">
            Must be 4 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Writes the date of manufacture.  i.e., the "setup date".
            </summary>
            <param name="dateTime">Only the month day and year are used. The time-portion of the DateTime is ignored.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setJobNumber(System.String)">
            <summary>
            Writes the manufacuring "job number" field.
            </summary>
            <param name="jobNum">
            Must be 8 or less characters. If more are specified, they will be truncated. Specify an empty string to blank out the field.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            Writes the instrument's manufacturing location.
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Writes the instrument's "Configuration Map Version" number.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Writes the instrument's hardware version number.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMinTemperature(System.Double)">
            <summary>
            Writes the instrument's minimum temperature reading.
            </summary>
            <param name="temp">Celsius, with 0.1 resolution. e.g. "20.1". To initialize, it's recommended to set a value of 100.0.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMaxTemperature(System.Double)">
            <summary>
            Writes the instrument's maximum temperature reading.
            </summary>
            <param name="temp">Celsius, with 0.1 resolution. To initialize, it's recommended to write a value of -100.0.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMaxSpeakerVoltage(System.Int32)">
            <summary>
            Value that the speaker voltage must be less than, in order to pass diagnostics.
            </summary>
            <param name="voltage"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getMaxSpeakerVoltage">
            <summary>
            Value that the speaker voltage must be less than, in order to pass diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMinSpeakerVoltage(System.Int32)">
            <summary>
            Value that the speaker voltage must be greater than, in order to pass diagnostics.
            </summary>
            <param name="voltage"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getMinSpeakerVoltage">
            <summary>
            Value that the speaker voltage must be greater than, in order to pass diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMaxMotorVoltage(System.Int32)">
            <summary>
            Value that the motor voltage must be less than, in order to pass diagnostics.
            </summary>
            <param name="voltage"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getMaxMotorVoltage">
            <summary>
            Value that the motor voltage must be less than, in order to pass diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMinMotorVoltage(System.Int32)">
            <summary>
            Value that the motor voltage must be greater than, in order to pass diagnostics.
            </summary>
            <param name="voltage"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getMinMotorVoltage">
            <summary>
            Value that the motor voltage must be greater than, in order to pass diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getMinCalibrationTime">
            <summary>
            Minimum time that the sensor has to calibrate in order to pass.
            </summary>
            <returns>Seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMinCalibrationTime(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setMinCalibrationTime(System.Int32)">
            <summary>
            Minimum time that the sensor has to calibrate in order to pass.
            </summary>
            <param name="seconds"></param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getMinCalibrationTime"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setResetCount(System.Int32)">
            <summary>
            Sets the number of times that an instrument has reset.
            </summary>
            <remarks>
            Intended to be used when configuring the instrument (to set it to zero), 
            and for restoring the value during firmware upgrades.
            </remarks>
            <param name="totalResets"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.configureSensors">
            <summary>
            Configures the duel sensors' settings so that they are in sync with each other.
            </summary>
            <remarks>
            Calling this method causes the instrument to read the settings for its installed duel sensors,
            determine any differences between the pairs, then modifying (if necessary) any settings on them 
            in order to make the settings the same between them.
            <para>
            The sensors "settings" are fields such as Low, High, STEL, and TWA alarms and, also, the peak
            reading.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAutoZeroClearingLimit(System.Int32)">
            <summary>
            Sets the autozero clearing limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit">
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAutoZeroInstantLimit(System.Int32)">
            <summary>
            Sets the autozero instant limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAutoZeroCalibrationLimit(System.Int32)">
            <summary>
            Sets the autozero cal limit on the instrument used for any installed LEL sensors.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAutoZeroMode(System.Boolean)">
            <summary>
            Turns on/off the autozero functionality on the instrument used
            for any installed LEL sensors.
            </summary>
            <remarks>
            <para>
            Note that this should always be enabled for all customers' instruments.
            </para>
            <para>
            This setting was introduced to iQuad 1.2 and is available in all versions of Ventis.
            </para>
            </remarks>
            <param name="on">
            If true,then autozero mode is turned On. False turns it off Off.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelMethaneToPentane">
            <summary>
            Returns the factory LEL correlation factor used for Methane to Pentane conversion.
            </summary>
            <remarks>
            Note that the instrument no longer uses this register, starting in v2.20.
            But, the instrument still requires this register to be written to, in order to configure it.
            </remarks>
            <returns>The returned value has a resolution of 2 decimal places. e.g. "1.23".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelMethaneToPentane(System.Double)">
            <summary>
            Sets the factory LEL correlation factor used for Methane to Pentane conversion.
            </summary>
            <remarks>
            Note that the instrument no longer uses this register, starting in v2.20.
            But, the instrument still requires this register to be written to, in order to configure it.
            </remarks>
            <param name="correlationFactor">The value should have a resolution of 2 decimal places. e.g. "1.23".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelMethaneToNonane">
            <summary>
            Returns the factory LEL correlation factor used for Methane to Pentane conversion.
            </summary>
            <returns>The returned value has a resolution of 2 decimal places. e.g. "1.23".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelMethaneToNonane(System.Double)">
            <summary>
            Sets the factory LEL correlation factor used for Methane to Nonane conversion.
            </summary>
            <param name="correlationFactor">The value should have a resolution of 2 decimal places. e.g. "1.23".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelPentaneToNonane">
            <summary>
            Returns the factory LEL correlation factor used for Methane to Pentane conversion.
            </summary>
            <returns>The returned value has a resolution of 2 decimal places. e.g. "1.23".</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelPentaneToNonane(System.Double)">
            <summary>
            Sets the factory LEL correlation factor used for Pentane to Nonane conversion.
            </summary>
            <param name="correlationFactor">The value should have a resolution of 2 decimal places. e.g. "1.23".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelPentaneToHexane">
            <summary>
            Returns the factory LEL correlation factor used for Methane to Hexane conversion.
            </summary>
            <returns>The returned value has a resolution of 2 decimal places. e.g. "1.23".</returns>
            <exception cref="T:System.NotSupportedException">Supported only in v2.2 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelPentaneToHexane(System.Double)">
            <summary>
            Sets the factory LEL correlation factor used for Pentane to Hexane conversion.
            </summary>
            <param name="correlationFactor">The value should have a resolution of 2 decimal places. e.g. "1.23".</param>
            <exception cref="T:System.NotSupportedException">Supported only in v2.2 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelPentaneToPropane">
            <summary>
            Returns the factory LEL correlation factor used for Methane to Propane conversion.
            </summary>
            <returns>The returned value has a resolution of 2 decimal places. e.g. "1.23".</returns>
            <exception cref="T:System.NotSupportedException">Supported only in v2.2 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelPentaneToPropane(System.Double)">
            <summary>
            Sets the factory LEL correlation factor used for Pentane to Propane conversion.
            </summary>
            <param name="correlationFactor">The value should have a resolution of 2 decimal places. e.g. "1.23".</param>
            <exception cref="T:System.NotSupportedException">Supported only in v2.2 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelPentaneToToluene">
            <summary>
            Returns the factory LEL correlation factor used for Methane to Toluene conversion.
            </summary>
            <returns>The returned value has a resolution of 2 decimal places. e.g. "1.23".</returns>
            <exception cref="T:System.NotSupportedException">Supported only in v2.2 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelPentaneToToluene(System.Double)">
            <summary>
            Sets the factory LEL correlation factor used for Pentane to Toluene conversion.
            </summary>
            <param name="correlationFactor">The value should have a resolution of 2 decimal places. e.g. "1.23".</param>
            <exception cref="T:System.NotSupportedException">Supported only in v2.2 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setSensorPartNumber(System.Int32,System.String)">
            <summary>
            Sets the sensor's Part number
            </summary>
            <param name="sensorPos"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAlgorithmReadingExponent">
            <summary>
            Returns the Algorithm's reading exponent, "N".
            </summary>
            <returns>An integer value with range 5 to 9.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAlgorithmReadingExponent(System.Int32)">
            <summary>
            Writes the Algorithm's reading exponent, "N".
            </summary>
            <param name="exponent"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAlgorithmO2ReadingDiff">
            <summary>
            Returns the Algorithm's maximum difference allowed, |e|, for readings between oxygen sensors.
            </summary>
            <returns>Floating point value with 2 decimal places, representing %Vol of O2.  e.g. "2.55". </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAlgorithmO2ReadingDiff(System.Double)">
            <summary>
            Writes the Algorithm's maximum difference allowed, |e|, for readings between oxygen sensors.
            </summary>
            <param name="difference">Floating point value representing %Vol of O2, with max of 2 decimal places.  e.g. 2.55. but not 2.551.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAlgorithmBumpResponseTimeDiff">
            <summary>
            Returns the Algorithm's maximum allowed difference in response times between a pair of sensors.
            for a successful bump test.
            </summary>
            <remarks>A percentage value.  e.g., 30 for "30%".</remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAlgorithmBumpResponseTimeDiff(System.Int16)">
            <summary>
            Write the Algorithm's maximum allowed difference in response times between a pair of sensors.
            </summary>
            <param name="difference">A percentage value.  e.g., 30 for "30%".</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAlgorithmToxicReadingDiff">
            <summary>
            Returns the Algorithm's maximum allowed difference for readings between toxic sensors.
            </summary>
            <returns>A percentage value with range 20% to 30%.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAlgorithmToxicReadingDiff(System.Int32)">
            <summary>
            Writes the Algorithm's maximum allowed difference for readings between toxic sensors.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAlgorithmMinCalPassSpan">
            <summary>
            Returns the Algorithm's minimum span reserve that each sensor is required to have to pass calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAlgorithmMinCalPassSpan(System.Int32)">
            <summary>
            Writes the Algorithm's minimum span reserve that each sensor is required to have to pass calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAlgorithmMaxCalPassSpan">
            <summary>
            Returns the Algorithm's maximum span reserve that each sensor is allowed to have to pass calibration.
            </summary>
            <returns>A percentage value.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAlgorithmMaxCalPassSpan(System.Int32)">
            <summary>
            Writes the Algorithm's maximum span reserve that each sensor is allowed to have to pass calibration.
            </summary>
            <param name="percentage">A percentage value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getIndicatorFailures">
            <summary>
            TODO: what's this for?
            </summary>
            <returns>
            The returned value may have one or more bits set to indicate which indicators have failed.
            IndicatorFailures.None is returned if there are no failures.
            The following <see cref="T:ISC.Instrument.Driver.IndicatorFailures"/> bits are possible for this instrument type...
            <list type="bullet">
            <item><description>IndicatorFailures.VibratingMotor</description></item>
            <item><description>IndicatorFailures.Speaker</description></item>
            </list>
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            Set whether or not the instrument is owned by ISC (i.e., is a rental instrument).
            </summary>
            <param name="isIscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getBatteryDockedPowerThreshold">
            <summary>
            Returns the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This is the minimum battery voltage for instrument to begin communications
            immediately when docked and off.
            </remarks>
            <returns>Value is in millivolts.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setBatteryDockedPowerThreshold(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setBatteryDockedPowerThreshold(System.Int16)">
            <summary>
            Sets the instrument's "Battery Docked Power Threshold".
            </summary>
            <remarks>
            This is the minimum battery voltage for instrument to begin communications
            immediately when docked and off.
            </remarks>
            <param name="threshold">A millivolts value.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getBatteryDockedPowerThreshold"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getBatteryDockedPowerInterval">
            <summary>
            Returns the instrument's Battery Docked Power Interval.
            This is the time to wait for battery to level out before beginning communications when docked and off.
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <returns>Value is in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setBatteryDockedPowerInterval(System.Int16)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setBatteryDockedPowerInterval(System.Int16)">
            <summary>
            Sets the instrument's "Battery Docked Power Interval".
            This is the time to wait for battery to level out before beginning communications when docked and off.
            </summary>
            <remarks>
            This parameter is the amount of time, in seconds, that the instrument waits before
            testing the battery voltage again, if the voltage at startup is below the 
            Battery Docked Power Threshold.
            </remarks>
            <param name="interval">Value is in seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getBatteryDockedPowerInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getBatteryFailThreshold">
            <summary>
            Voltage at which battery will shut off.
            </summary>
            <returns>Value is in millivolts.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary>
            Voltage at which battery will shut off.
            </summary>
            <param name="threshold">A millivolts value.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setSpeakerFrequency1(System.Int32)">
            <summary>
            Sets the speaker frequency 1.
            </summary>
            <param name="?">The speaker frequency 1, in Hz.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getSpeakerFrequency1">
            <summary>
            Gets the speaker frequency 1.
            </summary>
            <returns>Returned value is in Hz.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelMode">
            <summary>
            
            </summary>
            <returns></returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelMode(ISC.Instrument.Driver.VentisProFactoryDriver.LelMode)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelMode(ISC.Instrument.Driver.VentisProFactoryDriver.LelMode)">
            <summary>
            
            </summary>
            <param name="lelMode"></param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelMode"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelModeLock(System.Boolean)">
            <summary>
            Lock (or unlock) the instrument's LEL mode so that it cannot
            (or can) be changed by the user.
            </summary>
            <param name="isLocked">
            True to lock the mode so user cannot change it.
            False to unlock it so that user can change it.
            </param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelModeLock"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelModeLock">
            <summary>
            Indicates whether or not the instrument's LEL mode is locked or not.
            </summary>
            <remarks>
            If the mode is locked, then user cannot change it.
            </remarks>
            <returns>
            True if the mode is locked so user cannot change it.
            False if the mode is unlocked it so that user can change it.
            </returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelModeLock(System.Boolean)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setPumpFlowSetPoint(System.Int32)">
            <summary>
            Sets the pump control set point.
            </summary>
            <remarks>
            Pump flow set point is a mV reading that pump has to get within some percentage of
            in order to run at proper flow.
            </remarks>
            <param name="setPoint">Value is in millivolts (mV).</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getPumpFlowSetPoint"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getPumpFlowSetPoint">
            <summary>
             Sets the pump control set point.
            </summary>
            <remarks>
            Pump flow set point is a mV reading that pump has to get within some percentage of
            in order to run at proper flow.
            </remarks>
            <returns>Value is in millivolts (mV).</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setPumpFlowSetPoint(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.isSelfTestInvokedWhileWarmUpCompleted">
            <summary>
            The flag that will indicate whether a self-test invoked while in warm-up mode has completed. 
            </summary>
            <remarks>
            This feature is applicable only from Ventis Pro 2.0. Ideally this should be called only if firmware version is 2.0 or above
            This flag must be queried by applications communicating with Ventis Pro instruments so that subsequent actions can be taken on those instruments
            It resets back when instrument restarts.
            </remarks>
            <returns>Whether the self test invoked while in warm-up mode has completed</returns>
            <exception cref="T:System.NotSupportedException">Supported only in v2.0 or later.</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.runSelfTest">
            <summary>
            Tells the instrument to perform self tests on itself.
            </summary>
            <remarks>
            The instrument's self tests take around 8 - 9 seconds to run.
            This method will wait until they they are completed before it returns.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getOomAlarmInterval">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM ("Out-of-Motion") Alarm is initiated.
            </summary>
            <returns>Returned value is in seconds.</returns>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setOomAlarmInterval(System.Int32)"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setOomAlarmInterval(System.Int32)">
            <summary>
            The amount of time that will elapse from when no motion is first detected, until the OOM ("Out-of-Motion") Alarm is initiated.
            </summary>
            <remarks>
            <note>
            Although the related "OOM Warning Interval" can be changed by the user, this OOM Alarm Interval setting is a factor-only setting.
            The instrument will only allow this setting to be modified when it is in <see cref="F:ISC.Instrument.Driver.OperatingMode.FactoryUninitialized">FactoryUninitialized</see> mode.
            If this method is called when the instrument is in some other mode, then the instrument will not change the setting.
            </note>
            </remarks>
            <param name="interval">Value is in seconds.</param>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getOomAlarmInterval"/>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getNfcUser">
            <summary>
            Get the instrument's current NFC user. 
            Should this be exposed to iAssign App?
            </summary>
            <returns>Active user. Empty string if there is no current NFC user.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getNfcSite">
            <summary>
            Get the instrument's current NFC site.
            Should this be exposed to iAssign App?
            </summary>
            <returns>Active site. Empty string if there is no current NFC site.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAccelerometerX">
            <summary>
            Accelerometer reading from X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAccelerometerY">
            <summary>
            Accelerometer reading from Y axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAccelerometerZ">
            <summary>
            Accelerometer reading from Z axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getBarometerReading">
            <summary>
            Returns the current barometer reading, in mbars.
            </summary>
            <returns>Returned value is in mbars.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.enableBluetoothTestMode(System.Boolean)">
            <summary>
            Puts the bluetooth module into test mode for manufacturing or service testing. 
            </summary>
            <param name="enabled">
            true to enable test mode, false to disable test mode.
            Note: if instrument is reset, test mode is cleared.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setIndicatorTest(ISC.Instrument.Driver.IndicatorTest)">
            <summary>
            Turn on alarm indicator(s) to perform verification / test of them.
            </summary>
            <param name="indicatorTest">
            One or more bits specifying which indicators to turn on.
            To turn off all indicators, specify <see cref="F:ISC.Instrument.Driver.IndicatorTest.NoIndicator">.</see>
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setPressureAlgorithmFactor(System.Double)">
            <summary>
            Factor to multiply the gas readings to compensate for pressure. For use with CH4 IR sensor readings.
            </summary>
            <param name="factor">The passed-in factor should have a resolution of 3 decimal places. e.g., 0.025.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getPressureAlgorithmFactor">
            <summary>
            Factor to multiply the gas readings to compensate for pressure. For use with CH4 IR sensor readings.
            </summary>
            <returns>The returned value will have a resolution of 3 decimal places. e.g., 0.025.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setPressureAlgorithmStep(System.Double)">
            <summary>
            Step size. For use with CH4 IR sensor readings.
            </summary>
            <param name="factor">The passed-in factor step size should have a resolution of 1 decimal places. e.g., 2.5.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getPressureAlgorithStep">
            <summary>
            Step size. For use with CH4 IR sensor readings.
            </summary>
            <returns>The returned value will have a resolution of 1 decimal place. e.g., 2.5</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAccelerometerMagnitudeThreshold">
            <summary>
            Returns the Accelerometer Magnitude Threshold
            </summary>
            <returns>Returns the Accelerometer Magnitude Threshold</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAccelerometerMagnitudeThreshold(System.UInt16)">
            <summary>
            Set the Accelerometer Magnitude Threshold
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getAccelerometerDebounceCount">
            <summary>
            Returns the Accelerometer Debounce Count
            </summary>
            <returns>Accelerometer Debounce Count</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setAccelerometerDebounceCount(System.UInt16)">
            <summary>
            Set the Accelerometer Debounce Count
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.enableWirelessTestMode(System.Boolean)">
            <summary>
            Puts the wireless module into test mode for manufacturing or service testing. 
            </summary>
            <param name="enabled">
            true to enable test mode, false to disable test mode.
            Note: if instrument is reset, test mode is cleared.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setWirelessAlarmMask(System.UInt16)">
            <summary>
            Sets the Wireless Alarm Mask
            </summary>
            <param name="value">
            The value of register to enable disable the following bits.
            
            To enable set bit to a 1, To disable set bit to zero.
               Bit 0 = High Gas Alarm
               Bit 1 = Low Gas Alarm
               Bit 2 = TWA Alarm
               Bit 3 = STEL Alarm
               Bit 4 = Panic Alarm
               Bit 5 = Man down Alarm
               Bit 6 = Positive OR Alarm
               Bit 7 = Negative OR Alarm
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.getNFCSiteTime">
            <summary>
            Returns the time from when a site is loaded from an NFC tag to when it defaults to the ABI site when the instrument is subscribed to the site beacons
            </summary>
            <returns>NFC Site Time</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProFactoryDriver.setNFCSiteTime(System.Int32)">
            <summary>
            Sets the time from when a site is loaded from an NFC tag to when it defaults to the ABI site when the instrument is subscribed to the site beacons
            </summary>
            <param name="value">Time in seconds</param>
        </member>
        <member name="T:ISC.Instrument.Driver.VentisProFactoryDriver.LelMode">
            <summary>
            Defines LEL modes for the Ventis Pro instrument.
            </summary>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelMode"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelMode(ISC.Instrument.Driver.VentisProFactoryDriver.LelMode)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.setLelModeLock(System.Boolean)"/>
            <seealso cref="M:ISC.Instrument.Driver.VentisProFactoryDriver.getLelModeLock"/>
        </member>
        <member name="T:ISC.Instrument.Driver.VentisProDatalogPacketizer">
            <summary>
            Manages the packets of hygiene data that are downloaded from instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogPacketizer.Add(System.Byte[])">
            <summary>
            Push a packet onto the end of the queue.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogPacketizer.Pop">
            <summary>
            Remove the first packet at the front of the queue and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogPacketizer.Peek">
            <summary>
            Return the packet at the front of the queue, leaving it at the front of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogPacketizer.GetNextRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogPacketizer.GetBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="recordSize"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogPacketizer.CheckCrc(System.Byte[])">
            <summary>
            Each record has a CRC appended at the end.  This is a CRC computed at the time
            the record was written to the instrument's dataflash.  We need to check the CRC's
            to detect corrupt record.  Any invalid CRCs mean we have a corrupt dataflash and
            the hygiene is invalid.
            </summary>
            <param name="record"></param>
            <exception cref="T:ISC.Instrument.Driver.CorruptHygieneException">CorruptHygieneException is thrown if an invalid CRC is found</exception>
        </member>
        <member name="T:ISC.Instrument.Driver.VentisProDatalogger">
            <summary>
            Summary description for VentisProDatalogger.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.#ctor(ISC.Instrument.Driver.InstrumentDriver,ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            
            </summary>
            <param name="driver"></param>
            <param name="modbusMaster"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.DownloadSession(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.CommitPeriod(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.DownloadSessionPackets(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParseSessionHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParseSessionFooter(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParseSensorSessionHeaders(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParseCustomResponseFactorHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParseSensorStatus(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParsePeriod(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.ParseReading(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.VentisProDatalogger.BytesToString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="F:ISC.Instrument.Driver.SafeCoreRegisterBits.CAL_SETTINGS_CAL_REQUESTED">
            <summary>When the two sensors in dual sense mode have huge differences in their individual readings,
            instrument assumes they need to be calibrated - maybe one is bad - so instrument set's this bit.
            It causes the cal due alert when set.</summary>
            <remarks>This bit is not part of an "option". It is used by the factory driver (See get/setDualSenseCalRequestedFlag</remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.GbPrintStringDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.GbProFactoryDriver">
            <summary>
            GbProFactoryDriver.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.#ctor(System.String)">
            <summary>
            Constructor.  Initializes driver using the specified COM port.
            </summary>
            <param name="comPort"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.#ctor(System.String,ISC.Instrument.Driver.CommunicationModuleTypes)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="moduleType"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setInstrumentSerialNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="serialNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setInstrumentPartNumber(System.String)">
            <summary>
            Sets the instrument's part number.
            </summary>
            <param name="partNum">More than 8 chars gets truncated. Specify Empty string to blank out.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setInstrumentIscProperty(System.Boolean)">
            <summary>
            
            </summary>
            <param name="iscProperty"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setJobNumber(System.String)">
            <summary>
            </summary>
            <param name="jobNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setSetupTech(System.String)">
            <summary>
            Sets  the instrument's set-up technician's initials.
            </summary>
            <returns>Setup tech</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setSetupDate(System.DateTime)">
            <summary>
            Sets the instrument's Mfg date and time.
            </summary>
            <param name="dateTime">Mfg date and time</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setMfgDate(System.DateTime)">
            <summary>
            Sets the instrument's Mfg date and time.
            </summary>
            <param name="dateTime">Mfg date and time</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setConfigurationVersion(System.Int16)">
            <summary>
            Set the Instrument Configuration Map Version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setHardwareVersion(System.Int16)">
            <summary>
            Sets the instrument hardware version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setMfgLocation(System.Int16)">
            <summary>
            </summary>
            <param name="mfgLocation"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.getBatteryLoThreshold">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setBatteryLoThreshold(System.Int16)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.getBatteryFailThreshold">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setBatteryFailThreshold(System.Int16)">
            <summary></summary>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.getBatteryBarThreshold(System.Int32)">
            <summary>
            Returns maximum voltage necessary for displaying the specified
            battery bar.
            </summary>
            <param name="barNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setBatteryBarThreshold(System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setMinTemperature(System.Int16)">
            <summary>
            Set minimum temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setMaxTemperature(System.Int16)">
            <summary>
            Set maxiumum temperature reading
            </summary>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setTemperature(System.Int16)">
            <summary>
            Sets current temperature reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setSensorCode(System.Int32,System.String)">
            <summary>
            Sets the sensor's type code.
            </summary>
            <param name="sensorPos"></param>
            <param name="code">Format is "Sxxxx" where 'x' is digits 0 or greater. e.g. "S0021"</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setSensorMaxTemperature(System.Int32,System.Int16)">
            <summary>
            Set the Sensor Max Temperature.
            </summary>
            <param name="sensorPos"></param>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setSensorMinTemperature(System.Int32,System.Int16)">
            <summary>
            Set the Sensor Min Temperature.
            </summary>
            <param name="sensorPos"></param>
            <param name="temp"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.testButton(ISC.Instrument.Driver.GbProFactoryDriver.Button,System.Int32)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setLastBumpTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="lastBumpTime">This method does nothing if the instrument is older than v2.00.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.setIndicatorFailures(ISC.Instrument.Driver.IndicatorFailures)">
            <summary>
            Set which indicators have failed during a gas alarm.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.getSoftwareVersion">
            <summary>
            Retrieves the instrument's software version.
            </summary>
            <returns>
            The instrument's software version with a format of "MajorVersion.MinorVersion.BuildNumber".
            e.g. "2.70.02".
            </returns>
        </member>
        <member name="M:ISC.Instrument.Driver.GbProFactoryDriver.getIndicatorFailures">
            <summary>
            TODO: what's this for?
            </summary>
            <returns>
            The returned value may have one or more bits set to indicate which indicators have failed.
            IndicatorFailures.None is returned if there are no failures.
            For this instrument type, this method only works for firmware v2.50 or newer. 
            The following <see cref="T:ISC.Instrument.Driver.IndicatorFailures"/> bits are possible for these instruments...
            <list type="bullet">
            <item><description>IndicatorFailures.LeftLed</description></item>
            <item><description>IndicatorFailures.RightLed</description></item>
            <item><description>IndicatorFailures.VibratingMotor</description></item>
            <item><description>IndicatorFailures.Speaker</description></item>
            </list>
            For older instruments, IndicatorFailures.None is returned.
            </returns>
        </member>
        <member name="T:ISC.Instrument.Driver.GbProFactoryDriver.Button">
            <summary>
            Enum representing the instrument's buttons.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.AlarmActionMessageGroup">
            <summary>
            </summary>
            <remarks>
            Some instruments have new feature called "Alarm Action Messages".
            <para>
            Users can specify messages like "Evacuate" or "Wear Respirator" that are to be displayed on
            the instrument whenever the instrument is in alarm.
            </para>
            <para>
            Each sensor type can have its own unique set of messages, and for a given sensor type,
            the messages can be unique for each alarm type (gas alert alarm, low alarm, high alarm,
            TWA alarm, and STEL alarm).
            </para>
            <para>
            The messages are stored in the instrument, not on the sensor. The number of
            AlarmActionMessageGroups that an instrument is capable storing is typical equal to the
            to how many sensors can be installed in the instrumement.
            Call <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/> to determine the actual
            number for a given instrument type.
            </para>
            To determine the string length of the messages, call <see cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessageLineLength"/>. 
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getAlarmActionMessages"/>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.setAlarmActionMessages(ISC.Instrument.Driver.AlarmActionMessageGroup[])"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessages"/>
            <seealso cref="P:ISC.Instrument.TypeDefinition.InstrumentTypeDefinition.MaxAlarmActionMessageLineLength"/>
        </member>
        <member name="M:ISC.Instrument.Driver.AlarmActionMessageGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.AlarmActionMessageGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            </summary>
            <param name="sensorCode">The sensor code that the alarm applies to. e.g. "S0020" for Oxygen sensors.</param>
            <param name="alertAlarmActionMessage">The text message that is displayed when sensor is in alert. A null value is allowed and will treated as if an empty List was passed in.</param>
            <param name="lowAlarmActionMessage">The text message that is displayed when sensor is in Low alarm. A null value is allowed and will treated as if an empty List was passed in.</param>
            <param name="highAlarmActionMessage">The text message that is displayed when sensor is in High slarm. A null value is allowed and will treated as if an empty List was passed in.</param>
            <param name="stelAlarmActionMessage">The text message that is displayed when sensor is in STEL alarm. A null value is allowed and will treated as if an empty List was passed in.</param>
            <param name="twaAlarmActionMessage">The text message that is displayed when sensor is in TWA alarm. A null value is allowed and will treated as if an empty List was passed in.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.AlarmActionMessageGroup.Clone">
            <summary>
            Returns a duplicate of this AlarmActionMessageGroup object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmActionMessageGroup.SensorCode">
            <summary>
            The sensor code that the alarm applies to. e.g. "S0020" for Oxygen sensors.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmActionMessageGroup.GasAlertActionMessage">
            <summary>
            The text message that is displayed when sensor is in gas alert alarm.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmActionMessageGroup.LowAlarmActionMessage">
            <summary>
            The text message that is displayed when sensor is in Low alarm.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmActionMessageGroup.HighAlarmActionMessage">
            <summary>
            The text message that is displayed when sensor is in High slarm.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmActionMessageGroup.StelAlarmActionMessage">
            <summary>
            The text message that is displayed when sensor is in STEL alarm.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmActionMessageGroup.TwaAlarmActionMessage">
            <summary>
            The text message that is displayed when sensor is in TWA alarm.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.BufferClaim">
            <summary>
            </summary>
            <remarks>
            The instrument utilizes two circular buffers, one for the header table and
            another for the datalogtable.  Each record of the datalog table 'owns' a section
            of the datalog table.  That section of the datalog table is indicated by a range 
            of pages startPage to endPage-1 .
            
            As the datalogtable grows, it will eventually rollover to the point where old
            data is re-written.  As old datalog data is over-written, the old headers are NOT
            cleared.  This results in the situation of having multiple headers claim the same
            datalog pages.
            
            This situation is addressed by uploading the most recent headers first.  As the
            headers are uploaded, they 'claim' a piece of datalog space.  If that space is
            already claimed, then that header, and all subsequent headers are ignored.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.BufferClaim.Initialize(System.UInt16,System.UInt16)">
            <summary>
            Initialize the buffer segment with the first claim.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.BufferClaim.ClaimBufferSegment(System.UInt16,System.UInt16)">
            <summary>
            Returns false if buffer segment has been already claimed.  
            Returns true if claim is successful.  Adds new buffer segment to total claim.
            </summary>		
        </member>
        <member name="M:ISC.Instrument.Driver.BufferClaim.EndAdjust(System.UInt16)">
            <summary>
            The buffer segment is defined as all elements from and including the start element
            up to , but NOT including, the end element
            </summary>		
        </member>
        <member name="M:ISC.Instrument.Driver.BufferClaim.BufferSegmentAdd(System.UInt16,System.UInt16)">
            <summary>
            Adds bufferSegment to the claimSegment.  Buffer segment must precede claimBuffer.
            </summary>		
        </member>
        <member name="M:ISC.Instrument.Driver.BufferClaim.BufferSegmentIntersection(System.UInt16,System.UInt16)">
            <summary>
            Determines if the claimBufferSegment instersects with the new bufferSegment.
            Checks to see if either the start or end point of one buffer, falls within
            the space of the other buffer.
            </summary>		
        </member>
        <member name="M:ISC.Instrument.Driver.BufferClaim.InBufferSegment(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Determines if the specified element is with the specified buffer
            </summary>												
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.SUPER_OP_MODE">
            <summary>
            Indicates the instrument's current mode of operation.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.EQUIPMENT_SUB_TYPE">
            <summary>
            Sub-type of an instrument when the instrument is a sub-set of the instrument type.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.SET_BAUD_RATE">
            <summary>
            Allows Modbus baud rate to be changed from 9600 to 115200 or vice versa.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_TIME_HI">
            <summary>Bump/cal timestamp, high byte.  timestamp is number of seconds since 2000</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_TIME_LO">
            <summary>Bump/cal timestamp, low byte.  timestamp is number of seconds since 2000</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_TYPE">
            <summary>Operation type. 1 = bump, 2 = cal, 3 = zero (only used when zeroing fails)</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_STATUS">
            <summary>Zero / Bump / Cal result. hiByte = zero status, loByte = bump/cal status</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_GAS_DEC_PLACES">
            <summary>high byte = DecimalPlaces, low byte = GasType</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_READING">
            <summary>Final sensor reading (for bump) / Span reserve (for cal)</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_LOW_THRESHOLD">
            <summary>Sensor low alarm threshold </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_HIGH_THRESHOLD">
            <summary>Sensor high alarm threshold</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_MEASUREMENT_UNITS">
            <summary>Sensor measurement units</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_CAL_GAS_CONC">
            <summary>Sensor cal gas concentration</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_SENSOR_SENSITIVIY_HI">
            <summary>Sensor sensitivity (a.k.a. 'Span coefficient') high byte.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_SENSOR_SENSITIVIY_LO">
            <summary>Sensor sensitivity (a.k.a. 'Span coefficient') low byte.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_SENSOR_BASELINE_HI">
            <summary>Sensor baseline high byte.</summary>
            <remarks>Note that DS2 'Zero Offset' is the baseline with resolution applied.</remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_SENSOR_BASELINE_LO">
            <summary>Sensor baseline low byte.</summary>
            <remarks>Note that DS2 'Zero Offset' is the baseline with resolution applied.</remarks>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_DURATION">
            <summary>Bump / calibration duration, in seconds.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_BUMP_TIMEOUT">
            <summary>Bump timeout. For manual bump test, this will be an INSTRUMENT value.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_CAL_TIMEOUT">
            <summary>Calibration timeout.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_BUMP_THRESHOLD">
            <summary>Bump threshold. For manual bump test, this will be an INSTRUMENT value.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_PUMP">
            <summary>1 = pump installed, 0 = pump not installed</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_INDEX">
            <summary>Bump / calibration index.
            Logs with same value are part of the same calibration or bump test.
            This is cleared when the manual bump/cal log is cleared.</summary>
        </member>
        <member name="F:ISC.Instrument.Driver.EquipmentRegisters.GAS_OP_LOG_SENSOR_CODE">
            <summary>The 'Sxxxx' value</summary>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverInstrumentSensorSession">
            <summary>
            One session of reading periods for a single sensor
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.DriverInstrumentSensorSession.#ctor">
            <summary>
            Creates a new instance of SensorSession class.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.SensorCode">
            <summary>
            Sensor code (e.g. "S0003")
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.SensorType">
            <summary>
            Type of sensor (e.g. "TOX", "OXY", etc.)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.GasCode">
            <summary>
            Gas code of gas being sensed (e.g. "G0003")
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.Status">
            <summary>
            Status of sensor during this session (CalPastDue, CalFault, etc.)
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.CustomResponseName">
            <summary>
            If there was a PID in the instrument, and it was reading gas using
            a Custom Response Factor, then this will be set to the name
            of that custom response factor.  Otherwise, and empty string.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.CustomResponseValue">
            <summary>
            If there was a PID in the instrument, and it was reading gas using
            a Custom Response Factor, then this will be set to the value
            of that custom response factor.  Otherwise, zero.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.ReadingPeriods">
            <summary>
            Contains DriverInstrumentSensorReadingPeriods
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.DriverInstrumentSensorSession.Positions">
            <summary>
            The position number(s) of the sensor at the time of the gas operation.
            </summary>
            <remarks>
            This will only be filled in for certain instrument types; e.g. SafeCore.
            Will be a empty if not supported the instrument type.
            </remarks>
        </member>
        <member name="T:ISC.Instrument.Driver.DriverInstrumentSensorReading">
            <summary>
            A single gas reading from a single sensor
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Tx1DatalogPacketizer">
            <summary>
            Manages the packets of hygiene data that are downloaded from instrument.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1DatalogPacketizer.Add(System.Byte[])">
            <summary>
            Push a packet onto the end of the queue.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1DatalogPacketizer.Pop">
            <summary>
            Remove the first packet at the front of the queue and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1DatalogPacketizer.Peek">
            <summary>
            Return the packet at the front of the queue, leaving it at the front of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1DatalogPacketizer.GetNextRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1DatalogPacketizer.GetBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="recordSize"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Tx1DatalogPacketizer.CheckCrc(System.Byte[])">
            <summary>
            Each record has a CRC appended at the end.  This is a CRC computed at the time
            the record was written to the instrument's dataflash.  We need to check the CRC's
            to detect corrupt record.  Any invalid CRCs mean we have a corrupt dataflash and
            the hygiene is invalid.
            </summary>
            <param name="record"></param>
            <exception cref="T:ISC.Instrument.Driver.CorruptHygieneException">CorruptHygieneException is thrown if an invalid CRC is found</exception>
        </member>
        <member name="F:ISC.Instrument.Driver.VentisProRegisterBits.CAL_SETTINGS_CAL_REQUESTED">
            <summary>When the two sensors in dual sense mode have huge differences in their individual readings,
            instrument assumes they need to be calibrated - maybe one is bad - so instrument set's this bit.
            It causes the cal due alert when set.</summary>
        </member>
        <member name="T:ISC.Instrument.Driver.ModbusSerialPort">
            <summary>
            THIS CLASS IS ONLY PUBLIC SO THAT ISC.Instrument.Update ASSEMBLY HAS ACCESS TO IT.
            OTHER SOFTWARE SHOULD NOT USE THIS CLASS!.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusSerialPort.GetTotalRetries">
            <summary>
            Returns the number of times "retries" have been necessary when trying to read/write a modbus register.
            </summary>
            <remarks>
            Note that for the docking station, the value returned comes from the ModbusLibrary DLL.
            The value is cumulative; i.e., it never resets back to zero and will only continually 
            increment as the docking station continues to run.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.ModbusSerialPort.TxRxFrame(System.String,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="txFrame"></param>
            <param name="rxLength"></param>
            <param name="rxFrame"></param>
            <param name="responseDelay">If greater than zero, then after writing data to serial port,
            this method will sleep for this amount of time before attempting to read the instrument's
            response from the serial port.
            <para>Ignored if CommunicationModuleType is a docking station.</para>
            </param>
            <param name="retryDelay">Milliseconds to sleep between each attempt.</param>
            <param name="maxAttempts">Maximum number of attempts to make</param>
            <returns></returns>
        </member>
        <member name="F:ISC.Instrument.Driver.ModbusSerialPort.ModbusSerialErrorCode.BadRxLength">
            <summary>
            Bad length on received response.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.ModbusSerialPort.ModbusSerialErrorCode.BadRxCrc">
            <summary>
            Bad CRC on received response.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Base36">
            <summary>
            Convert number to/from Base36 numbers. Base36 uses numbers 0 to 9, and letters A to Z.
            </summary>
            <remarks>
            Source code is based on code from https://www.stum.de/2008/10/20/base36-encoderdecoder-in-c/.
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Base36.Encode(System.UInt16)">
            <summary>
            Encode the given number into a Base36 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Base36.Decode(System.String)">
            <summary>
            Decode the Base36 Encoded string into a number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ISC.Instrument.Driver.Resolution">
            <summary>
            The Resolution class is used to represent the 'resolution' or
            'decimal places' for a particular sensor.
            </summary>
            <remarks>All values on a sensor are integral.
            <para>But there is an implied'resolution' that a sensor has that can be used 
            to convert the integral values to decimal values.
            </para>
            <para>
            e.g., if a sensor has a particular integer value of 195, and the resolution
            is 1 decimal place, then when the resolution is 'applied' to the integer value,
            it becomes 19.5.
            </para>
            <para>
            INSTANCES OF THIS CLASS ARE IMMUTABLE. AT LEAST THEY'RE SUPPOSED TO BE.
            </para>
            </remarks>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.#ctor(System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="decimalPlaces">Number of decimal places.  e.g. 2 for 0.01</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If invalid decimal places is specified</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.SetDecimalPlaces(System.UInt16)">
            <summary>
            
            </summary>
            <param name="decimalPlaces"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If invalid decimal places is specified</exception>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.GetResolutionOf(System.Double)">
            <summary>
            Given a double value, this routine will determine the resolution
            of that value.
            </summary>
            <remarks>e.g. given "1.23", this routine will return a Resolution with DecimalPlaces of 2.</remarks>
            <param name="dbl"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If passed-in value's decimal places exceeds MaxDecimalPlaces</exception>
            <seealso cref="P:ISC.Instrument.Driver.Resolution.MaxDecimalPlaces"/>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.RunTestHarness">
            <summary>
            Test Harness.
            </summary>
            <returns>Number of seconds that elapsed during execution.</returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Clone">
            <summary>
            Clones the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.ToString">
            <summary>
            Returns the <see cref="P:ISC.Instrument.Driver.Resolution.DecimalPlaces"/> as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Apply(System.UInt16)">
            <summary>
            Take specified whole number and apply the sensor's resolution to it.
            e.g., if specified value is 197, and decimal places is 1, then
            returned value is 19.7.
            </summary>
            <param name="registerValue"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Apply(System.Int16)">
            <summary>
            Take specified whole number and apply the sensor's resolution to it.
            e.g., if specified value is 197, and decimal places is 1, then
            returned value is 19.7.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Apply(System.UInt32)">
            <summary>
            Take specified whole number and apply the sensor's resolution to it.
            e.g., if specified value is 197, and decimal places is 1, then
            returned value is 19.7.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Apply(System.Int32)">
            <summary>
            Take specified whole number and apply the sensor's resolution to it.
            e.g., if specified value is 197, and decimal places is 1, then
            returned value is 19.7.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Apply(System.Double)">
            <summary>
            Take specified decimal and apply the sensor's resolution to it.
            e.g., if specified value is 19.5, and decimal places is 1, then
            returned value is 1.95.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Remove(System.Double)">
            <summary>
            Take specified double value and 'remove' the sensor's resolution from it,
            returning an integer.
            e.g., if specified value is 19.7, and resolution is 0.1, then
            returned value is 197.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Remove(System.Single)">
            <summary>
            Take specified double value and 'remove' the sensor's resolution from it,
            returning an integer.
            e.g., if specified value is 19.7, and resolution is 0.1, then
            returned value is 197.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Remove(System.UInt32)">
            <summary>
            Take specified value and 'remove' the sensor's resolution from it.
            e.g., if specified value is 19, and resolution is 0.1, then
            returned value is 190.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Remove(System.Int32)">
            <summary>
            Take specified value and 'remove' the sensor's resolution from it.
            e.g., if specified value is 19, and resolution is 0.1, then
            returned value is 190.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Remove(System.UInt16)">
            <summary>
            Take specified value and 'remove' the sensor's resolution from it.
            e.g., if specified value is 19, and resolution is 0.1, then
            returned value is 190.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Resolution.Remove(System.Int16)">
            <summary>
            Take specified value and 'remove' the sensor's resolution from it.
            e.g., if specified value is 19, and resolution is 0.1, then
            returned value is 190.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.Resolution.Decimals">
            <summary>
            Returns a double that can be 'applied' to an 
            integer value to convert it to decimal.
            <para>e.g., if resolution is 2 decimal places, then 0.01 is returned.</para>
            <para>e.g. 25000 * 0.001 = 2.5</para>
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.Resolution.DecimalPlaces">
            <summary>
            Returns the number of decimal places the sensor is
            programmed for.  e.g. "2".
            This is the same value as originally specified in the constructor.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.Resolution.MaxDecimalPlaces">
            <summary>
            Returns the maximum number of decimal places this class supports.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx6Datalogger">
            <summary>
            Summary description for Mx6Datalogger.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.#ctor(ISC.Instrument.Driver.InstrumentDriver,ISC.Instrument.Driver.ModbusMaster,System.String)">
            <summary>
            
            </summary>
            <param name="driver"></param>
            <param name="modbusMaster"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.DownloadSession(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.CommitPeriod(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.DownloadSessionPackets(System.Int32)">
            <summary>
            
            </summary>
            <param name="sessionNum"></param>
            <returns></returns>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParseSessionHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParseSessionFooter(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParseSensorSessionHeaders(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParseCustomResponseFactorHeader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParseSensorStatus(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParsePeriod(System.Byte[])">
            <summary>
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.ParseReading(System.Collections.Generic.List{ISC.Instrument.Driver.DriverInstrumentSensorReading}[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="periodReadings"></param>
            <param name="record"></param>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx6Datalogger.BytesToString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="F:ISC.Instrument.Driver.DatalogHeader.headerId">
            <summary>
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.DatalogHeader.#ctor">
            <summary>
            Constructor. Protected. Access only allowed (and necessary) for statics.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.Mx4CalRegistersAndDefs">
            <summary>
            Registers for the MX4 Cal Station.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalRegistersAndDefs.#ctor">
            <summary>
            Constructor. Protected. Access only allowed (and necessary) for statics.
            Protected so that GbProRegisters can derive from it.
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.Mx4CalRegistersAndDefs.#cctor">
            <summary>
            Static constructor used to initialize static variables.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.InstrumentErrorCategory">
            <summary>
            Used by the <see cref="T:ISC.Instrument.Driver.InstrumentError"/> class's <see cref="P:ISC.Instrument.Driver.InstrumentError.Category"/> property.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentErrorCategory.Instrument">
            <summary>
            The error is an instrument error.
            </summary>
        </member>
        <member name="F:ISC.Instrument.Driver.InstrumentErrorCategory.BaseUnit">
            <summary>
            The error occurred in a base unit.
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.InstrumentError">
            <summary>
            Represents an error that occurred sometime in the past on the instrument.
            </summary>
            <remarks>
            <see cref="T:ISC.Instrument.Driver.InstrumentError"/> objects are immutable (read-only).
            </remarks>
            <seealso cref="M:ISC.Instrument.Driver.InstrumentDriver.getInstrumentErrors"/>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentError.#ctor(System.UInt16,System.DateTime)">
            <summary>
            Constructor.
            <para>ErrorCategory is defaulted to ErrorCategory.Instrument.</para>
            <para>BaseUnitSerialNumber is defaulted to an empty string.</para>
            </summary>
            <param name="code">Error number</param>
            <param name="timestamp">Date/time when the error occurred.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentError.#ctor(System.UInt16,System.DateTime,ISC.Instrument.Driver.InstrumentErrorCategory)">
            <summary>
            Constructor.
            <para>BaseUnitSerialNumber is defaulted to an empty string.</para>
            </summary>
            <param name="code">Error number</param>
            <param name="timestamp">Date/time when the error occurred.</param>
            <param name="category">The type of error.</param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentError.#ctor(System.UInt16,System.DateTime,ISC.Instrument.Driver.InstrumentErrorCategory,System.String)">
            <summary>
            
            </summary>
            <param name="code">Error number.</param>
            <param name="timestamp">Date/time when the error occurred.</param>
            <param name="category">The type of error.</param>
            <param name="baseUnitSerialNumber">
            The base unit that module was in when the alarm occurred.
            Only used with SafeCore modules; will be empty for all other instrument types.
            </param>
        </member>
        <member name="M:ISC.Instrument.Driver.InstrumentError.ToString">
            <summary>
            Returned format is "Code @ Timestamp".
            <para>e.g. "407 @ 01/27/12 13:46:14</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentError.Code">
            <summary>
            Returns the error number of this instrument error
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentError.Timestamp">
            <summary>
            Returns when this instrument error occurred.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentError.BaseUnitSerialNumber">
            <summary>
            The base unit that module was in when the alarm occurred.
            Only used with SafeCore modules; will be empty for all other instrument types.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.InstrumentError.Category">
            <summary>
            The type of error (i.e., an Instrument error or a Base Unit error).
            <remarks>
            Will always be an Instrument error for all instrument types other than SafeCore.
            <para>
            For SafeCore, the type can be either Instrument or BaseUnit.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="T:ISC.Instrument.Driver.AlarmEvent">
            <summary>
            AlarmEvent
            </summary>
        </member>
        <member name="M:ISC.Instrument.Driver.AlarmEvent.Clone">
            <summary>
            Returns a duplicate copy of this AlarmEvent object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.IsDualSense">
            <summary>
            True if the AlarmEvent is for a physical sensor that was in DualSense mode 
            at the time of the alarm. Not used for Tango.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.MeasurementType">
            <summary>
            Will be Unknown for instruments that don't log the measurement type.
            </summary>
            <remarks>
            Will always MeasurementType.Unknown for MX6 alarm events.)
            </remarks>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.GasCode">
            <summary>
            The "GasCode" of the gas type. i.e., if GasType is "H2S",
            then the returned gas code is "G0002".
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.SensorCode">
            <summary>
            The sensor code of the sensor. e.g., "S0002" for an H2S sensor alarm event.
            </summary>
            <remarks>
            Will always be empty for MX6 alarm events.
            </remarks>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.SensorSerialNumber">
            <summary>
            The Serial number of the sensor.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.Timestamp">
            <summary>
            The time (calendar date and time) that the alarm event occurred.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.Duration">
            <summary>
            The length of time that the alarm event lasted.
            </summary>
            <seealso cref="P:ISC.Instrument.Driver.AlarmEvent.DurationSeconds"/>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.DurationSeconds">
            <summary>
            The length of time that alarm event lasted, in seconds.
            </summary>
            <remarks>
            <note>
            APPLICATIONS SHOULD NOT CALL THIS PROPERTY. APPLICTIONS SHOULD CALL THE <see cref="P:ISC.Instrument.Driver.AlarmEvent.Duration"/> PROPERTY, INSTEAD.
            <para>This property only exists because the <see cref="P:ISC.Instrument.Driver.AlarmEvent.Duration"/> property is 
            not serializable (it is a TimeSpan property, and TimeSpan is not serializable). 
            While applications  should not and cannot call this property, the .Net serializer
            is able to call this property in order to serialize/deserialize the 'duration'
            of the alarm event.
            </para>
            </note>
            </remarks>
            <seealso cref="P:ISC.Instrument.Driver.AlarmEvent.Duration"/>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.PeakReading">
            <summary>
            The peak reading seen in the duration of the event. 
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.AlarmHigh">
            <summary>
            The high alarm setting at time of event.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.AlarmLow">
            <summary>
            The low alarm setting at time of event.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.User">
            <summary>
            The instrument's active user at time of event. May be empty.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.Site">
            <summary>
            The instrument's active site at time of event. May be empty.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.UserAccessLevel">
            <summary>
            For proximity alarms, this will be set to the instrument's access level at the time of the alarm.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.SiteAccessLevel">
            <summary>
            For proximity alarms, this will be set to the site's (a.k.a beacon's) access level at the time of the alarm.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.BaseUnitSerialNumber">
            <summary>
            The base unit that module was in when the alarm occurred.
            Only used with SafeCore modules; will be empty for all other instrument types.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.Ticks">
            <summary>
            The ticks value. Used only for GBPlus instruments.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.SpeakerVoltage">
             <summary>
             The speaker voltage. Used only for GBPro instruments.
             </summary>
            
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.VibratingMotorVoltage">
            <summary>
            The vibrating motor voltage. Used only for GBPro instruments.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.AlarmOperatingMode">
            <summary>
            The operating mode at time of alarm. Used only for GBPro instruments.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.IsDocked">
            <summary>
            Indicates if the was instrument docked at the time the event occurred. Used only for GBPro instruments.
            </summary>
        </member>
        <member name="P:ISC.Instrument.Driver.AlarmEvent.Positions">
            <summary>
            The position number(s) of the sensor at the time of the gas operation.
            </summary>
            <remarks>
            This will only be filled in for certain instrument types; e.g. SafeCore.
            Will be a empty if not supported the instrument type.
            </remarks>
        </member>
    </members>
</doc>
